
F334Control_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000679c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030b8  08006930  08006930  00016930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e8  080099e8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080099e8  080099e8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099e8  080099e8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099ec  080099ec  000199ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080099f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000570  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000600  20000600  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f13c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021fb  00000000  00000000  0002f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  000313f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000be0  00000000  00000000  000320d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020be7  00000000  00000000  00032cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000114a3  00000000  00000000  0005389f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be132  00000000  00000000  00064d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122e74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ca8  00000000  00000000  00122ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006914 	.word	0x08006914

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08006914 	.word	0x08006914

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c12:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <MX_SPI1_Init+0x7c>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c24:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c44:	2230      	movs	r2, #48	; 0x30
 8000c46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c5c:	220a      	movs	r2, #10
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c68:	2208      	movs	r2, #8
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c6e:	f002 fb0d 	bl	800328c <HAL_SPI_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <MX_SPI1_Init+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
  {
//    Error_Handler();
	  __disable_irq();
	  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MX_SPI1_Init+0x70>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000ac 	.word	0x200000ac
 8000c88:	40013000 	.word	0x40013000

08000c8c <SPI_WriteByte>:
  * @brief SPI1 WriteByte Function
  * @param TxData:要写入的字节
  * @retval None
  */
void SPI_WriteByte(uint8_t TxData)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1,&TxData,1, HAL_MAX_DELAY);
 8000c96:	1df9      	adds	r1, r7, #7
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4803      	ldr	r0, [pc, #12]	; (8000cac <SPI_WriteByte+0x20>)
 8000ca0:	f002 fb97 	bl	80033d2 <HAL_SPI_Transmit>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200000ac 	.word	0x200000ac

08000cb0 <SPI_WriteSomeByte>:
  * @param TxData:要写入的字节
  * @param u16Size:写入几组字节
  * @retval None
  */
void SPI_WriteSomeByte(uint8_t* TxData, uint16_t u16Size)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, TxData, u16Size, HAL_MAX_DELAY);
 8000cbc:	887a      	ldrh	r2, [r7, #2]
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <SPI_WriteSomeByte+0x24>)
 8000cc6:	f002 fb84 	bl	80033d2 <HAL_SPI_Transmit>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000ac 	.word	0x200000ac

08000cd8 <delay_ms>:
#include "sys.h"



void delay_ms(int ms)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 fb6e 	bl	80013c4 <HAL_Delay>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf4:	f000 fb00 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf8:	f000 f80b 	bl	8000d12 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f000 f8d2 	bl	8000ea4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d00:	f000 f8a0 	bl	8000e44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d04:	f000 f85e 	bl	8000dc4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d08:	f7ff ff80 	bl	8000c0c <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ssd1309_TestAll();
 8000d0c:	f004 f874 	bl	8004df8 <ssd1309_TestAll>
 8000d10:	e7fc      	b.n	8000d0c <main+0x1c>

08000d12 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b096      	sub	sp, #88	; 0x58
 8000d16:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d1c:	2228      	movs	r2, #40	; 0x28
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 f8f5 	bl	8004f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]
 8000d46:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d50:	2310      	movs	r3, #16
 8000d52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d5c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fee6 	bl	8001b38 <HAL_RCC_OscConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d72:	f000 f915 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d76:	230f      	movs	r3, #15
 8000d78:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	2102      	movs	r1, #2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 ff0e 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d9e:	f000 f8ff 	bl	8000fa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000da2:	2320      	movs	r3, #32
 8000da4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000daa:	463b      	mov	r3, r7
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 f937 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000db8:	f000 f8f2 	bl	8000fa0 <Error_Handler>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3758      	adds	r7, #88	; 0x58
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000dca:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <MX_I2C1_Init+0x78>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <MX_I2C1_Init+0x7c>)
 8000dd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dfe:	480e      	ldr	r0, [pc, #56]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000e00:	f000 fd74 	bl	80018ec <HAL_I2C_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e0a:	f000 f8c9 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000e12:	f000 fdfa 	bl	8001a0a <HAL_I2CEx_ConfigAnalogFilter>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e1c:	f000 f8c0 	bl	8000fa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_I2C1_Init+0x74>)
 8000e24:	f000 fe3c 	bl	8001aa0 <HAL_I2CEx_ConfigDigitalFilter>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e2e:	f000 f8b7 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000110 	.word	0x20000110
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	2000090e 	.word	0x2000090e

08000e44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e4a:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <MX_USART2_UART_Init+0x5c>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e50:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USART2_UART_Init+0x58>)
 8000e88:	f002 fd76 	bl	8003978 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e92:	f000 f885 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000015c 	.word	0x2000015c
 8000ea0:	40004400 	.word	0x40004400

08000ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	4a35      	ldr	r2, [pc, #212]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ec4:	6153      	str	r3, [r2, #20]
 8000ec6:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed2:	4b30      	ldr	r3, [pc, #192]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	4a2f      	ldr	r2, [pc, #188]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000ed8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000edc:	6153      	str	r3, [r2, #20]
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a29      	ldr	r2, [pc, #164]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a23      	ldr	r2, [pc, #140]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_GPIO_Init+0xf0>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f22:	f000 fccb 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|CS_Pin|RST_Pin|lcd_BL_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000f2c:	481a      	ldr	r0, [pc, #104]	; (8000f98 <MX_GPIO_Init+0xf4>)
 8000f2e:	f000 fcc5 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4814      	ldr	r0, [pc, #80]	; (8000f9c <MX_GPIO_Init+0xf8>)
 8000f4a:	f000 fb45 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f4e:	2310      	movs	r3, #16
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f000 fb36 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin CS_Pin RST_Pin lcd_BL_Pin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin|RST_Pin|lcd_BL_Pin;
 8000f6c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_GPIO_Init+0xf4>)
 8000f86:	f000 fb27 	bl	80015d8 <HAL_GPIO_Init>

}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	48000800 	.word	0x48000800

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6193      	str	r3, [r2, #24]
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fe2:	2007      	movs	r0, #7
 8000fe4:	f000 fac4 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a26      	ldr	r2, [pc, #152]	; (80010ac <HAL_I2C_MspInit+0xb8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d145      	bne.n	80010a2 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <HAL_I2C_MspInit+0xbc>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a25      	ldr	r2, [pc, #148]	; (80010b0 <HAL_I2C_MspInit+0xbc>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <HAL_I2C_MspInit+0xbc>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_I2C_MspInit+0xbc>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <HAL_I2C_MspInit+0xbc>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_I2C_MspInit+0xbc>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104c:	2312      	movs	r3, #18
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001058:	2304      	movs	r3, #4
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f000 fab7 	bl	80015d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106e:	2312      	movs	r3, #18
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800107a:	2304      	movs	r3, #4
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HAL_I2C_MspInit+0xc0>)
 8001086:	f000 faa7 	bl	80015d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_I2C_MspInit+0xbc>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_I2C_MspInit+0xbc>)
 8001090:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_I2C_MspInit+0xbc>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	3728      	adds	r7, #40	; 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40005400 	.word	0x40005400
 80010b0:	40021000 	.word	0x40021000
 80010b4:	48000400 	.word	0x48000400

080010b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a17      	ldr	r2, [pc, #92]	; (8001134 <HAL_SPI_MspInit+0x7c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d128      	bne.n	800112c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	4a16      	ldr	r2, [pc, #88]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e4:	6193      	str	r3, [r2, #24]
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a10      	ldr	r2, [pc, #64]	; (8001138 <HAL_SPI_MspInit+0x80>)
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_SPI_MspInit+0x80>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800110a:	23e0      	movs	r3, #224	; 0xe0
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800111a:	2305      	movs	r3, #5
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f000 fa56 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013000 	.word	0x40013000
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_UART_MspInit+0x7c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d128      	bne.n	80011b0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_UART_MspInit+0x80>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_UART_MspInit+0x80>)
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_UART_MspInit+0x80>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119e:	2307      	movs	r3, #7
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f000 fa14 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40021000 	.word	0x40021000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120c:	f000 f8ba 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f003 fe12 	bl	8004e6c <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20003000 	.word	0x20003000
 8001274:	00000400 	.word	0x00000400
 8001278:	200001e0 	.word	0x200001e0
 800127c:	20000600 	.word	0x20000600

08001280 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopForever+0xe>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopForever+0x16>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ce:	f7ff ffd7 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f003 fdd1 	bl	8004e78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012d6:	f7ff fd0b 	bl	8000cf0 <main>

080012da <LoopForever>:

LoopForever:
    b LoopForever
 80012da:	e7fe      	b.n	80012da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012dc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012e8:	080099f0 	.word	0x080099f0
  ldr r2, =_sbss
 80012ec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012f0:	20000600 	.word	0x20000600

080012f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC1_2_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x28>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x28>)
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 f931 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fe4a 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40022000 	.word	0x40022000

08001324 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f93b 	bl	80015be <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 f911 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000000 	.word	0x20000000
 800137c:	20000008 	.word	0x20000008
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008
 80013a8:	200001e4 	.word	0x200001e4

080013ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200001e4 	.word	0x200001e4

080013c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff47 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff5c 	bl	8001454 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ff8e 	bl	80014c4 <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff5d 	bl	8001470 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffb0 	bl	800152c <SysTick_Config>
 80015cc:	4603      	mov	r3, r0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e6:	e14e      	b.n	8001886 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8140 	beq.w	8001880 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d005      	beq.n	8001618 <HAL_GPIO_Init+0x40>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 0201 	and.w	r2, r3, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b03      	cmp	r3, #3
 8001684:	d017      	beq.n	80016b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d123      	bne.n	800170a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	6939      	ldr	r1, [r7, #16]
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0203 	and.w	r2, r3, #3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 809a 	beq.w	8001880 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_GPIO_Init+0x2cc>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a54      	ldr	r2, [pc, #336]	; (80018a4 <HAL_GPIO_Init+0x2cc>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b52      	ldr	r3, [pc, #328]	; (80018a4 <HAL_GPIO_Init+0x2cc>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001764:	4a50      	ldr	r2, [pc, #320]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800178e:	d013      	beq.n	80017b8 <HAL_GPIO_Init+0x1e0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a46      	ldr	r2, [pc, #280]	; (80018ac <HAL_GPIO_Init+0x2d4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00d      	beq.n	80017b4 <HAL_GPIO_Init+0x1dc>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a45      	ldr	r2, [pc, #276]	; (80018b0 <HAL_GPIO_Init+0x2d8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_Init+0x1d8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a44      	ldr	r2, [pc, #272]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_GPIO_Init+0x1d4>
 80017a8:	2303      	movs	r3, #3
 80017aa:	e006      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017ac:	2305      	movs	r3, #5
 80017ae:	e004      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_GPIO_Init+0x1e2>
 80017b8:	2300      	movs	r3, #0
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	f002 0203 	and.w	r2, r2, #3
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	4093      	lsls	r3, r2
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017ca:	4937      	ldr	r1, [pc, #220]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d8:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017fc:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001802:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001826:	4a24      	ldr	r2, [pc, #144]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	f47f aea9 	bne.w	80015e8 <HAL_GPIO_Init+0x10>
  }
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40010000 	.word	0x40010000
 80018ac:	48000400 	.word	0x48000400
 80018b0:	48000800 	.word	0x48000800
 80018b4:	48000c00 	.word	0x48000c00
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e081      	b.n	8001a02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fb6e 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800193c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800194c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	e006      	b.n	8001974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d104      	bne.n	8001986 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69d9      	ldr	r1, [r3, #28]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	d138      	bne.n	8001a92 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e032      	b.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2224      	movs	r2, #36	; 0x24
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d139      	bne.n	8001b2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e033      	b.n	8001b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2224      	movs	r2, #36	; 0x24
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001af2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e000      	b.n	8001b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b2a:	2302      	movs	r3, #2
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f001 b823 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 817d 	beq.w	8001e6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b74:	4bbc      	ldr	r3, [pc, #752]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d00c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b80:	4bb9      	ldr	r3, [pc, #740]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d15c      	bne.n	8001c46 <HAL_RCC_OscConfig+0x10e>
 8001b8c:	4bb6      	ldr	r3, [pc, #728]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d155      	bne.n	8001c46 <HAL_RCC_OscConfig+0x10e>
 8001b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	095b      	lsrs	r3, r3, #5
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d102      	bne.n	8001bcc <HAL_RCC_OscConfig+0x94>
 8001bc6:	4ba8      	ldr	r3, [pc, #672]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	e015      	b.n	8001bf8 <HAL_RCC_OscConfig+0xc0>
 8001bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001be8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001bf4:	4b9c      	ldr	r3, [pc, #624]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bfc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c04:	fa92 f2a2 	rbit	r2, r2
 8001c08:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c10:	fab2 f282 	clz	r2, r2
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f042 0220 	orr.w	r2, r2, #32
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f002 021f 	and.w	r2, r2, #31
 8001c20:	2101      	movs	r1, #1
 8001c22:	fa01 f202 	lsl.w	r2, r1, r2
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 811f 	beq.w	8001e6c <HAL_RCC_OscConfig+0x334>
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 8116 	bne.w	8001e6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f000 bfaf 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12e>
 8001c58:	4b83      	ldr	r3, [pc, #524]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a82      	ldr	r2, [pc, #520]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	e036      	b.n	8001cd4 <HAL_RCC_OscConfig+0x19c>
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x158>
 8001c76:	4b7c      	ldr	r3, [pc, #496]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a7b      	ldr	r2, [pc, #492]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a78      	ldr	r2, [pc, #480]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001c88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e021      	b.n	8001cd4 <HAL_RCC_OscConfig+0x19c>
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x184>
 8001ca2:	4b71      	ldr	r3, [pc, #452]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a70      	ldr	r2, [pc, #448]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b6e      	ldr	r3, [pc, #440]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a6d      	ldr	r2, [pc, #436]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x19c>
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a69      	ldr	r2, [pc, #420]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b67      	ldr	r3, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a66      	ldr	r2, [pc, #408]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cd4:	4b64      	ldr	r3, [pc, #400]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f023 020f 	bic.w	r2, r3, #15
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	495f      	ldr	r1, [pc, #380]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d059      	beq.n	8001db2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fb55 	bl	80013ac <HAL_GetTick>
 8001d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff fb50 	bl	80013ac <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	; 0x64
 8001d16:	d902      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	f000 bf43 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 8001d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d22:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	095b      	lsrs	r3, r3, #5
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d102      	bne.n	8001d50 <HAL_RCC_OscConfig+0x218>
 8001d4a:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e015      	b.n	8001d7c <HAL_RCC_OscConfig+0x244>
 8001d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d78:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d80:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d88:	fa92 f2a2 	rbit	r2, r2
 8001d8c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d94:	fab2 f282 	clz	r2, r2
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	f042 0220 	orr.w	r2, r2, #32
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f002 021f 	and.w	r2, r2, #31
 8001da4:	2101      	movs	r1, #1
 8001da6:	fa01 f202 	lsl.w	r2, r1, r2
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ab      	beq.n	8001d08 <HAL_RCC_OscConfig+0x1d0>
 8001db0:	e05d      	b.n	8001e6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fafb 	bl	80013ac <HAL_GetTick>
 8001db6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff faf6 	bl	80013ac <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d902      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	f000 bee9 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 8001dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001de6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2cc>
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e015      	b.n	8001e30 <HAL_RCC_OscConfig+0x2f8>
 8001e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_RCC_OscConfig+0x330>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e34:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	f042 0220 	orr.w	r2, r2, #32
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	f002 021f 	and.w	r2, r2, #31
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ab      	bne.n	8001dbc <HAL_RCC_OscConfig+0x284>
 8001e64:	e003      	b.n	8001e6e <HAL_RCC_OscConfig+0x336>
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 817d 	beq.w	800217e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e84:	4ba6      	ldr	r3, [pc, #664]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e90:	4ba3      	ldr	r3, [pc, #652]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d172      	bne.n	8001f82 <HAL_RCC_OscConfig+0x44a>
 8001e9c:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d16c      	bne.n	8001f82 <HAL_RCC_OscConfig+0x44a>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001eba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	fab3 f383 	clz	r3, r3
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d102      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x3a0>
 8001ed2:	4b93      	ldr	r3, [pc, #588]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	e013      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c8>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001eea:	2302      	movs	r3, #2
 8001eec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ef0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001efc:	4b88      	ldr	r3, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2202      	movs	r2, #2
 8001f02:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f06:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f0a:	fa92 f2a2 	rbit	r2, r2
 8001f0e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f12:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCC_OscConfig+0x410>
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f000 be2e 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b75      	ldr	r3, [pc, #468]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	21f8      	movs	r1, #248	; 0xf8
 8001f5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f66:	fa91 f1a1 	rbit	r1, r1
 8001f6a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f72:	fab1 f181 	clz	r1, r1
 8001f76:	b2c9      	uxtb	r1, r1
 8001f78:	408b      	lsls	r3, r1
 8001f7a:	4969      	ldr	r1, [pc, #420]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f80:	e0fd      	b.n	800217e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8088 	beq.w	80020a4 <HAL_RCC_OscConfig+0x56c>
 8001f94:	2301      	movs	r3, #1
 8001f96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001fa6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f9f4 	bl	80013ac <HAL_GetTick>
 8001fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff f9ef 	bl	80013ac <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d902      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	f000 bde2 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001ff2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d102      	bne.n	8002010 <HAL_RCC_OscConfig+0x4d8>
 800200a:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	e013      	b.n	8002038 <HAL_RCC_OscConfig+0x500>
 8002010:	2302      	movs	r3, #2
 8002012:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002028:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002034:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	2202      	movs	r2, #2
 800203a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800203e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800204a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0220 	orr.w	r2, r2, #32
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0af      	beq.n	8001fca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	21f8      	movs	r1, #248	; 0xf8
 8002080:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002088:	fa91 f1a1 	rbit	r1, r1
 800208c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002090:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002094:	fab1 f181 	clz	r1, r1
 8002098:	b2c9      	uxtb	r1, r1
 800209a:	408b      	lsls	r3, r1
 800209c:	4920      	ldr	r1, [pc, #128]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
 80020a2:	e06c      	b.n	800217e <HAL_RCC_OscConfig+0x646>
 80020a4:	2301      	movs	r3, #1
 80020a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80020b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	461a      	mov	r2, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff f96c 	bl	80013ac <HAL_GetTick>
 80020d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020da:	f7ff f967 	bl	80013ac <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d902      	bls.n	80020f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	f000 bd5a 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 80020f0:	2302      	movs	r3, #2
 80020f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	b2db      	uxtb	r3, r3
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d104      	bne.n	8002124 <HAL_RCC_OscConfig+0x5ec>
 800211a:	4b01      	ldr	r3, [pc, #4]	; (8002120 <HAL_RCC_OscConfig+0x5e8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	e015      	b.n	800214c <HAL_RCC_OscConfig+0x614>
 8002120:	40021000 	.word	0x40021000
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002136:	2302      	movs	r3, #2
 8002138:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800213c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002148:	4bc8      	ldr	r3, [pc, #800]	; (800246c <HAL_RCC_OscConfig+0x934>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2202      	movs	r2, #2
 800214e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002152:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002156:	fa92 f2a2 	rbit	r2, r2
 800215a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800215e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002162:	fab2 f282 	clz	r2, r2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f042 0220 	orr.w	r2, r2, #32
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ad      	bne.n	80020da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8110 	beq.w	80023b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002198:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d079      	beq.n	8002298 <HAL_RCC_OscConfig+0x760>
 80021a4:	2301      	movs	r3, #1
 80021a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80021b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	4bab      	ldr	r3, [pc, #684]	; (8002470 <HAL_RCC_OscConfig+0x938>)
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	461a      	mov	r2, r3
 80021ca:	2301      	movs	r3, #1
 80021cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7ff f8ed 	bl	80013ac <HAL_GetTick>
 80021d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d8:	f7ff f8e8 	bl	80013ac <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d902      	bls.n	80021ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	f000 bcdb 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002208:	2202      	movs	r2, #2
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002210:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f2a3 	rbit	r2, r3
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002246:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002248:	4b88      	ldr	r3, [pc, #544]	; (800246c <HAL_RCC_OscConfig+0x934>)
 800224a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002250:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002254:	2102      	movs	r1, #2
 8002256:	6019      	str	r1, [r3, #0]
 8002258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f1a3 	rbit	r1, r3
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800226e:	6019      	str	r1, [r3, #0]
  return result;
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0a0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x6a0>
 8002296:	e08d      	b.n	80023b4 <HAL_RCC_OscConfig+0x87c>
 8002298:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	fa93 f2a3 	rbit	r2, r3
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022ba:	601a      	str	r2, [r3, #0]
  return result;
 80022bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80022c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b68      	ldr	r3, [pc, #416]	; (8002470 <HAL_RCC_OscConfig+0x938>)
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	461a      	mov	r2, r3
 80022d6:	2300      	movs	r3, #0
 80022d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7ff f867 	bl	80013ac <HAL_GetTick>
 80022de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e4:	f7ff f862 	bl	80013ac <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d902      	bls.n	80022fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	f000 bc55 	b.w	8002ba4 <HAL_RCC_OscConfig+0x106c>
 80022fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002302:	2202      	movs	r2, #2
 8002304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f2a3 	rbit	r2, r3
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002326:	2202      	movs	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800234a:	2202      	movs	r2, #2
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002360:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002364:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002366:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_OscConfig+0x934>)
 8002368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002372:	2102      	movs	r1, #2
 8002374:	6019      	str	r1, [r3, #0]
 8002376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fa93 f1a3 	rbit	r1, r3
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800238c:	6019      	str	r1, [r3, #0]
  return result;
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2101      	movs	r1, #1
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d197      	bne.n	80022e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 81a1 	beq.w	800270c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_RCC_OscConfig+0x934>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d116      	bne.n	800240a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_RCC_OscConfig+0x934>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a22      	ldr	r2, [pc, #136]	; (800246c <HAL_RCC_OscConfig+0x934>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e6:	61d3      	str	r3, [r2, #28]
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCC_OscConfig+0x934>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002402:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCC_OscConfig+0x93c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11a      	bne.n	800244c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <HAL_RCC_OscConfig+0x93c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a16      	ldr	r2, [pc, #88]	; (8002474 <HAL_RCC_OscConfig+0x93c>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002422:	f7fe ffc3 	bl	80013ac <HAL_GetTick>
 8002426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242a:	e009      	b.n	8002440 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242c:	f7fe ffbe 	bl	80013ac <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b64      	cmp	r3, #100	; 0x64
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e3b1      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_RCC_OscConfig+0x93c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ef      	beq.n	800242c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002450:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10d      	bne.n	8002478 <HAL_RCC_OscConfig+0x940>
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <HAL_RCC_OscConfig+0x934>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a02      	ldr	r2, [pc, #8]	; (800246c <HAL_RCC_OscConfig+0x934>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	e03c      	b.n	80024e4 <HAL_RCC_OscConfig+0x9ac>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	10908120 	.word	0x10908120
 8002474:	40007000 	.word	0x40007000
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10c      	bne.n	80024a2 <HAL_RCC_OscConfig+0x96a>
 8002488:	4bc1      	ldr	r3, [pc, #772]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4ac0      	ldr	r2, [pc, #768]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	4bbe      	ldr	r3, [pc, #760]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4abd      	ldr	r2, [pc, #756]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	e020      	b.n	80024e4 <HAL_RCC_OscConfig+0x9ac>
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x994>
 80024b2:	4bb7      	ldr	r3, [pc, #732]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4ab6      	ldr	r2, [pc, #728]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6213      	str	r3, [r2, #32]
 80024be:	4bb4      	ldr	r3, [pc, #720]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4ab3      	ldr	r2, [pc, #716]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0x9ac>
 80024cc:	4bb0      	ldr	r3, [pc, #704]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4aaf      	ldr	r2, [pc, #700]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	4bad      	ldr	r3, [pc, #692]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4aac      	ldr	r2, [pc, #688]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80024de:	f023 0304 	bic.w	r3, r3, #4
 80024e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 8081 	beq.w	80025f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7fe ff59 	bl	80013ac <HAL_GetTick>
 80024fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe ff54 	bl	80013ac <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e345      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
 8002518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002520:	2202      	movs	r2, #2
 8002522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	fa93 f2a3 	rbit	r2, r3
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002544:	2202      	movs	r2, #2
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	fa93 f2a3 	rbit	r2, r3
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800255e:	601a      	str	r2, [r3, #0]
  return result;
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002568:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d102      	bne.n	8002584 <HAL_RCC_OscConfig+0xa4c>
 800257e:	4b84      	ldr	r3, [pc, #528]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	e013      	b.n	80025ac <HAL_RCC_OscConfig+0xa74>
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fa93 f2a3 	rbit	r2, r3
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	4b79      	ldr	r3, [pc, #484]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025b4:	2102      	movs	r1, #2
 80025b6:	6011      	str	r1, [r2, #0]
 80025b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	fa92 f1a2 	rbit	r1, r2
 80025c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025ce:	6011      	str	r1, [r2, #0]
  return result;
 80025d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d084      	beq.n	8002500 <HAL_RCC_OscConfig+0x9c8>
 80025f6:	e07f      	b.n	80026f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f8:	f7fe fed8 	bl	80013ac <HAL_GetTick>
 80025fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	e00b      	b.n	800261a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe fed3 	bl	80013ac <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e2c4      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
 800261a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002622:	2202      	movs	r2, #2
 8002624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	fa93 f2a3 	rbit	r2, r3
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002646:	2202      	movs	r2, #2
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fa93 f2a3 	rbit	r2, r3
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002660:	601a      	str	r2, [r3, #0]
  return result;
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800266a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f043 0302 	orr.w	r3, r3, #2
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d102      	bne.n	8002686 <HAL_RCC_OscConfig+0xb4e>
 8002680:	4b43      	ldr	r3, [pc, #268]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	e013      	b.n	80026ae <HAL_RCC_OscConfig+0xb76>
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800268e:	2202      	movs	r2, #2
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026b6:	2102      	movs	r1, #2
 80026b8:	6011      	str	r1, [r2, #0]
 80026ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	fa92 f1a2 	rbit	r1, r2
 80026c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026d0:	6011      	str	r1, [r2, #0]
  return result;
 80026d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	f002 021f 	and.w	r2, r2, #31
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f202 	lsl.w	r2, r1, r2
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d184      	bne.n	8002602 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002700:	4b23      	ldr	r3, [pc, #140]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4a22      	ldr	r2, [pc, #136]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8242 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <HAL_RCC_OscConfig+0xc58>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b08      	cmp	r3, #8
 8002728:	f000 8213 	beq.w	8002b52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b02      	cmp	r3, #2
 800273a:	f040 8162 	bne.w	8002a02 <HAL_RCC_OscConfig+0xeca>
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002746:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002762:	601a      	str	r2, [r3, #0]
  return result;
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800276c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002778:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	461a      	mov	r2, r3
 8002780:	2300      	movs	r3, #0
 8002782:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe fe12 	bl	80013ac <HAL_GetTick>
 8002788:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278c:	e00c      	b.n	80027a8 <HAL_RCC_OscConfig+0xc70>
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fe0a 	bl	80013ac <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1fd      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fa93 f2a3 	rbit	r2, r3
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027cc:	601a      	str	r2, [r3, #0]
  return result;
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80027d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_OscConfig+0xcba>
 80027ec:	4bb0      	ldr	r3, [pc, #704]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e027      	b.n	8002842 <HAL_RCC_OscConfig+0xd0a>
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80027fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fa93 f2a3 	rbit	r2, r3
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	4b9c      	ldr	r3, [pc, #624]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002846:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800284a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800284e:	6011      	str	r1, [r2, #0]
 8002850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002854:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	fa92 f1a2 	rbit	r1, r2
 800285e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002862:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002866:	6011      	str	r1, [r2, #0]
  return result;
 8002868:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d182      	bne.n	8002794 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288e:	4b88      	ldr	r3, [pc, #544]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	430b      	orrs	r3, r1
 80028b0:	497f      	ldr	r1, [pc, #508]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	fa93 f2a3 	rbit	r2, r3
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028da:	601a      	str	r2, [r3, #0]
  return result;
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80028e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	461a      	mov	r2, r3
 80028f8:	2301      	movs	r3, #1
 80028fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe fd56 	bl	80013ac <HAL_GetTick>
 8002900:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002904:	e009      	b.n	800291a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002906:	f7fe fd51 	bl	80013ac <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e144      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
 800291a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002922:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	fa93 f2a3 	rbit	r2, r3
 8002936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800293e:	601a      	str	r2, [r3, #0]
  return result;
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002948:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_OscConfig+0xe2c>
 800295e:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e027      	b.n	80029b4 <HAL_RCC_OscConfig+0xe7c>
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800296c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002984:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002992:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fa93 f2a3 	rbit	r2, r3
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029c0:	6011      	str	r1, [r2, #0]
 80029c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	fa92 f1a2 	rbit	r1, r2
 80029d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029d8:	6011      	str	r1, [r2, #0]
  return result;
 80029da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f042 0220 	orr.w	r2, r2, #32
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f002 021f 	and.w	r2, r2, #31
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f202 	lsl.w	r2, r1, r2
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d082      	beq.n	8002906 <HAL_RCC_OscConfig+0xdce>
 8002a00:	e0cf      	b.n	8002ba2 <HAL_RCC_OscConfig+0x106a>
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	fa93 f2a3 	rbit	r2, r3
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a26:	601a      	str	r2, [r3, #0]
  return result;
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	461a      	mov	r2, r3
 8002a44:	2300      	movs	r3, #0
 8002a46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7fe fcb0 	bl	80013ac <HAL_GetTick>
 8002a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a50:	e009      	b.n	8002a66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe fcab 	bl	80013ac <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e09e      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
 8002a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	fa93 f2a3 	rbit	r2, r3
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a8a:	601a      	str	r2, [r3, #0]
  return result;
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002a94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d104      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xf7c>
 8002aaa:	4b01      	ldr	r3, [pc, #4]	; (8002ab0 <HAL_RCC_OscConfig+0xf78>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	e029      	b.n	8002b04 <HAL_RCC_OscConfig+0xfcc>
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_RCC_OscConfig+0x1078>)
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b08:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b10:	6011      	str	r1, [r2, #0]
 8002b12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b16:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	fa92 f1a2 	rbit	r1, r2
 8002b20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b28:	6011      	str	r1, [r2, #0]
  return result;
 8002b2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	fab2 f282 	clz	r2, r2
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f042 0220 	orr.w	r2, r2, #32
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f002 021f 	and.w	r2, r2, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d180      	bne.n	8002a52 <HAL_RCC_OscConfig+0xf1a>
 8002b50:	e027      	b.n	8002ba2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e01e      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b66:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_RCC_OscConfig+0x1078>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d10b      	bne.n	8002b9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002b86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002b8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b09e      	sub	sp, #120	; 0x78
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e162      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b90      	ldr	r3, [pc, #576]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	498b      	ldr	r1, [pc, #556]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b89      	ldr	r3, [pc, #548]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e14a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b82      	ldr	r3, [pc, #520]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	497f      	ldr	r1, [pc, #508]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80dc 	beq.w	8002de0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d13c      	bne.n	8002caa <HAL_RCC_ClockConfig+0xf6>
 8002c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d102      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xa6>
 8002c54:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e00f      	b.n	8002c7a <HAL_RCC_ClockConfig+0xc6>
 8002c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	667b      	str	r3, [r7, #100]	; 0x64
 8002c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c76:	4b67      	ldr	r3, [pc, #412]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d17b      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0f3      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d13c      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x178>
 8002cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x128>
 8002cd6:	4b4f      	ldr	r3, [pc, #316]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	e00f      	b.n	8002cfc <HAL_RCC_ClockConfig+0x148>
 8002cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cee:	643b      	str	r3, [r7, #64]	; 0x40
 8002cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d00:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f002 021f 	and.w	r2, r2, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d13a      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b2      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x1a0>
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	e00d      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1bc>
 8002d54:	2302      	movs	r3, #2
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d60:	2302      	movs	r3, #2
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2202      	movs	r2, #2
 8002d72:	61ba      	str	r2, [r7, #24]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	617a      	str	r2, [r7, #20]
  return result;
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0220 	orr.w	r2, r2, #32
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e079      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	491a      	ldr	r1, [pc, #104]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fafc 	bl	80013ac <HAL_GetTick>
 8002db4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7fe faf8 	bl	80013ac <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e061      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d214      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4906      	ldr	r1, [pc, #24]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e040      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
 8002e10:	40022000 	.word	0x40022000
 8002e14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	491a      	ldr	r1, [pc, #104]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4912      	ldr	r1, [pc, #72]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e56:	f000 f829 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e64:	22f0      	movs	r2, #240	; 0xf0
 8002e66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	fa92 f2a2 	rbit	r2, r2
 8002e6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	40d3      	lsrs	r3, r2
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x2ec>)
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
 8002e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e82:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <HAL_RCC_ClockConfig+0x2f0>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_RCC_ClockConfig+0x2f4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fa4a 	bl	8001324 <HAL_InitTick>
  
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3778      	adds	r7, #120	; 0x78
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	0800699c 	.word	0x0800699c
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b08b      	sub	sp, #44	; 0x2c
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x30>
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8002eda:	e03c      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ede:	623b      	str	r3, [r7, #32]
      break;
 8002ee0:	e03c      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ee8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002eec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	fa92 f2a2 	rbit	r2, r2
 8002ef4:	607a      	str	r2, [r7, #4]
  return result;
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	fab2 f282 	clz	r2, r2
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	40d3      	lsrs	r3, r2
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f02:	5cd3      	ldrb	r3, [r2, r3]
 8002f04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	220f      	movs	r2, #15
 8002f10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	fa92 f2a2 	rbit	r2, r2
 8002f18:	60fa      	str	r2, [r7, #12]
  return result;
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	fab2 f282 	clz	r2, r2
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	40d3      	lsrs	r3, r2
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f34:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	e004      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	623b      	str	r3, [r7, #32]
      break;
 8002f54:	e002      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f58:	623b      	str	r3, [r7, #32]
      break;
 8002f5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	372c      	adds	r7, #44	; 0x2c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	007a1200 	.word	0x007a1200
 8002f74:	080069b4 	.word	0x080069b4
 8002f78:	080069c4 	.word	0x080069c4
 8002f7c:	003d0900 	.word	0x003d0900

08002f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000000 	.word	0x20000000

08002f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002f9e:	f7ff ffef 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002fb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	fa92 f2a2 	rbit	r2, r2
 8002fb8:	603a      	str	r2, [r7, #0]
  return result;
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	fab2 f282 	clz	r2, r2
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	40d3      	lsrs	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	080069ac 	.word	0x080069ac

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002fe2:	f7ff ffcd 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002fe6:	4601      	mov	r1, r0
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ff0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ff4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	fa92 f2a2 	rbit	r2, r2
 8002ffc:	603a      	str	r2, [r7, #0]
  return result;
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	fab2 f282 	clz	r2, r2
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	40d3      	lsrs	r3, r2
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_RCC_GetPCLK2Freq+0x40>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	080069ac 	.word	0x080069ac

08003020 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b092      	sub	sp, #72	; 0x48
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 80cd 	beq.w	80031de <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003044:	4b8e      	ldr	r3, [pc, #568]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10e      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003050:	4b8b      	ldr	r3, [pc, #556]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	4a8a      	ldr	r2, [pc, #552]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305a:	61d3      	str	r3, [r2, #28]
 800305c:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306e:	4b85      	ldr	r3, [pc, #532]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d118      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307a:	4b82      	ldr	r3, [pc, #520]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a81      	ldr	r2, [pc, #516]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003084:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003086:	f7fe f991 	bl	80013ac <HAL_GetTick>
 800308a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	e008      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308e:	f7fe f98d 	bl	80013ac <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b64      	cmp	r3, #100	; 0x64
 800309a:	d901      	bls.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0ea      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	4b78      	ldr	r3, [pc, #480]	; (8003284 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ac:	4b74      	ldr	r3, [pc, #464]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d07d      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d076      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030ca:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030e4:	fab3 f383 	clz	r3, r3
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	4b66      	ldr	r3, [pc, #408]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	461a      	mov	r2, r3
 80030f4:	2301      	movs	r3, #1
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	4b5d      	ldr	r3, [pc, #372]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	461a      	mov	r2, r3
 8003118:	2300      	movs	r3, #0
 800311a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800311c:	4a58      	ldr	r2, [pc, #352]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003120:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d045      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe f93e 	bl	80013ac <HAL_GetTick>
 8003130:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003132:	e00a      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003134:	f7fe f93a 	bl	80013ac <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e095      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800314a:	2302      	movs	r3, #2
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
 8003156:	2302      	movs	r3, #2
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	61fb      	str	r3, [r7, #28]
  return result;
 8003162:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f043 0302 	orr.w	r3, r3, #2
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d102      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003178:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	e007      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800317e:	2302      	movs	r3, #2
 8003180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2202      	movs	r2, #2
 8003190:	613a      	str	r2, [r7, #16]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	fa92 f2a2 	rbit	r2, r2
 8003198:	60fa      	str	r2, [r7, #12]
  return result;
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	fab2 f282 	clz	r2, r2
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	f002 021f 	and.w	r2, r2, #31
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f202 	lsl.w	r2, r1, r2
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0bd      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	492e      	ldr	r1, [pc, #184]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4a2a      	ldr	r2, [pc, #168]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031dc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ea:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f023 0203 	bic.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	4922      	ldr	r1, [pc, #136]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	f023 0210 	bic.w	r2, r3, #16
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	491a      	ldr	r1, [pc, #104]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	4313      	orrs	r3, r2
 8003218:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	4913      	ldr	r1, [pc, #76]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003234:	4313      	orrs	r3, r2
 8003236:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	490b      	ldr	r1, [pc, #44]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003252:	4313      	orrs	r3, r2
 8003254:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	4904      	ldr	r1, [pc, #16]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	4313      	orrs	r3, r2
 8003272:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3748      	adds	r7, #72	; 0x48
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
 8003288:	10908100 	.word	0x10908100

0800328c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e095      	b.n	80033ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ae:	d009      	beq.n	80032c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
 80032b6:	e005      	b.n	80032c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd feea 	bl	80010b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003304:	d902      	bls.n	800330c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	e002      	b.n	8003312 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800330c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003310:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800331a:	d007      	beq.n	800332c <HAL_SPI_Init+0xa0>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003324:	d002      	beq.n	800332c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336e:	ea42 0103 	orr.w	r1, r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	f003 0204 	and.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033a8:	ea42 0103 	orr.w	r1, r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b088      	sub	sp, #32
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_SPI_Transmit+0x22>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e158      	b.n	80036a6 <HAL_SPI_Transmit+0x2d4>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033fc:	f7fd ffd6 	bl	80013ac <HAL_GetTick>
 8003400:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d002      	beq.n	8003418 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003412:	2302      	movs	r3, #2
 8003414:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003416:	e13d      	b.n	8003694 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_SPI_Transmit+0x52>
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003428:	e134      	b.n	8003694 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2203      	movs	r2, #3
 800342e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003474:	d10f      	bne.n	8003496 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003484:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003494:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d007      	beq.n	80034b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034bc:	d94b      	bls.n	8003556 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_SPI_Transmit+0xfa>
 80034c6:	8afb      	ldrh	r3, [r7, #22]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d13e      	bne.n	800354a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	1c9a      	adds	r2, r3, #2
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034f0:	e02b      	b.n	800354a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d112      	bne.n	8003526 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003524:	e011      	b.n	800354a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003526:	f7fd ff41 	bl	80013ac <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d803      	bhi.n	800353e <HAL_SPI_Transmit+0x16c>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d102      	bne.n	8003544 <HAL_SPI_Transmit+0x172>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003548:	e0a4      	b.n	8003694 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ce      	bne.n	80034f2 <HAL_SPI_Transmit+0x120>
 8003554:	e07c      	b.n	8003650 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_SPI_Transmit+0x192>
 800355e:	8afb      	ldrh	r3, [r7, #22]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d170      	bne.n	8003646 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d912      	bls.n	8003594 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	1c9a      	adds	r2, r3, #2
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b02      	subs	r3, #2
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003592:	e058      	b.n	8003646 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	330c      	adds	r3, #12
 800359e:	7812      	ldrb	r2, [r2, #0]
 80035a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035ba:	e044      	b.n	8003646 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d12b      	bne.n	8003622 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d912      	bls.n	80035fa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b02      	subs	r3, #2
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035f8:	e025      	b.n	8003646 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	330c      	adds	r3, #12
 8003604:	7812      	ldrb	r2, [r2, #0]
 8003606:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003620:	e011      	b.n	8003646 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003622:	f7fd fec3 	bl	80013ac <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d803      	bhi.n	800363a <HAL_SPI_Transmit+0x268>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d102      	bne.n	8003640 <HAL_SPI_Transmit+0x26e>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003644:	e026      	b.n	8003694 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1b5      	bne.n	80035bc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	6839      	ldr	r1, [r7, #0]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f949 	bl	80038ec <SPI_EndRxTxTransaction>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	e000      	b.n	8003694 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003692:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	4613      	mov	r3, r2
 80036be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036c0:	f7fd fe74 	bl	80013ac <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	4413      	add	r3, r2
 80036ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036d0:	f7fd fe6c 	bl	80013ac <HAL_GetTick>
 80036d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	015b      	lsls	r3, r3, #5
 80036dc:	0d1b      	lsrs	r3, r3, #20
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	fb02 f303 	mul.w	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036e6:	e054      	b.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d050      	beq.n	8003792 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036f0:	f7fd fe5c 	bl	80013ac <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d902      	bls.n	8003706 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d13d      	bne.n	8003782 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003714:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800371e:	d111      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003728:	d004      	beq.n	8003734 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003732:	d107      	bne.n	8003744 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003742:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374c:	d10f      	bne.n	800376e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800376c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e017      	b.n	80037b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	3b01      	subs	r3, #1
 8003790:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d19b      	bne.n	80036e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000000 	.word	0x20000000

080037c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037d2:	f7fd fdeb 	bl	80013ac <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	4413      	add	r3, r2
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037e2:	f7fd fde3 	bl	80013ac <HAL_GetTick>
 80037e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037f0:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	00da      	lsls	r2, r3, #3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	0d1b      	lsrs	r3, r3, #20
 8003800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003802:	fb02 f303 	mul.w	r3, r2, r3
 8003806:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003808:	e060      	b.n	80038cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003810:	d107      	bne.n	8003822 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003820:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d050      	beq.n	80038cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800382a:	f7fd fdbf 	bl	80013ac <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	429a      	cmp	r2, r3
 8003838:	d902      	bls.n	8003840 <SPI_WaitFifoStateUntilTimeout+0x80>
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	2b00      	cmp	r3, #0
 800383e:	d13d      	bne.n	80038bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800384e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003858:	d111      	bne.n	800387e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003862:	d004      	beq.n	800386e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386c:	d107      	bne.n	800387e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003886:	d10f      	bne.n	80038a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e010      	b.n	80038de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d196      	bne.n	800380a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3728      	adds	r7, #40	; 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000000 	.word	0x20000000

080038ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2200      	movs	r2, #0
 8003900:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff ff5b 	bl	80037c0 <SPI_WaitFifoStateUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e027      	b.n	8003970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2200      	movs	r2, #0
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7ff fec0 	bl	80036b0 <SPI_WaitFlagStateUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e014      	b.n	8003970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff ff34 	bl	80037c0 <SPI_WaitFifoStateUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e000      	b.n	8003970 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e040      	b.n	8003a0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd fbce 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	; 0x24
 80039a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f82c 	bl	8003a14 <UART_SetConfig>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e022      	b.n	8003a0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f956 	bl	8003c80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f9dd 	bl	8003dc4 <UART_CheckIdleState>
 8003a0a:	4603      	mov	r3, r0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4b8a      	ldr	r3, [pc, #552]	; (8003c68 <UART_SetConfig+0x254>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	6979      	ldr	r1, [r7, #20]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a78      	ldr	r2, [pc, #480]	; (8003c6c <UART_SetConfig+0x258>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d120      	bne.n	8003ad2 <UART_SetConfig+0xbe>
 8003a90:	4b77      	ldr	r3, [pc, #476]	; (8003c70 <UART_SetConfig+0x25c>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d817      	bhi.n	8003acc <UART_SetConfig+0xb8>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <UART_SetConfig+0x90>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ab5 	.word	0x08003ab5
 8003aa8:	08003ac1 	.word	0x08003ac1
 8003aac:	08003ac7 	.word	0x08003ac7
 8003ab0:	08003abb 	.word	0x08003abb
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e01d      	b.n	8003af6 <UART_SetConfig+0xe2>
 8003aba:	2302      	movs	r3, #2
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e01a      	b.n	8003af6 <UART_SetConfig+0xe2>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e017      	b.n	8003af6 <UART_SetConfig+0xe2>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e014      	b.n	8003af6 <UART_SetConfig+0xe2>
 8003acc:	2310      	movs	r3, #16
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e011      	b.n	8003af6 <UART_SetConfig+0xe2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a67      	ldr	r2, [pc, #412]	; (8003c74 <UART_SetConfig+0x260>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d102      	bne.n	8003ae2 <UART_SetConfig+0xce>
 8003adc:	2300      	movs	r3, #0
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e009      	b.n	8003af6 <UART_SetConfig+0xe2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a64      	ldr	r2, [pc, #400]	; (8003c78 <UART_SetConfig+0x264>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d102      	bne.n	8003af2 <UART_SetConfig+0xde>
 8003aec:	2300      	movs	r3, #0
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	e001      	b.n	8003af6 <UART_SetConfig+0xe2>
 8003af2:	2310      	movs	r3, #16
 8003af4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afe:	d15b      	bne.n	8003bb8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003b00:	7ffb      	ldrb	r3, [r7, #31]
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d827      	bhi.n	8003b56 <UART_SetConfig+0x142>
 8003b06:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <UART_SetConfig+0xf8>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b31 	.word	0x08003b31
 8003b10:	08003b39 	.word	0x08003b39
 8003b14:	08003b41 	.word	0x08003b41
 8003b18:	08003b57 	.word	0x08003b57
 8003b1c:	08003b47 	.word	0x08003b47
 8003b20:	08003b57 	.word	0x08003b57
 8003b24:	08003b57 	.word	0x08003b57
 8003b28:	08003b57 	.word	0x08003b57
 8003b2c:	08003b4f 	.word	0x08003b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b30:	f7ff fa32 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 8003b34:	61b8      	str	r0, [r7, #24]
        break;
 8003b36:	e013      	b.n	8003b60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b38:	f7ff fa50 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8003b3c:	61b8      	str	r0, [r7, #24]
        break;
 8003b3e:	e00f      	b.n	8003b60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b40:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <UART_SetConfig+0x268>)
 8003b42:	61bb      	str	r3, [r7, #24]
        break;
 8003b44:	e00c      	b.n	8003b60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b46:	f7ff f9b1 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8003b4a:	61b8      	str	r0, [r7, #24]
        break;
 8003b4c:	e008      	b.n	8003b60 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b52:	61bb      	str	r3, [r7, #24]
        break;
 8003b54:	e004      	b.n	8003b60 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d074      	beq.n	8003c50 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	005a      	lsls	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	085b      	lsrs	r3, r3, #1
 8003b70:	441a      	add	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b0f      	cmp	r3, #15
 8003b82:	d916      	bls.n	8003bb2 <UART_SetConfig+0x19e>
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8a:	d212      	bcs.n	8003bb2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	f023 030f 	bic.w	r3, r3, #15
 8003b94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	89fb      	ldrh	r3, [r7, #14]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	89fa      	ldrh	r2, [r7, #14]
 8003bae:	60da      	str	r2, [r3, #12]
 8003bb0:	e04e      	b.n	8003c50 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	77bb      	strb	r3, [r7, #30]
 8003bb6:	e04b      	b.n	8003c50 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bb8:	7ffb      	ldrb	r3, [r7, #31]
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d827      	bhi.n	8003c0e <UART_SetConfig+0x1fa>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0x1b0>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003bf1 	.word	0x08003bf1
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	08003c0f 	.word	0x08003c0f
 8003bd4:	08003bff 	.word	0x08003bff
 8003bd8:	08003c0f 	.word	0x08003c0f
 8003bdc:	08003c0f 	.word	0x08003c0f
 8003be0:	08003c0f 	.word	0x08003c0f
 8003be4:	08003c07 	.word	0x08003c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be8:	f7ff f9d6 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 8003bec:	61b8      	str	r0, [r7, #24]
        break;
 8003bee:	e013      	b.n	8003c18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf0:	f7ff f9f4 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8003bf4:	61b8      	str	r0, [r7, #24]
        break;
 8003bf6:	e00f      	b.n	8003c18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf8:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <UART_SetConfig+0x268>)
 8003bfa:	61bb      	str	r3, [r7, #24]
        break;
 8003bfc:	e00c      	b.n	8003c18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfe:	f7ff f955 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8003c02:	61b8      	str	r0, [r7, #24]
        break;
 8003c04:	e008      	b.n	8003c18 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0a:	61bb      	str	r3, [r7, #24]
        break;
 8003c0c:	e004      	b.n	8003c18 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	77bb      	strb	r3, [r7, #30]
        break;
 8003c16:	bf00      	nop
    }

    if (pclk != 0U)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	085a      	lsrs	r2, r3, #1
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	441a      	add	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b0f      	cmp	r3, #15
 8003c38:	d908      	bls.n	8003c4c <UART_SetConfig+0x238>
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d204      	bcs.n	8003c4c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	e001      	b.n	8003c50 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	efff69f3 	.word	0xefff69f3
 8003c6c:	40013800 	.word	0x40013800
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40004400 	.word	0x40004400
 8003c78:	40004800 	.word	0x40004800
 8003c7c:	007a1200 	.word	0x007a1200

08003c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01a      	beq.n	8003d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d7e:	d10a      	bne.n	8003d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dd4:	f7fd faea 	bl	80013ac <HAL_GetTick>
 8003dd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d10e      	bne.n	8003e06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f82d 	bl	8003e56 <UART_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e023      	b.n	8003e4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d10e      	bne.n	8003e32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f817 	bl	8003e56 <UART_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e00d      	b.n	8003e4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b09c      	sub	sp, #112	; 0x70
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e66:	e0a5      	b.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	f000 80a1 	beq.w	8003fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e72:	f7fd fa9b 	bl	80013ac <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d302      	bcc.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d13e      	bne.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003eac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e6      	bne.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003eda:	64ba      	str	r2, [r7, #72]	; 0x48
 8003edc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e5      	bne.n	8003eba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e067      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d04f      	beq.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f22:	d147      	bne.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e6      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3308      	adds	r3, #8
 8003f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f80:	623a      	str	r2, [r7, #32]
 8003f82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	69f9      	ldr	r1, [r7, #28]
 8003f86:	6a3a      	ldr	r2, [r7, #32]
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e5      	bne.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e010      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	f43f af4a 	beq.w	8003e68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3770      	adds	r7, #112	; 0x70
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <ssd1309_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1309_USE_SPI)

void ssd1309_Reset(void) {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1309_CS_Port, SSD1309_CS_Pin, GPIO_PIN_SET);
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fea:	480b      	ldr	r0, [pc, #44]	; (8004018 <ssd1309_Reset+0x38>)
 8003fec:	f7fd fc66 	bl	80018bc <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1309_Reset_Port, SSD1309_Reset_Pin, GPIO_PIN_RESET);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ff6:	4808      	ldr	r0, [pc, #32]	; (8004018 <ssd1309_Reset+0x38>)
 8003ff8:	f7fd fc60 	bl	80018bc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003ffc:	200a      	movs	r0, #10
 8003ffe:	f7fd f9e1 	bl	80013c4 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1309_Reset_Port, SSD1309_Reset_Pin, GPIO_PIN_SET);
 8004002:	2201      	movs	r2, #1
 8004004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004008:	4803      	ldr	r0, [pc, #12]	; (8004018 <ssd1309_Reset+0x38>)
 800400a:	f7fd fc57 	bl	80018bc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800400e:	200a      	movs	r0, #10
 8004010:	f7fd f9d8 	bl	80013c4 <HAL_Delay>
}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}
 8004018:	48000400 	.word	0x48000400

0800401c <ssd1309_WriteCommand>:

// Send a byte to the command register
void ssd1309_WriteCommand(uint8_t byte) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1309_CS_Port, SSD1309_CS_Pin, GPIO_PIN_RESET); // select OLED
 8004026:	2200      	movs	r2, #0
 8004028:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800402c:	480b      	ldr	r0, [pc, #44]	; (800405c <ssd1309_WriteCommand+0x40>)
 800402e:	f7fd fc45 	bl	80018bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1309_DC_Port, SSD1309_DC_Pin, GPIO_PIN_RESET); // command
 8004032:	2200      	movs	r2, #0
 8004034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004038:	4808      	ldr	r0, [pc, #32]	; (800405c <ssd1309_WriteCommand+0x40>)
 800403a:	f7fd fc3f 	bl	80018bc <HAL_GPIO_WritePin>
    SPI_WriteByte(byte);
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	4618      	mov	r0, r3
 8004042:	f7fc fe23 	bl	8000c8c <SPI_WriteByte>
    HAL_GPIO_WritePin(SSD1309_CS_Port, SSD1309_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8004046:	2201      	movs	r2, #1
 8004048:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800404c:	4803      	ldr	r0, [pc, #12]	; (800405c <ssd1309_WriteCommand+0x40>)
 800404e:	f7fd fc35 	bl	80018bc <HAL_GPIO_WritePin>
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	48000400 	.word	0x48000400

08004060 <ssd1309_WriteData>:

// Send data
void ssd1309_WriteData(uint8_t* buffer, size_t buff_size) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1309_CS_Port, SSD1309_CS_Pin, GPIO_PIN_RESET); // select OLED
 800406a:	2200      	movs	r2, #0
 800406c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004070:	480c      	ldr	r0, [pc, #48]	; (80040a4 <ssd1309_WriteData+0x44>)
 8004072:	f7fd fc23 	bl	80018bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1309_DC_Port, SSD1309_DC_Pin, GPIO_PIN_SET); // data
 8004076:	2201      	movs	r2, #1
 8004078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800407c:	4809      	ldr	r0, [pc, #36]	; (80040a4 <ssd1309_WriteData+0x44>)
 800407e:	f7fd fc1d 	bl	80018bc <HAL_GPIO_WritePin>
    SPI_WriteSomeByte( buffer, buff_size);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7fc fe11 	bl	8000cb0 <SPI_WriteSomeByte>
    HAL_GPIO_WritePin(SSD1309_CS_Port, SSD1309_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800408e:	2201      	movs	r2, #1
 8004090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004094:	4803      	ldr	r0, [pc, #12]	; (80040a4 <ssd1309_WriteData+0x44>)
 8004096:	f7fd fc11 	bl	80018bc <HAL_GPIO_WritePin>
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	48000400 	.word	0x48000400

080040a8 <ssd1309_Init>:
    return ret;
}


// Initialize the oled screen
void ssd1309_Init(void) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1309_Reset();
 80040ac:	f7ff ff98 	bl	8003fe0 <ssd1309_Reset>

    // Wait for the screen to boot
    delay_ms(100);
 80040b0:	2064      	movs	r0, #100	; 0x64
 80040b2:	f7fc fe11 	bl	8000cd8 <delay_ms>

    // Init OLED
    ssd1309_SetDisplayOn(0); //display off
 80040b6:	2000      	movs	r0, #0
 80040b8:	f000 fca0 	bl	80049fc <ssd1309_SetDisplayOn>

    ssd1309_WriteCommand(0x20); //Set Memory Addressing Mode
 80040bc:	2020      	movs	r0, #32
 80040be:	f7ff ffad 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80040c2:	2000      	movs	r0, #0
 80040c4:	f7ff ffaa 	bl	800401c <ssd1309_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1309_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80040c8:	20b0      	movs	r0, #176	; 0xb0
 80040ca:	f7ff ffa7 	bl	800401c <ssd1309_WriteCommand>

#ifdef SSD1309_MIRROR_VERT
    ssd1309_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1309_WriteCommand(0xC8); //Set COM Output Scan Direction
 80040ce:	20c8      	movs	r0, #200	; 0xc8
 80040d0:	f7ff ffa4 	bl	800401c <ssd1309_WriteCommand>
#endif

    ssd1309_WriteCommand(0x00); //---set low column address
 80040d4:	2000      	movs	r0, #0
 80040d6:	f7ff ffa1 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_WriteCommand(0x10); //---set high column address
 80040da:	2010      	movs	r0, #16
 80040dc:	f7ff ff9e 	bl	800401c <ssd1309_WriteCommand>

    ssd1309_WriteCommand(0x40); //--set start line address - CHECK
 80040e0:	2040      	movs	r0, #64	; 0x40
 80040e2:	f7ff ff9b 	bl	800401c <ssd1309_WriteCommand>

    ssd1309_SetContrast(0xFF);
 80040e6:	20ff      	movs	r0, #255	; 0xff
 80040e8:	f000 fc74 	bl	80049d4 <ssd1309_SetContrast>

#ifdef SSD1309_MIRROR_HORIZ
    ssd1309_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1309_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80040ec:	20a1      	movs	r0, #161	; 0xa1
 80040ee:	f7ff ff95 	bl	800401c <ssd1309_WriteCommand>
#endif

#ifdef SSD1309_INVERSE_COLOR
    ssd1309_WriteCommand(0xA7); //--set inverse color
#else
    ssd1309_WriteCommand(0xA6); //--set normal color
 80040f2:	20a6      	movs	r0, #166	; 0xa6
 80040f4:	f7ff ff92 	bl	800401c <ssd1309_WriteCommand>
// Set multiplex ratio.
#if (SSD1309_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1309_WriteCommand(0xFF);
#else
    ssd1309_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80040f8:	20a8      	movs	r0, #168	; 0xa8
 80040fa:	f7ff ff8f 	bl	800401c <ssd1309_WriteCommand>
#endif

#if (SSD1309_HEIGHT == 32)
    ssd1309_WriteCommand(0x1F); //
#elif (SSD1309_HEIGHT == 64)
    ssd1309_WriteCommand(0x3F); //
 80040fe:	203f      	movs	r0, #63	; 0x3f
 8004100:	f7ff ff8c 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1309_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004104:	20a4      	movs	r0, #164	; 0xa4
 8004106:	f7ff ff89 	bl	800401c <ssd1309_WriteCommand>

    ssd1309_WriteCommand(0xD3); //-set display offset - CHECK
 800410a:	20d3      	movs	r0, #211	; 0xd3
 800410c:	f7ff ff86 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_WriteCommand(0x00); //-not offset
 8004110:	2000      	movs	r0, #0
 8004112:	f7ff ff83 	bl	800401c <ssd1309_WriteCommand>

    ssd1309_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004116:	20d5      	movs	r0, #213	; 0xd5
 8004118:	f7ff ff80 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_WriteCommand(0xF0); //--set divide ratio
 800411c:	20f0      	movs	r0, #240	; 0xf0
 800411e:	f7ff ff7d 	bl	800401c <ssd1309_WriteCommand>

    ssd1309_WriteCommand(0xD9); //--set pre-charge period
 8004122:	20d9      	movs	r0, #217	; 0xd9
 8004124:	f7ff ff7a 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_WriteCommand(0x22); //
 8004128:	2022      	movs	r0, #34	; 0x22
 800412a:	f7ff ff77 	bl	800401c <ssd1309_WriteCommand>

    ssd1309_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800412e:	20da      	movs	r0, #218	; 0xda
 8004130:	f7ff ff74 	bl	800401c <ssd1309_WriteCommand>
#if (SSD1309_HEIGHT == 32)
    ssd1309_WriteCommand(0x02);
#elif (SSD1309_HEIGHT == 64)
    ssd1309_WriteCommand(0x12);
 8004134:	2012      	movs	r0, #18
 8004136:	f7ff ff71 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1309_WriteCommand(0xDB); //--set vcomh
 800413a:	20db      	movs	r0, #219	; 0xdb
 800413c:	f7ff ff6e 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_WriteCommand(0x20); //0x20,0.77xVcc
 8004140:	2020      	movs	r0, #32
 8004142:	f7ff ff6b 	bl	800401c <ssd1309_WriteCommand>

    ssd1309_WriteCommand(0x8D); //--set DC-DC enable
 8004146:	208d      	movs	r0, #141	; 0x8d
 8004148:	f7ff ff68 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_WriteCommand(0x14); //
 800414c:	2014      	movs	r0, #20
 800414e:	f7ff ff65 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_SetDisplayOn(1); //--turn on SSD1306 panel
 8004152:	2001      	movs	r0, #1
 8004154:	f000 fc52 	bl	80049fc <ssd1309_SetDisplayOn>

    // Clear screen
    ssd1309_Fill(Black);
 8004158:	2000      	movs	r0, #0
 800415a:	f000 f80f 	bl	800417c <ssd1309_Fill>

    // Flush buffer to screen
    ssd1309_UpdateScreen();
 800415e:	f000 f831 	bl	80041c4 <ssd1309_UpdateScreen>

    // Set default values for screen object
    SSD1309.CurrentX = 0;
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <ssd1309_Init+0xd0>)
 8004164:	2200      	movs	r2, #0
 8004166:	801a      	strh	r2, [r3, #0]
    SSD1309.CurrentY = 0;
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <ssd1309_Init+0xd0>)
 800416a:	2200      	movs	r2, #0
 800416c:	805a      	strh	r2, [r3, #2]

    SSD1309.Initialized = 1;
 800416e:	4b02      	ldr	r3, [pc, #8]	; (8004178 <ssd1309_Init+0xd0>)
 8004170:	2201      	movs	r2, #1
 8004172:	711a      	strb	r2, [r3, #4]
}
 8004174:	bf00      	nop
 8004176:	bd80      	pop	{r7, pc}
 8004178:	200005e8 	.word	0x200005e8

0800417c <ssd1309_Fill>:

// Fill the whole screen with the given color
void ssd1309_Fill(SSD1309_COLOR color) {
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1309_Buffer); i++) {
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	e00d      	b.n	80041a8 <ssd1309_Fill+0x2c>
        SSD1309_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <ssd1309_Fill+0x1a>
 8004192:	2100      	movs	r1, #0
 8004194:	e000      	b.n	8004198 <ssd1309_Fill+0x1c>
 8004196:	21ff      	movs	r1, #255	; 0xff
 8004198:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <ssd1309_Fill+0x44>)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	460a      	mov	r2, r1
 80041a0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1309_Buffer); i++) {
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3301      	adds	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d3ed      	bcc.n	800418c <ssd1309_Fill+0x10>
    }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	200001e8 	.word	0x200001e8

080041c4 <ssd1309_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1309_UpdateScreen(void) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1309_HEIGHT/8; i++) {
 80041ca:	2300      	movs	r3, #0
 80041cc:	71fb      	strb	r3, [r7, #7]
 80041ce:	e016      	b.n	80041fe <ssd1309_UpdateScreen+0x3a>
        ssd1309_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	3b50      	subs	r3, #80	; 0x50
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff ff20 	bl	800401c <ssd1309_WriteCommand>
        ssd1309_WriteCommand(0x00 + SSD1309_X_OFFSET_LOWER);
 80041dc:	2000      	movs	r0, #0
 80041de:	f7ff ff1d 	bl	800401c <ssd1309_WriteCommand>
        ssd1309_WriteCommand(0x10 + SSD1309_X_OFFSET_UPPER);
 80041e2:	2010      	movs	r0, #16
 80041e4:	f7ff ff1a 	bl	800401c <ssd1309_WriteCommand>
        ssd1309_WriteData(&SSD1309_Buffer[SSD1309_WIDTH*i],SSD1309_WIDTH);
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	01db      	lsls	r3, r3, #7
 80041ec:	4a08      	ldr	r2, [pc, #32]	; (8004210 <ssd1309_UpdateScreen+0x4c>)
 80041ee:	4413      	add	r3, r2
 80041f0:	2180      	movs	r1, #128	; 0x80
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff ff34 	bl	8004060 <ssd1309_WriteData>
    for(uint8_t i = 0; i < SSD1309_HEIGHT/8; i++) {
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	3301      	adds	r3, #1
 80041fc:	71fb      	strb	r3, [r7, #7]
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	2b07      	cmp	r3, #7
 8004202:	d9e5      	bls.n	80041d0 <ssd1309_UpdateScreen+0xc>
    }
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	200001e8 	.word	0x200001e8

08004214 <ssd1309_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1309_DrawPixel(uint8_t x, uint8_t y, SSD1309_COLOR color) {
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
 800421e:	460b      	mov	r3, r1
 8004220:	71bb      	strb	r3, [r7, #6]
 8004222:	4613      	mov	r3, r2
 8004224:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1309_WIDTH || y >= SSD1309_HEIGHT) {
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	2b00      	cmp	r3, #0
 800422c:	db3d      	blt.n	80042aa <ssd1309_DrawPixel+0x96>
 800422e:	79bb      	ldrb	r3, [r7, #6]
 8004230:	2b3f      	cmp	r3, #63	; 0x3f
 8004232:	d83a      	bhi.n	80042aa <ssd1309_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8004234:	797b      	ldrb	r3, [r7, #5]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d11a      	bne.n	8004270 <ssd1309_DrawPixel+0x5c>
        SSD1309_Buffer[x + (y / 8) * SSD1309_WIDTH] |= 1 << (y % 8);
 800423a:	79fa      	ldrb	r2, [r7, #7]
 800423c:	79bb      	ldrb	r3, [r7, #6]
 800423e:	08db      	lsrs	r3, r3, #3
 8004240:	b2d8      	uxtb	r0, r3
 8004242:	4603      	mov	r3, r0
 8004244:	01db      	lsls	r3, r3, #7
 8004246:	4413      	add	r3, r2
 8004248:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <ssd1309_DrawPixel+0xa4>)
 800424a:	5cd3      	ldrb	r3, [r2, r3]
 800424c:	b25a      	sxtb	r2, r3
 800424e:	79bb      	ldrb	r3, [r7, #6]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	2101      	movs	r1, #1
 8004256:	fa01 f303 	lsl.w	r3, r1, r3
 800425a:	b25b      	sxtb	r3, r3
 800425c:	4313      	orrs	r3, r2
 800425e:	b259      	sxtb	r1, r3
 8004260:	79fa      	ldrb	r2, [r7, #7]
 8004262:	4603      	mov	r3, r0
 8004264:	01db      	lsls	r3, r3, #7
 8004266:	4413      	add	r3, r2
 8004268:	b2c9      	uxtb	r1, r1
 800426a:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <ssd1309_DrawPixel+0xa4>)
 800426c:	54d1      	strb	r1, [r2, r3]
 800426e:	e01d      	b.n	80042ac <ssd1309_DrawPixel+0x98>
    } else {
        SSD1309_Buffer[x + (y / 8) * SSD1309_WIDTH] &= ~(1 << (y % 8));
 8004270:	79fa      	ldrb	r2, [r7, #7]
 8004272:	79bb      	ldrb	r3, [r7, #6]
 8004274:	08db      	lsrs	r3, r3, #3
 8004276:	b2d8      	uxtb	r0, r3
 8004278:	4603      	mov	r3, r0
 800427a:	01db      	lsls	r3, r3, #7
 800427c:	4413      	add	r3, r2
 800427e:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <ssd1309_DrawPixel+0xa4>)
 8004280:	5cd3      	ldrb	r3, [r2, r3]
 8004282:	b25a      	sxtb	r2, r3
 8004284:	79bb      	ldrb	r3, [r7, #6]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f303 	lsl.w	r3, r1, r3
 8004290:	b25b      	sxtb	r3, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	b25b      	sxtb	r3, r3
 8004296:	4013      	ands	r3, r2
 8004298:	b259      	sxtb	r1, r3
 800429a:	79fa      	ldrb	r2, [r7, #7]
 800429c:	4603      	mov	r3, r0
 800429e:	01db      	lsls	r3, r3, #7
 80042a0:	4413      	add	r3, r2
 80042a2:	b2c9      	uxtb	r1, r1
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <ssd1309_DrawPixel+0xa4>)
 80042a6:	54d1      	strb	r1, [r2, r3]
 80042a8:	e000      	b.n	80042ac <ssd1309_DrawPixel+0x98>
        return;
 80042aa:	bf00      	nop
    }
}
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	200001e8 	.word	0x200001e8

080042bc <ssd1309_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1309_WriteChar(char ch, FontDef Font, SSD1309_COLOR color) {
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b089      	sub	sp, #36	; 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4604      	mov	r4, r0
 80042c4:	1d38      	adds	r0, r7, #4
 80042c6:	e880 0006 	stmia.w	r0, {r1, r2}
 80042ca:	461a      	mov	r2, r3
 80042cc:	4623      	mov	r3, r4
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	4613      	mov	r3, r2
 80042d2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b1f      	cmp	r3, #31
 80042d8:	d902      	bls.n	80042e0 <ssd1309_WriteChar+0x24>
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b7e      	cmp	r3, #126	; 0x7e
 80042de:	d901      	bls.n	80042e4 <ssd1309_WriteChar+0x28>
        return 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e06d      	b.n	80043c0 <ssd1309_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1309_WIDTH < (SSD1309.CurrentX + Font.FontWidth) ||
 80042e4:	4b38      	ldr	r3, [pc, #224]	; (80043c8 <ssd1309_WriteChar+0x10c>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	793b      	ldrb	r3, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	2b80      	cmp	r3, #128	; 0x80
 80042f0:	dc06      	bgt.n	8004300 <ssd1309_WriteChar+0x44>
        SSD1309_HEIGHT < (SSD1309.CurrentY + Font.FontHeight))
 80042f2:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <ssd1309_WriteChar+0x10c>)
 80042f4:	885b      	ldrh	r3, [r3, #2]
 80042f6:	461a      	mov	r2, r3
 80042f8:	797b      	ldrb	r3, [r7, #5]
 80042fa:	4413      	add	r3, r2
    if (SSD1309_WIDTH < (SSD1309.CurrentX + Font.FontWidth) ||
 80042fc:	2b40      	cmp	r3, #64	; 0x40
 80042fe:	dd01      	ble.n	8004304 <ssd1309_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004300:	2300      	movs	r3, #0
 8004302:	e05d      	b.n	80043c0 <ssd1309_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	e04c      	b.n	80043a4 <ssd1309_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	3b20      	subs	r3, #32
 8004310:	7979      	ldrb	r1, [r7, #5]
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4619      	mov	r1, r3
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	440b      	add	r3, r1
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004324:	2300      	movs	r3, #0
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e034      	b.n	8004394 <ssd1309_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d012      	beq.n	8004360 <ssd1309_WriteChar+0xa4>
                ssd1309_DrawPixel(SSD1309.CurrentX + j, (SSD1309.CurrentY + i), (SSD1309_COLOR) color);
 800433a:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <ssd1309_WriteChar+0x10c>)
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b2da      	uxtb	r2, r3
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	4413      	add	r3, r2
 8004346:	b2d8      	uxtb	r0, r3
 8004348:	4b1f      	ldr	r3, [pc, #124]	; (80043c8 <ssd1309_WriteChar+0x10c>)
 800434a:	885b      	ldrh	r3, [r3, #2]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	4413      	add	r3, r2
 8004354:	b2db      	uxtb	r3, r3
 8004356:	7bba      	ldrb	r2, [r7, #14]
 8004358:	4619      	mov	r1, r3
 800435a:	f7ff ff5b 	bl	8004214 <ssd1309_DrawPixel>
 800435e:	e016      	b.n	800438e <ssd1309_WriteChar+0xd2>
            } else {
                ssd1309_DrawPixel(SSD1309.CurrentX + j, (SSD1309.CurrentY + i), (SSD1309_COLOR)!color);
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <ssd1309_WriteChar+0x10c>)
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	4413      	add	r3, r2
 800436c:	b2d8      	uxtb	r0, r3
 800436e:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <ssd1309_WriteChar+0x10c>)
 8004370:	885b      	ldrh	r3, [r3, #2]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	4413      	add	r3, r2
 800437a:	b2d9      	uxtb	r1, r3
 800437c:	7bbb      	ldrb	r3, [r7, #14]
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf0c      	ite	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	2300      	movne	r3, #0
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	f7ff ff43 	bl	8004214 <ssd1309_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	3301      	adds	r3, #1
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	793b      	ldrb	r3, [r7, #4]
 8004396:	461a      	mov	r2, r3
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	4293      	cmp	r3, r2
 800439c:	d3c5      	bcc.n	800432a <ssd1309_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	3301      	adds	r3, #1
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	797b      	ldrb	r3, [r7, #5]
 80043a6:	461a      	mov	r2, r3
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d3ad      	bcc.n	800430a <ssd1309_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1309.CurrentX += Font.FontWidth;
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <ssd1309_WriteChar+0x10c>)
 80043b0:	881a      	ldrh	r2, [r3, #0]
 80043b2:	793b      	ldrb	r3, [r7, #4]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <ssd1309_WriteChar+0x10c>)
 80043bc:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80043be:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3724      	adds	r7, #36	; 0x24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd90      	pop	{r4, r7, pc}
 80043c8:	200005e8 	.word	0x200005e8

080043cc <ssd1309_WriteString>:


// Write full string to screenbuffer
char ssd1309_WriteString(char* str, FontDef Font, SSD1309_COLOR color) {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	1d38      	adds	r0, r7, #4
 80043d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80043da:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80043dc:	e012      	b.n	8004404 <ssd1309_WriteString+0x38>
        if (ssd1309_WriteChar(*str, Font, color) != *str) {
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	7818      	ldrb	r0, [r3, #0]
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	1d3a      	adds	r2, r7, #4
 80043e6:	ca06      	ldmia	r2, {r1, r2}
 80043e8:	f7ff ff68 	bl	80042bc <ssd1309_WriteChar>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d002      	beq.n	80043fe <ssd1309_WriteString+0x32>
            // Char could not be written
            return *str;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	e008      	b.n	8004410 <ssd1309_WriteString+0x44>
        }

        // Next char
        str++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3301      	adds	r3, #1
 8004402:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e8      	bne.n	80043de <ssd1309_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	781b      	ldrb	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <ssd1309_SetCursor>:

// Position the cursor
void ssd1309_SetCursor(uint8_t x, uint8_t y) {
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	460a      	mov	r2, r1
 8004422:	71fb      	strb	r3, [r7, #7]
 8004424:	4613      	mov	r3, r2
 8004426:	71bb      	strb	r3, [r7, #6]
    SSD1309.CurrentX = x;
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	b29a      	uxth	r2, r3
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <ssd1309_SetCursor+0x2c>)
 800442e:	801a      	strh	r2, [r3, #0]
    SSD1309.CurrentY = y;
 8004430:	79bb      	ldrb	r3, [r7, #6]
 8004432:	b29a      	uxth	r2, r3
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <ssd1309_SetCursor+0x2c>)
 8004436:	805a      	strh	r2, [r3, #2]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	200005e8 	.word	0x200005e8

08004448 <ssd1309_Line>:


// Draw line by Bresenhem's algorithm
void ssd1309_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1309_COLOR color) {
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
 800444e:	4604      	mov	r4, r0
 8004450:	4608      	mov	r0, r1
 8004452:	4611      	mov	r1, r2
 8004454:	461a      	mov	r2, r3
 8004456:	4623      	mov	r3, r4
 8004458:	71fb      	strb	r3, [r7, #7]
 800445a:	4603      	mov	r3, r0
 800445c:	71bb      	strb	r3, [r7, #6]
 800445e:	460b      	mov	r3, r1
 8004460:	717b      	strb	r3, [r7, #5]
 8004462:	4613      	mov	r3, r2
 8004464:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8004466:	797a      	ldrb	r2, [r7, #5]
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	bfb8      	it	lt
 8004470:	425b      	neglt	r3, r3
 8004472:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8004474:	793a      	ldrb	r2, [r7, #4]
 8004476:	79bb      	ldrb	r3, [r7, #6]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	bfb8      	it	lt
 800447e:	425b      	neglt	r3, r3
 8004480:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8004482:	79fa      	ldrb	r2, [r7, #7]
 8004484:	797b      	ldrb	r3, [r7, #5]
 8004486:	429a      	cmp	r2, r3
 8004488:	d201      	bcs.n	800448e <ssd1309_Line+0x46>
 800448a:	2301      	movs	r3, #1
 800448c:	e001      	b.n	8004492 <ssd1309_Line+0x4a>
 800448e:	f04f 33ff 	mov.w	r3, #4294967295
 8004492:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8004494:	79ba      	ldrb	r2, [r7, #6]
 8004496:	793b      	ldrb	r3, [r7, #4]
 8004498:	429a      	cmp	r2, r3
 800449a:	d201      	bcs.n	80044a0 <ssd1309_Line+0x58>
 800449c:	2301      	movs	r3, #1
 800449e:	e001      	b.n	80044a4 <ssd1309_Line+0x5c>
 80044a0:	f04f 33ff 	mov.w	r3, #4294967295
 80044a4:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1309_DrawPixel(x2, y2, color);
 80044ae:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80044b2:	7939      	ldrb	r1, [r7, #4]
 80044b4:	797b      	ldrb	r3, [r7, #5]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff feac 	bl	8004214 <ssd1309_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80044bc:	e024      	b.n	8004508 <ssd1309_Line+0xc0>
    {
    ssd1309_DrawPixel(x1, y1, color);
 80044be:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80044c2:	79b9      	ldrb	r1, [r7, #6]
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fea4 	bl	8004214 <ssd1309_DrawPixel>
    error2 = error * 2;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	425b      	negs	r3, r3
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	dd08      	ble.n	80044ee <ssd1309_Line+0xa6>
    {
      error -= deltaY;
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	4413      	add	r3, r2
 80044ec:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	da08      	bge.n	8004508 <ssd1309_Line+0xc0>
    {
      error += deltaX;
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	4413      	add	r3, r2
 80044fc:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	79bb      	ldrb	r3, [r7, #6]
 8004504:	4413      	add	r3, r2
 8004506:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8004508:	79fa      	ldrb	r2, [r7, #7]
 800450a:	797b      	ldrb	r3, [r7, #5]
 800450c:	429a      	cmp	r2, r3
 800450e:	d1d6      	bne.n	80044be <ssd1309_Line+0x76>
 8004510:	79ba      	ldrb	r2, [r7, #6]
 8004512:	793b      	ldrb	r3, [r7, #4]
 8004514:	429a      	cmp	r2, r3
 8004516:	d1d2      	bne.n	80044be <ssd1309_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8004518:	bf00      	nop
}
 800451a:	3724      	adds	r7, #36	; 0x24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}

08004520 <ssd1309_Polyline>:

//Draw polyline
void ssd1309_Polyline(const SSD1309_VERTEX *par_vertex, uint16_t par_size, SSD1309_COLOR color) {
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b087      	sub	sp, #28
 8004524:	af02      	add	r7, sp, #8
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	807b      	strh	r3, [r7, #2]
 800452c:	4613      	mov	r3, r2
 800452e:	707b      	strb	r3, [r7, #1]
  uint16_t i;
  if(par_vertex != 0){
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d02a      	beq.n	800458c <ssd1309_Polyline+0x6c>
    for(i = 1; i < par_size; i++){
 8004536:	2301      	movs	r3, #1
 8004538:	81fb      	strh	r3, [r7, #14]
 800453a:	e022      	b.n	8004582 <ssd1309_Polyline+0x62>
      ssd1309_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 800453c:	89fb      	ldrh	r3, [r7, #14]
 800453e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004542:	3b01      	subs	r3, #1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	7818      	ldrb	r0, [r3, #0]
 800454c:	89fb      	ldrh	r3, [r7, #14]
 800454e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004552:	3b01      	subs	r3, #1
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	7859      	ldrb	r1, [r3, #1]
 800455c:	89fb      	ldrh	r3, [r7, #14]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	781c      	ldrb	r4, [r3, #0]
 8004566:	89fb      	ldrh	r3, [r7, #14]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	785a      	ldrb	r2, [r3, #1]
 8004570:	787b      	ldrb	r3, [r7, #1]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	4622      	mov	r2, r4
 8004578:	f7ff ff66 	bl	8004448 <ssd1309_Line>
    for(i = 1; i < par_size; i++){
 800457c:	89fb      	ldrh	r3, [r7, #14]
 800457e:	3301      	adds	r3, #1
 8004580:	81fb      	strh	r3, [r7, #14]
 8004582:	89fa      	ldrh	r2, [r7, #14]
 8004584:	887b      	ldrh	r3, [r7, #2]
 8004586:	429a      	cmp	r2, r3
 8004588:	d3d8      	bcc.n	800453c <ssd1309_Polyline+0x1c>
  }
  else
  {
    /*nothing to do*/
  }
  return;
 800458a:	bf00      	nop
 800458c:	bf00      	nop
}
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	bd90      	pop	{r4, r7, pc}
 8004594:	0000      	movs	r0, r0
	...

08004598 <ssd1309_DegToRad>:

/*Convert Degrees to Radians*/
static float ssd1309_DegToRad(float par_deg) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fb ffc8 	bl	8000538 <__aeabi_f2d>
 80045a8:	a30e      	add	r3, pc, #56	; (adr r3, 80045e4 <ssd1309_DegToRad+0x4c>)
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f7fc f81b 	bl	80005e8 <__aeabi_dmul>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <ssd1309_DegToRad+0x48>)
 80045c0:	f7fc f93c 	bl	800083c <__aeabi_ddiv>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	f7fc face 	bl	8000b6c <__aeabi_d2f>
 80045d0:	4603      	mov	r3, r0
 80045d2:	ee07 3a90 	vmov	s15, r3
}
 80045d6:	eeb0 0a67 	vmov.f32	s0, s15
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40668000 	.word	0x40668000
 80045e4:	51eb851f 	.word	0x51eb851f
 80045e8:	40091eb8 	.word	0x40091eb8

080045ec <ssd1309_NormalizeTo0_360>:


/*Normalize degree to [0;360]*/
static uint16_t ssd1309_NormalizeTo0_360(uint16_t par_deg) {
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	80fb      	strh	r3, [r7, #6]
  uint16_t loc_angle;
  if(par_deg <= 360)
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80045fc:	d802      	bhi.n	8004604 <ssd1309_NormalizeTo0_360+0x18>
  {
    loc_angle = par_deg;
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	81fb      	strh	r3, [r7, #14]
 8004602:	e013      	b.n	800462c <ssd1309_NormalizeTo0_360+0x40>
  }
  else
  {
    loc_angle = par_deg % 360;
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	08da      	lsrs	r2, r3, #3
 8004608:	490c      	ldr	r1, [pc, #48]	; (800463c <ssd1309_NormalizeTo0_360+0x50>)
 800460a:	fba1 1202 	umull	r1, r2, r1, r2
 800460e:	0892      	lsrs	r2, r2, #2
 8004610:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004614:	fb01 f202 	mul.w	r2, r1, r2
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	81fb      	strh	r3, [r7, #14]
    loc_angle = ((par_deg != 0)?par_deg:360);
 800461c:	88fb      	ldrh	r3, [r7, #6]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <ssd1309_NormalizeTo0_360+0x3a>
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	e001      	b.n	800462a <ssd1309_NormalizeTo0_360+0x3e>
 8004626:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800462a:	81fb      	strh	r3, [r7, #14]
  }
  return loc_angle;
 800462c:	89fb      	ldrh	r3, [r7, #14]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	16c16c17 	.word	0x16c16c17

08004640 <ssd1309_DrawArc>:

/*DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1309_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1309_COLOR color) {
 8004640:	b5b0      	push	{r4, r5, r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af02      	add	r7, sp, #8
 8004646:	4604      	mov	r4, r0
 8004648:	4608      	mov	r0, r1
 800464a:	4611      	mov	r1, r2
 800464c:	461a      	mov	r2, r3
 800464e:	4623      	mov	r3, r4
 8004650:	71fb      	strb	r3, [r7, #7]
 8004652:	4603      	mov	r3, r0
 8004654:	71bb      	strb	r3, [r7, #6]
 8004656:	460b      	mov	r3, r1
 8004658:	717b      	strb	r3, [r7, #5]
 800465a:	4613      	mov	r3, r2
 800465c:	807b      	strh	r3, [r7, #2]
    #define CIRCLE_APPROXIMATION_SEGMENTS 36
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
    float rad;

    loc_sweep = ssd1309_NormalizeTo0_360(sweep);
 8004666:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ffbf 	bl	80045ec <ssd1309_NormalizeTo0_360>
 800466e:	4603      	mov	r3, r0
 8004670:	617b      	str	r3, [r7, #20]

    count = (ssd1309_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8004672:	887b      	ldrh	r3, [r7, #2]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ffb9 	bl	80045ec <ssd1309_NormalizeTo0_360>
 800467a:	4603      	mov	r3, r0
 800467c:	4a74      	ldr	r2, [pc, #464]	; (8004850 <ssd1309_DrawArc+0x210>)
 800467e:	fb82 1203 	smull	r1, r2, r2, r3
 8004682:	1092      	asrs	r2, r2, #2
 8004684:	17db      	asrs	r3, r3, #31
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	08db      	lsrs	r3, r3, #3
 8004696:	4a6f      	ldr	r2, [pc, #444]	; (8004854 <ssd1309_DrawArc+0x214>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	ee07 3a90 	vmov	s15, r3
 80046b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b8:	edc7 7a03 	vstr	s15, [r7, #12]
    while(count < approx_segments)
 80046bc:	e0be      	b.n	800483c <ssd1309_DrawArc+0x1fc>
    {
        rad = ssd1309_DegToRad(count*approx_degree);
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	ee07 3a90 	vmov	s15, r3
 80046c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80046cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d0:	eeb0 0a67 	vmov.f32	s0, s15
 80046d4:	f7ff ff60 	bl	8004598 <ssd1309_DegToRad>
 80046d8:	ed87 0a06 	vstr	s0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 80046dc:	69b8      	ldr	r0, [r7, #24]
 80046de:	f7fb ff2b 	bl	8000538 <__aeabi_f2d>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	ec43 2b10 	vmov	d0, r2, r3
 80046ea:	f001 f8c9 	bl	8005880 <sin>
 80046ee:	ec55 4b10 	vmov	r4, r5, d0
 80046f2:	797b      	ldrb	r3, [r7, #5]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fb ff0d 	bl	8000514 <__aeabi_i2d>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4620      	mov	r0, r4
 8004700:	4629      	mov	r1, r5
 8004702:	f7fb ff71 	bl	80005e8 <__aeabi_dmul>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	f7fc fa05 	bl	8000b1c <__aeabi_d2iz>
 8004712:	4603      	mov	r3, r0
 8004714:	b25b      	sxtb	r3, r3
 8004716:	b2da      	uxtb	r2, r3
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	4413      	add	r3, r2
 800471c:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);
 800471e:	69b8      	ldr	r0, [r7, #24]
 8004720:	f7fb ff0a 	bl	8000538 <__aeabi_f2d>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	ec43 2b10 	vmov	d0, r2, r3
 800472c:	f001 f854 	bl	80057d8 <cos>
 8004730:	ec55 4b10 	vmov	r4, r5, d0
 8004734:	797b      	ldrb	r3, [r7, #5]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fb feec 	bl	8000514 <__aeabi_i2d>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4620      	mov	r0, r4
 8004742:	4629      	mov	r1, r5
 8004744:	f7fb ff50 	bl	80005e8 <__aeabi_dmul>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	f7fc f9e4 	bl	8000b1c <__aeabi_d2iz>
 8004754:	4603      	mov	r3, r0
 8004756:	b25b      	sxtb	r3, r3
 8004758:	b2da      	uxtb	r2, r3
 800475a:	79bb      	ldrb	r3, [r7, #6]
 800475c:	4413      	add	r3, r2
 800475e:	72bb      	strb	r3, [r7, #10]
        count++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments)
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	d00f      	beq.n	800478e <ssd1309_DrawArc+0x14e>
        {
            rad = ssd1309_DegToRad(count*approx_degree);
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	ee07 3a90 	vmov	s15, r3
 8004774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004778:	edd7 7a03 	vldr	s15, [r7, #12]
 800477c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004780:	eeb0 0a67 	vmov.f32	s0, s15
 8004784:	f7ff ff08 	bl	8004598 <ssd1309_DegToRad>
 8004788:	ed87 0a06 	vstr	s0, [r7, #24]
 800478c:	e00a      	b.n	80047a4 <ssd1309_DrawArc+0x164>
        }
        else
        {
            rad = ssd1309_DegToRad(loc_sweep);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004798:	eeb0 0a67 	vmov.f32	s0, s15
 800479c:	f7ff fefc 	bl	8004598 <ssd1309_DegToRad>
 80047a0:	ed87 0a06 	vstr	s0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 80047a4:	69b8      	ldr	r0, [r7, #24]
 80047a6:	f7fb fec7 	bl	8000538 <__aeabi_f2d>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	ec43 2b10 	vmov	d0, r2, r3
 80047b2:	f001 f865 	bl	8005880 <sin>
 80047b6:	ec55 4b10 	vmov	r4, r5, d0
 80047ba:	797b      	ldrb	r3, [r7, #5]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fb fea9 	bl	8000514 <__aeabi_i2d>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4620      	mov	r0, r4
 80047c8:	4629      	mov	r1, r5
 80047ca:	f7fb ff0d 	bl	80005e8 <__aeabi_dmul>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4610      	mov	r0, r2
 80047d4:	4619      	mov	r1, r3
 80047d6:	f7fc f9a1 	bl	8000b1c <__aeabi_d2iz>
 80047da:	4603      	mov	r3, r0
 80047dc:	b25b      	sxtb	r3, r3
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	4413      	add	r3, r2
 80047e4:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);
 80047e6:	69b8      	ldr	r0, [r7, #24]
 80047e8:	f7fb fea6 	bl	8000538 <__aeabi_f2d>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	ec43 2b10 	vmov	d0, r2, r3
 80047f4:	f000 fff0 	bl	80057d8 <cos>
 80047f8:	ec55 4b10 	vmov	r4, r5, d0
 80047fc:	797b      	ldrb	r3, [r7, #5]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fb fe88 	bl	8000514 <__aeabi_i2d>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4620      	mov	r0, r4
 800480a:	4629      	mov	r1, r5
 800480c:	f7fb feec 	bl	80005e8 <__aeabi_dmul>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	f7fc f980 	bl	8000b1c <__aeabi_d2iz>
 800481c:	4603      	mov	r3, r0
 800481e:	b25b      	sxtb	r3, r3
 8004820:	b2da      	uxtb	r2, r3
 8004822:	79bb      	ldrb	r3, [r7, #6]
 8004824:	4413      	add	r3, r2
 8004826:	723b      	strb	r3, [r7, #8]
        ssd1309_Line(xp1,yp1,xp2,yp2,color);
 8004828:	7a3c      	ldrb	r4, [r7, #8]
 800482a:	7a7a      	ldrb	r2, [r7, #9]
 800482c:	7ab9      	ldrb	r1, [r7, #10]
 800482e:	7af8      	ldrb	r0, [r7, #11]
 8004830:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	4623      	mov	r3, r4
 8004838:	f7ff fe06 	bl	8004448 <ssd1309_Line>
    while(count < approx_segments)
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	f4ff af3c 	bcc.w	80046be <ssd1309_DrawArc+0x7e>
    }

    return;
 8004846:	bf00      	nop
}
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bdb0      	pop	{r4, r5, r7, pc}
 800484e:	bf00      	nop
 8004850:	66666667 	.word	0x66666667
 8004854:	16c16c17 	.word	0x16c16c17

08004858 <ssd1309_DrawCircle>:

//Draw circle by Bresenhem's algorithm
void ssd1309_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1309_COLOR par_color) {
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b087      	sub	sp, #28
 800485c:	af00      	add	r7, sp, #0
 800485e:	4604      	mov	r4, r0
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4623      	mov	r3, r4
 8004868:	71fb      	strb	r3, [r7, #7]
 800486a:	4603      	mov	r3, r0
 800486c:	71bb      	strb	r3, [r7, #6]
 800486e:	460b      	mov	r3, r1
 8004870:	717b      	strb	r3, [r7, #5]
 8004872:	4613      	mov	r3, r2
 8004874:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8004876:	797b      	ldrb	r3, [r7, #5]
 8004878:	425b      	negs	r3, r3
 800487a:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8004880:	797b      	ldrb	r3, [r7, #5]
 8004882:	f1c3 0301 	rsb	r3, r3, #1
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1309_WIDTH || par_y >= SSD1309_HEIGHT) {
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	2b00      	cmp	r3, #0
 8004890:	db65      	blt.n	800495e <ssd1309_DrawCircle+0x106>
 8004892:	79bb      	ldrb	r3, [r7, #6]
 8004894:	2b3f      	cmp	r3, #63	; 0x3f
 8004896:	d862      	bhi.n	800495e <ssd1309_DrawCircle+0x106>
    return;
  }

    do {
      ssd1309_DrawPixel(par_x - x, par_y + y, par_color);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	79fa      	ldrb	r2, [r7, #7]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	b2d8      	uxtb	r0, r3
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	79bb      	ldrb	r3, [r7, #6]
 80048a8:	4413      	add	r3, r2
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	793a      	ldrb	r2, [r7, #4]
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7ff fcb0 	bl	8004214 <ssd1309_DrawPixel>
      ssd1309_DrawPixel(par_x + x, par_y + y, par_color);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	4413      	add	r3, r2
 80048bc:	b2d8      	uxtb	r0, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	79bb      	ldrb	r3, [r7, #6]
 80048c4:	4413      	add	r3, r2
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	793a      	ldrb	r2, [r7, #4]
 80048ca:	4619      	mov	r1, r3
 80048cc:	f7ff fca2 	bl	8004214 <ssd1309_DrawPixel>
      ssd1309_DrawPixel(par_x + x, par_y - y, par_color);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	4413      	add	r3, r2
 80048d8:	b2d8      	uxtb	r0, r3
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	79ba      	ldrb	r2, [r7, #6]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	793a      	ldrb	r2, [r7, #4]
 80048e6:	4619      	mov	r1, r3
 80048e8:	f7ff fc94 	bl	8004214 <ssd1309_DrawPixel>
      ssd1309_DrawPixel(par_x - x, par_y - y, par_color);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	79fa      	ldrb	r2, [r7, #7]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	b2d8      	uxtb	r0, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	79ba      	ldrb	r2, [r7, #6]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	793a      	ldrb	r2, [r7, #4]
 8004902:	4619      	mov	r1, r3
 8004904:	f7ff fc86 	bl	8004214 <ssd1309_DrawPixel>
        e2 = err;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	429a      	cmp	r2, r3
 8004912:	dc13      	bgt.n	800493c <ssd1309_DrawCircle+0xe4>
            y++;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	3301      	adds	r3, #1
 8004918:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	3301      	adds	r3, #1
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	425b      	negs	r3, r3
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	429a      	cmp	r2, r3
 800492e:	d105      	bne.n	800493c <ssd1309_DrawCircle+0xe4>
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	429a      	cmp	r2, r3
 8004936:	dc01      	bgt.n	800493c <ssd1309_DrawCircle+0xe4>
              e2 = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	429a      	cmp	r2, r3
 8004942:	dd08      	ble.n	8004956 <ssd1309_DrawCircle+0xfe>
          x++;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3301      	adds	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	3301      	adds	r3, #1
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	dd9d      	ble.n	8004898 <ssd1309_DrawCircle+0x40>

    return;
 800495c:	e000      	b.n	8004960 <ssd1309_DrawCircle+0x108>
    return;
 800495e:	bf00      	nop
}
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	bd90      	pop	{r4, r7, pc}

08004966 <ssd1309_DrawRectangle>:


//Draw rectangle
void ssd1309_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1309_COLOR color) {
 8004966:	b590      	push	{r4, r7, lr}
 8004968:	b085      	sub	sp, #20
 800496a:	af02      	add	r7, sp, #8
 800496c:	4604      	mov	r4, r0
 800496e:	4608      	mov	r0, r1
 8004970:	4611      	mov	r1, r2
 8004972:	461a      	mov	r2, r3
 8004974:	4623      	mov	r3, r4
 8004976:	71fb      	strb	r3, [r7, #7]
 8004978:	4603      	mov	r3, r0
 800497a:	71bb      	strb	r3, [r7, #6]
 800497c:	460b      	mov	r3, r1
 800497e:	717b      	strb	r3, [r7, #5]
 8004980:	4613      	mov	r3, r2
 8004982:	713b      	strb	r3, [r7, #4]
  ssd1309_Line(x1,y1,x2,y1,color);
 8004984:	79bc      	ldrb	r4, [r7, #6]
 8004986:	797a      	ldrb	r2, [r7, #5]
 8004988:	79b9      	ldrb	r1, [r7, #6]
 800498a:	79f8      	ldrb	r0, [r7, #7]
 800498c:	7e3b      	ldrb	r3, [r7, #24]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4623      	mov	r3, r4
 8004992:	f7ff fd59 	bl	8004448 <ssd1309_Line>
  ssd1309_Line(x2,y1,x2,y2,color);
 8004996:	793c      	ldrb	r4, [r7, #4]
 8004998:	797a      	ldrb	r2, [r7, #5]
 800499a:	79b9      	ldrb	r1, [r7, #6]
 800499c:	7978      	ldrb	r0, [r7, #5]
 800499e:	7e3b      	ldrb	r3, [r7, #24]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	4623      	mov	r3, r4
 80049a4:	f7ff fd50 	bl	8004448 <ssd1309_Line>
  ssd1309_Line(x2,y2,x1,y2,color);
 80049a8:	793c      	ldrb	r4, [r7, #4]
 80049aa:	79fa      	ldrb	r2, [r7, #7]
 80049ac:	7939      	ldrb	r1, [r7, #4]
 80049ae:	7978      	ldrb	r0, [r7, #5]
 80049b0:	7e3b      	ldrb	r3, [r7, #24]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	4623      	mov	r3, r4
 80049b6:	f7ff fd47 	bl	8004448 <ssd1309_Line>
  ssd1309_Line(x1,y2,x1,y1,color);
 80049ba:	79bc      	ldrb	r4, [r7, #6]
 80049bc:	79fa      	ldrb	r2, [r7, #7]
 80049be:	7939      	ldrb	r1, [r7, #4]
 80049c0:	79f8      	ldrb	r0, [r7, #7]
 80049c2:	7e3b      	ldrb	r3, [r7, #24]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	4623      	mov	r3, r4
 80049c8:	f7ff fd3e 	bl	8004448 <ssd1309_Line>

  return;
 80049cc:	bf00      	nop
}
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd90      	pop	{r4, r7, pc}

080049d4 <ssd1309_SetContrast>:
    }
    return;
}


void ssd1309_SetContrast(const uint8_t value) {
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80049de:	2381      	movs	r3, #129	; 0x81
 80049e0:	73fb      	strb	r3, [r7, #15]
    ssd1309_WriteCommand(kSetContrastControlRegister);
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fb19 	bl	800401c <ssd1309_WriteCommand>
    ssd1309_WriteCommand(value);
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff fb15 	bl	800401c <ssd1309_WriteCommand>
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <ssd1309_SetDisplayOn>:

void ssd1309_SetDisplayOn(const uint8_t on) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <ssd1309_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004a0c:	23af      	movs	r3, #175	; 0xaf
 8004a0e:	73fb      	strb	r3, [r7, #15]
        SSD1309.DisplayOn = 1;
 8004a10:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <ssd1309_SetDisplayOn+0x38>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	715a      	strb	r2, [r3, #5]
 8004a16:	e004      	b.n	8004a22 <ssd1309_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004a18:	23ae      	movs	r3, #174	; 0xae
 8004a1a:	73fb      	strb	r3, [r7, #15]
        SSD1309.DisplayOn = 0;
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <ssd1309_SetDisplayOn+0x38>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	715a      	strb	r2, [r3, #5]
    }
    ssd1309_WriteCommand(value);
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff faf9 	bl	800401c <ssd1309_WriteCommand>
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	200005e8 	.word	0x200005e8

08004a38 <ssd1309_TestFPS>:
uint8_t ssd1309_GetDisplayOn() {
    return SSD1309.DisplayOn;
}


void ssd1309_TestFPS() {
 8004a38:	b5b0      	push	{r4, r5, r7, lr}
 8004a3a:	b098      	sub	sp, #96	; 0x60
 8004a3c:	af00      	add	r7, sp, #0
    ssd1309_Fill(White);
 8004a3e:	2001      	movs	r0, #1
 8004a40:	f7ff fb9c 	bl	800417c <ssd1309_Fill>

    uint32_t start = HAL_GetTick();
 8004a44:	f7fc fcb2 	bl	80013ac <HAL_GetTick>
 8004a48:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 8004a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a4c:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 8004a52:	4a43      	ldr	r2, [pc, #268]	; (8004b60 <ssd1309_TestFPS+0x128>)
 8004a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    ssd1309_SetCursor(2,0);
 8004a5e:	2100      	movs	r1, #0
 8004a60:	2002      	movs	r0, #2
 8004a62:	f7ff fcd9 	bl	8004418 <ssd1309_SetCursor>
    ssd1309_WriteString("Testing...", Font_11x18, Black);
 8004a66:	4a3f      	ldr	r2, [pc, #252]	; (8004b64 <ssd1309_TestFPS+0x12c>)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	ca06      	ldmia	r2, {r1, r2}
 8004a6c:	483e      	ldr	r0, [pc, #248]	; (8004b68 <ssd1309_TestFPS+0x130>)
 8004a6e:	f7ff fcad 	bl	80043cc <ssd1309_WriteString>
    ssd1309_SetCursor(2, 18*2);
 8004a72:	2124      	movs	r1, #36	; 0x24
 8004a74:	2002      	movs	r0, #2
 8004a76:	f7ff fccf 	bl	8004418 <ssd1309_SetCursor>
    ssd1309_WriteString("0123456789A", Font_11x18, Black);
 8004a7a:	4a3a      	ldr	r2, [pc, #232]	; (8004b64 <ssd1309_TestFPS+0x12c>)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	ca06      	ldmia	r2, {r1, r2}
 8004a80:	483a      	ldr	r0, [pc, #232]	; (8004b6c <ssd1309_TestFPS+0x134>)
 8004a82:	f7ff fca3 	bl	80043cc <ssd1309_WriteString>

    do {
        ssd1309_SetCursor(2, 18);
 8004a86:	2112      	movs	r1, #18
 8004a88:	2002      	movs	r0, #2
 8004a8a:	f7ff fcc5 	bl	8004418 <ssd1309_SetCursor>
        ssd1309_WriteString(message, Font_11x18, Black);
 8004a8e:	4a35      	ldr	r2, [pc, #212]	; (8004b64 <ssd1309_TestFPS+0x12c>)
 8004a90:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8004a94:	2300      	movs	r3, #0
 8004a96:	ca06      	ldmia	r2, {r1, r2}
 8004a98:	f7ff fc98 	bl	80043cc <ssd1309_WriteString>
        ssd1309_UpdateScreen();
 8004a9c:	f7ff fb92 	bl	80041c4 <ssd1309_UpdateScreen>

        char ch = message[0];
 8004aa0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004aa4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 8004aa8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004aac:	3301      	adds	r3, #1
 8004aae:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8004ab2:	220a      	movs	r2, #10
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f000 fa11 	bl	8004edc <memmove>
        message[sizeof(message)-2] = ch;
 8004aba:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004abe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 8004ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 8004ac8:	f7fc fc70 	bl	80013ac <HAL_GetTick>
 8004acc:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8004ace:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	f241 3287 	movw	r2, #4999	; 0x1387
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d9d4      	bls.n	8004a86 <ssd1309_TestFPS+0x4e>

    HAL_Delay(5000);
 8004adc:	f241 3088 	movw	r0, #5000	; 0x1388
 8004ae0:	f7fc fc70 	bl	80013c4 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8004ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aee:	ee17 0a90 	vmov	r0, s15
 8004af2:	f7fb fd21 	bl	8000538 <__aeabi_f2d>
 8004af6:	4604      	mov	r4, r0
 8004af8:	460d      	mov	r5, r1
 8004afa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fb fcf7 	bl	80004f4 <__aeabi_ui2d>
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <ssd1309_TestFPS+0x138>)
 8004b0c:	f7fb fe96 	bl	800083c <__aeabi_ddiv>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4620      	mov	r0, r4
 8004b16:	4629      	mov	r1, r5
 8004b18:	f7fb fe90 	bl	800083c <__aeabi_ddiv>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4610      	mov	r0, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	f7fb fffa 	bl	8000b1c <__aeabi_d2iz>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8004b2c:	1d38      	adds	r0, r7, #4
 8004b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b30:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <ssd1309_TestFPS+0x13c>)
 8004b32:	2140      	movs	r1, #64	; 0x40
 8004b34:	f000 f9f4 	bl	8004f20 <sniprintf>

    ssd1309_Fill(White);
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f7ff fb1f 	bl	800417c <ssd1309_Fill>
    ssd1309_SetCursor(2, 2);
 8004b3e:	2102      	movs	r1, #2
 8004b40:	2002      	movs	r0, #2
 8004b42:	f7ff fc69 	bl	8004418 <ssd1309_SetCursor>
    ssd1309_WriteString(buff, Font_11x18, Black);
 8004b46:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <ssd1309_TestFPS+0x12c>)
 8004b48:	1d38      	adds	r0, r7, #4
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	ca06      	ldmia	r2, {r1, r2}
 8004b4e:	f7ff fc3d 	bl	80043cc <ssd1309_WriteString>
    ssd1309_UpdateScreen();
 8004b52:	f7ff fb37 	bl	80041c4 <ssd1309_UpdateScreen>
}
 8004b56:	bf00      	nop
 8004b58:	3760      	adds	r7, #96	; 0x60
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	08006950 	.word	0x08006950
 8004b64:	2000001c 	.word	0x2000001c
 8004b68:	08006930 	.word	0x08006930
 8004b6c:	0800693c 	.word	0x0800693c
 8004b70:	408f4000 	.word	0x408f4000
 8004b74:	08006948 	.word	0x08006948

08004b78 <ssd1309_TestFonts>:

void ssd1309_TestFonts() {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	71fb      	strb	r3, [r7, #7]
    ssd1309_Fill(Black);
 8004b82:	2000      	movs	r0, #0
 8004b84:	f7ff fafa 	bl	800417c <ssd1309_Fill>

    #ifdef SSD1309_INCLUDE_FONT_16x26
    ssd1309_SetCursor(2, y);
 8004b88:	79fb      	ldrb	r3, [r7, #7]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	2002      	movs	r0, #2
 8004b8e:	f7ff fc43 	bl	8004418 <ssd1309_SetCursor>
    ssd1309_WriteString("Font 16x26", Font_16x26, White);
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <ssd1309_TestFonts+0x88>)
 8004b94:	2301      	movs	r3, #1
 8004b96:	ca06      	ldmia	r2, {r1, r2}
 8004b98:	481a      	ldr	r0, [pc, #104]	; (8004c04 <ssd1309_TestFonts+0x8c>)
 8004b9a:	f7ff fc17 	bl	80043cc <ssd1309_WriteString>
    y += 26;
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	331a      	adds	r3, #26
 8004ba2:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1309_INCLUDE_FONT_11x18
    ssd1309_SetCursor(2, y);
 8004ba4:	79fb      	ldrb	r3, [r7, #7]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	2002      	movs	r0, #2
 8004baa:	f7ff fc35 	bl	8004418 <ssd1309_SetCursor>
    ssd1309_WriteString("Font 11x18", Font_11x18, White);
 8004bae:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <ssd1309_TestFonts+0x90>)
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	ca06      	ldmia	r2, {r1, r2}
 8004bb4:	4815      	ldr	r0, [pc, #84]	; (8004c0c <ssd1309_TestFonts+0x94>)
 8004bb6:	f7ff fc09 	bl	80043cc <ssd1309_WriteString>
    y += 18;
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	3312      	adds	r3, #18
 8004bbe:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1309_INCLUDE_FONT_7x10
    ssd1309_SetCursor(2, y);
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	2002      	movs	r0, #2
 8004bc6:	f7ff fc27 	bl	8004418 <ssd1309_SetCursor>
    ssd1309_WriteString("Font 7x10", Font_7x10, White);
 8004bca:	4a11      	ldr	r2, [pc, #68]	; (8004c10 <ssd1309_TestFonts+0x98>)
 8004bcc:	2301      	movs	r3, #1
 8004bce:	ca06      	ldmia	r2, {r1, r2}
 8004bd0:	4810      	ldr	r0, [pc, #64]	; (8004c14 <ssd1309_TestFonts+0x9c>)
 8004bd2:	f7ff fbfb 	bl	80043cc <ssd1309_WriteString>
    y += 10;
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	330a      	adds	r3, #10
 8004bda:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1309_INCLUDE_FONT_6x8
    ssd1309_SetCursor(2, y);
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	4619      	mov	r1, r3
 8004be0:	2002      	movs	r0, #2
 8004be2:	f7ff fc19 	bl	8004418 <ssd1309_SetCursor>
    ssd1309_WriteString("Font 6x8", Font_6x8, White);
 8004be6:	4a0c      	ldr	r2, [pc, #48]	; (8004c18 <ssd1309_TestFonts+0xa0>)
 8004be8:	2301      	movs	r3, #1
 8004bea:	ca06      	ldmia	r2, {r1, r2}
 8004bec:	480b      	ldr	r0, [pc, #44]	; (8004c1c <ssd1309_TestFonts+0xa4>)
 8004bee:	f7ff fbed 	bl	80043cc <ssd1309_WriteString>
    #endif

    ssd1309_UpdateScreen();
 8004bf2:	f7ff fae7 	bl	80041c4 <ssd1309_UpdateScreen>
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000024 	.word	0x20000024
 8004c04:	0800695c 	.word	0x0800695c
 8004c08:	2000001c 	.word	0x2000001c
 8004c0c:	08006968 	.word	0x08006968
 8004c10:	20000014 	.word	0x20000014
 8004c14:	08006974 	.word	0x08006974
 8004c18:	2000000c 	.word	0x2000000c
 8004c1c:	08006980 	.word	0x08006980

08004c20 <ssd1309_TestBorder>:

void ssd1309_TestBorder() {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
    ssd1309_Fill(Black);
 8004c26:	2000      	movs	r0, #0
 8004c28:	f7ff faa8 	bl	800417c <ssd1309_Fill>

    uint32_t start = HAL_GetTick();
 8004c2c:	f7fc fbbe 	bl	80013ac <HAL_GetTick>
 8004c30:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1309_DrawPixel(x, y, Black);
 8004c3e:	7bb9      	ldrb	r1, [r7, #14]
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2200      	movs	r2, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fae5 	bl	8004214 <ssd1309_DrawPixel>

        if((y == 0) && (x < 127))
 8004c4a:	7bbb      	ldrb	r3, [r7, #14]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <ssd1309_TestBorder+0x3e>
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b7e      	cmp	r3, #126	; 0x7e
 8004c54:	d803      	bhi.n	8004c5e <ssd1309_TestBorder+0x3e>
            x++;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	e016      	b.n	8004c8c <ssd1309_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1309_HEIGHT-1)))
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b7f      	cmp	r3, #127	; 0x7f
 8004c62:	d106      	bne.n	8004c72 <ssd1309_TestBorder+0x52>
 8004c64:	7bbb      	ldrb	r3, [r7, #14]
 8004c66:	2b3e      	cmp	r3, #62	; 0x3e
 8004c68:	d803      	bhi.n	8004c72 <ssd1309_TestBorder+0x52>
            y++;
 8004c6a:	7bbb      	ldrb	r3, [r7, #14]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	73bb      	strb	r3, [r7, #14]
 8004c70:	e00c      	b.n	8004c8c <ssd1309_TestBorder+0x6c>
        else if((y == (SSD1309_HEIGHT-1)) && (x > 0))
 8004c72:	7bbb      	ldrb	r3, [r7, #14]
 8004c74:	2b3f      	cmp	r3, #63	; 0x3f
 8004c76:	d106      	bne.n	8004c86 <ssd1309_TestBorder+0x66>
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <ssd1309_TestBorder+0x66>
            x--;
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
 8004c84:	e002      	b.n	8004c8c <ssd1309_TestBorder+0x6c>
        else
            y--;
 8004c86:	7bbb      	ldrb	r3, [r7, #14]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	73bb      	strb	r3, [r7, #14]

        ssd1309_DrawPixel(x, y, White);
 8004c8c:	7bb9      	ldrb	r1, [r7, #14]
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	2201      	movs	r2, #1
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fabe 	bl	8004214 <ssd1309_DrawPixel>
        ssd1309_UpdateScreen();
 8004c98:	f7ff fa94 	bl	80041c4 <ssd1309_UpdateScreen>

        HAL_Delay(5);
 8004c9c:	2005      	movs	r0, #5
 8004c9e:	f7fc fb91 	bl	80013c4 <HAL_Delay>
        end = HAL_GetTick();
 8004ca2:	f7fc fb83 	bl	80013ac <HAL_GetTick>
 8004ca6:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004cb2:	d3c4      	bcc.n	8004c3e <ssd1309_TestBorder+0x1e>

    HAL_Delay(1000);
 8004cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cb8:	f7fc fb84 	bl	80013c4 <HAL_Delay>
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <ssd1309_TestLine>:


void ssd1309_TestLine() {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af02      	add	r7, sp, #8

  ssd1309_Line(1,1,SSD1309_WIDTH - 1,SSD1309_HEIGHT - 1,White);
 8004cca:	2301      	movs	r3, #1
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	233f      	movs	r3, #63	; 0x3f
 8004cd0:	227f      	movs	r2, #127	; 0x7f
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	f7ff fbb7 	bl	8004448 <ssd1309_Line>
  ssd1309_Line(SSD1309_WIDTH - 1,1,1,SSD1309_HEIGHT - 1,White);
 8004cda:	2301      	movs	r3, #1
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	233f      	movs	r3, #63	; 0x3f
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	207f      	movs	r0, #127	; 0x7f
 8004ce6:	f7ff fbaf 	bl	8004448 <ssd1309_Line>
  ssd1309_UpdateScreen();
 8004cea:	f7ff fa6b 	bl	80041c4 <ssd1309_UpdateScreen>
  return;
 8004cee:	bf00      	nop
}
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <ssd1309_TestRectangle>:

void ssd1309_TestRectangle() {
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	e028      	b.n	8004d52 <ssd1309_TestRectangle+0x5e>
    ssd1309_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1309_WIDTH-1 - (5*delta),SSD1309_HEIGHT-1 - (5*delta),White);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	0092      	lsls	r2, r2, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	b2d8      	uxtb	r0, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	0092      	lsls	r2, r2, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	b2d9      	uxtb	r1, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	0092      	lsls	r2, r2, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461c      	mov	r4, r3
 8004d38:	00a4      	lsls	r4, r4, #2
 8004d3a:	4423      	add	r3, r4
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2401      	movs	r4, #1
 8004d46:	9400      	str	r4, [sp, #0]
 8004d48:	f7ff fe0d 	bl	8004966 <ssd1309_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d9d3      	bls.n	8004d00 <ssd1309_TestRectangle+0xc>
  }
  ssd1309_UpdateScreen();
 8004d58:	f7ff fa34 	bl	80041c4 <ssd1309_UpdateScreen>
  return;
 8004d5c:	bf00      	nop
}
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}

08004d64 <ssd1309_TestCircle>:

void ssd1309_TestCircle() {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	e010      	b.n	8004d92 <ssd1309_TestCircle+0x2e>
    ssd1309_DrawCircle(20* delta+30, 15, 10, White);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	0092      	lsls	r2, r2, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	331e      	adds	r3, #30
 8004d80:	b2d8      	uxtb	r0, r3
 8004d82:	2301      	movs	r3, #1
 8004d84:	220a      	movs	r2, #10
 8004d86:	210f      	movs	r1, #15
 8004d88:	f7ff fd66 	bl	8004858 <ssd1309_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d9eb      	bls.n	8004d70 <ssd1309_TestCircle+0xc>
  }
  ssd1309_UpdateScreen();
 8004d98:	f7ff fa14 	bl	80041c4 <ssd1309_UpdateScreen>
  return;
 8004d9c:	bf00      	nop
}
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <ssd1309_TestArc>:

void ssd1309_TestArc() {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af02      	add	r7, sp, #8
  ssd1309_DrawArc(30, 30, 30, 20, 270, White);
 8004daa:	2301      	movs	r3, #1
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	2314      	movs	r3, #20
 8004db6:	221e      	movs	r2, #30
 8004db8:	211e      	movs	r1, #30
 8004dba:	201e      	movs	r0, #30
 8004dbc:	f7ff fc40 	bl	8004640 <ssd1309_DrawArc>
  ssd1309_UpdateScreen();
 8004dc0:	f7ff fa00 	bl	80041c4 <ssd1309_UpdateScreen>
  return;
 8004dc4:	bf00      	nop
}
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <ssd1309_TestPolyline>:


void ssd1309_TestPolyline() {
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
  SSD1309_VERTEX loc_vertex[] =
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <ssd1309_TestPolyline+0x28>)
 8004dd4:	463c      	mov	r4, r7
 8004dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dd8:	c407      	stmia	r4!, {r0, r1, r2}
 8004dda:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1309_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8004ddc:	463b      	mov	r3, r7
 8004dde:	2201      	movs	r2, #1
 8004de0:	2107      	movs	r1, #7
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fb9c 	bl	8004520 <ssd1309_Polyline>
  ssd1309_UpdateScreen();
 8004de8:	f7ff f9ec 	bl	80041c4 <ssd1309_UpdateScreen>
  return;
 8004dec:	bf00      	nop
}
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd90      	pop	{r4, r7, pc}
 8004df4:	0800698c 	.word	0x0800698c

08004df8 <ssd1309_TestAll>:


void ssd1309_TestAll() {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
    ssd1309_Init();
 8004dfc:	f7ff f954 	bl	80040a8 <ssd1309_Init>
    ssd1309_TestFPS();
 8004e00:	f7ff fe1a 	bl	8004a38 <ssd1309_TestFPS>
    HAL_Delay(3000);
 8004e04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e08:	f7fc fadc 	bl	80013c4 <HAL_Delay>
    ssd1309_TestBorder();
 8004e0c:	f7ff ff08 	bl	8004c20 <ssd1309_TestBorder>
    ssd1309_TestFonts();
 8004e10:	f7ff feb2 	bl	8004b78 <ssd1309_TestFonts>
    HAL_Delay(3000);
 8004e14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e18:	f7fc fad4 	bl	80013c4 <HAL_Delay>
    ssd1309_Fill(Black);
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7ff f9ad 	bl	800417c <ssd1309_Fill>
    ssd1309_TestRectangle();
 8004e22:	f7ff ff67 	bl	8004cf4 <ssd1309_TestRectangle>
    ssd1309_TestLine();
 8004e26:	f7ff ff4d 	bl	8004cc4 <ssd1309_TestLine>
    HAL_Delay(3000);
 8004e2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e2e:	f7fc fac9 	bl	80013c4 <HAL_Delay>
    ssd1309_Fill(Black);
 8004e32:	2000      	movs	r0, #0
 8004e34:	f7ff f9a2 	bl	800417c <ssd1309_Fill>
    ssd1309_TestPolyline();
 8004e38:	f7ff ffc8 	bl	8004dcc <ssd1309_TestPolyline>
    HAL_Delay(3000);
 8004e3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e40:	f7fc fac0 	bl	80013c4 <HAL_Delay>
    ssd1309_Fill(Black);
 8004e44:	2000      	movs	r0, #0
 8004e46:	f7ff f999 	bl	800417c <ssd1309_Fill>
    ssd1309_TestArc();
 8004e4a:	f7ff ffab 	bl	8004da4 <ssd1309_TestArc>
    HAL_Delay(3000);
 8004e4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e52:	f7fc fab7 	bl	80013c4 <HAL_Delay>
    ssd1309_Fill(Black);
 8004e56:	2000      	movs	r0, #0
 8004e58:	f7ff f990 	bl	800417c <ssd1309_Fill>
    ssd1309_TestCircle();
 8004e5c:	f7ff ff82 	bl	8004d64 <ssd1309_TestCircle>
    HAL_Delay(3000);
 8004e60:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e64:	f7fc faae 	bl	80013c4 <HAL_Delay>
}
 8004e68:	bf00      	nop
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <__errno>:
 8004e6c:	4b01      	ldr	r3, [pc, #4]	; (8004e74 <__errno+0x8>)
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	2000002c 	.word	0x2000002c

08004e78 <__libc_init_array>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	4d0d      	ldr	r5, [pc, #52]	; (8004eb0 <__libc_init_array+0x38>)
 8004e7c:	4c0d      	ldr	r4, [pc, #52]	; (8004eb4 <__libc_init_array+0x3c>)
 8004e7e:	1b64      	subs	r4, r4, r5
 8004e80:	10a4      	asrs	r4, r4, #2
 8004e82:	2600      	movs	r6, #0
 8004e84:	42a6      	cmp	r6, r4
 8004e86:	d109      	bne.n	8004e9c <__libc_init_array+0x24>
 8004e88:	4d0b      	ldr	r5, [pc, #44]	; (8004eb8 <__libc_init_array+0x40>)
 8004e8a:	4c0c      	ldr	r4, [pc, #48]	; (8004ebc <__libc_init_array+0x44>)
 8004e8c:	f001 fd42 	bl	8006914 <_init>
 8004e90:	1b64      	subs	r4, r4, r5
 8004e92:	10a4      	asrs	r4, r4, #2
 8004e94:	2600      	movs	r6, #0
 8004e96:	42a6      	cmp	r6, r4
 8004e98:	d105      	bne.n	8004ea6 <__libc_init_array+0x2e>
 8004e9a:	bd70      	pop	{r4, r5, r6, pc}
 8004e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea0:	4798      	blx	r3
 8004ea2:	3601      	adds	r6, #1
 8004ea4:	e7ee      	b.n	8004e84 <__libc_init_array+0xc>
 8004ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eaa:	4798      	blx	r3
 8004eac:	3601      	adds	r6, #1
 8004eae:	e7f2      	b.n	8004e96 <__libc_init_array+0x1e>
 8004eb0:	080099e8 	.word	0x080099e8
 8004eb4:	080099e8 	.word	0x080099e8
 8004eb8:	080099e8 	.word	0x080099e8
 8004ebc:	080099ec 	.word	0x080099ec

08004ec0 <memcpy>:
 8004ec0:	440a      	add	r2, r1
 8004ec2:	4291      	cmp	r1, r2
 8004ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec8:	d100      	bne.n	8004ecc <memcpy+0xc>
 8004eca:	4770      	bx	lr
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ed6:	4291      	cmp	r1, r2
 8004ed8:	d1f9      	bne.n	8004ece <memcpy+0xe>
 8004eda:	bd10      	pop	{r4, pc}

08004edc <memmove>:
 8004edc:	4288      	cmp	r0, r1
 8004ede:	b510      	push	{r4, lr}
 8004ee0:	eb01 0402 	add.w	r4, r1, r2
 8004ee4:	d902      	bls.n	8004eec <memmove+0x10>
 8004ee6:	4284      	cmp	r4, r0
 8004ee8:	4623      	mov	r3, r4
 8004eea:	d807      	bhi.n	8004efc <memmove+0x20>
 8004eec:	1e43      	subs	r3, r0, #1
 8004eee:	42a1      	cmp	r1, r4
 8004ef0:	d008      	beq.n	8004f04 <memmove+0x28>
 8004ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004efa:	e7f8      	b.n	8004eee <memmove+0x12>
 8004efc:	4402      	add	r2, r0
 8004efe:	4601      	mov	r1, r0
 8004f00:	428a      	cmp	r2, r1
 8004f02:	d100      	bne.n	8004f06 <memmove+0x2a>
 8004f04:	bd10      	pop	{r4, pc}
 8004f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f0e:	e7f7      	b.n	8004f00 <memmove+0x24>

08004f10 <memset>:
 8004f10:	4402      	add	r2, r0
 8004f12:	4603      	mov	r3, r0
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d100      	bne.n	8004f1a <memset+0xa>
 8004f18:	4770      	bx	lr
 8004f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f1e:	e7f9      	b.n	8004f14 <memset+0x4>

08004f20 <sniprintf>:
 8004f20:	b40c      	push	{r2, r3}
 8004f22:	b530      	push	{r4, r5, lr}
 8004f24:	4b17      	ldr	r3, [pc, #92]	; (8004f84 <sniprintf+0x64>)
 8004f26:	1e0c      	subs	r4, r1, #0
 8004f28:	681d      	ldr	r5, [r3, #0]
 8004f2a:	b09d      	sub	sp, #116	; 0x74
 8004f2c:	da08      	bge.n	8004f40 <sniprintf+0x20>
 8004f2e:	238b      	movs	r3, #139	; 0x8b
 8004f30:	602b      	str	r3, [r5, #0]
 8004f32:	f04f 30ff 	mov.w	r0, #4294967295
 8004f36:	b01d      	add	sp, #116	; 0x74
 8004f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f3c:	b002      	add	sp, #8
 8004f3e:	4770      	bx	lr
 8004f40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004f44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f48:	bf14      	ite	ne
 8004f4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004f4e:	4623      	moveq	r3, r4
 8004f50:	9304      	str	r3, [sp, #16]
 8004f52:	9307      	str	r3, [sp, #28]
 8004f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f58:	9002      	str	r0, [sp, #8]
 8004f5a:	9006      	str	r0, [sp, #24]
 8004f5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004f62:	ab21      	add	r3, sp, #132	; 0x84
 8004f64:	a902      	add	r1, sp, #8
 8004f66:	4628      	mov	r0, r5
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	f000 f869 	bl	8005040 <_svfiprintf_r>
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	bfbc      	itt	lt
 8004f72:	238b      	movlt	r3, #139	; 0x8b
 8004f74:	602b      	strlt	r3, [r5, #0]
 8004f76:	2c00      	cmp	r4, #0
 8004f78:	d0dd      	beq.n	8004f36 <sniprintf+0x16>
 8004f7a:	9b02      	ldr	r3, [sp, #8]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	e7d9      	b.n	8004f36 <sniprintf+0x16>
 8004f82:	bf00      	nop
 8004f84:	2000002c 	.word	0x2000002c

08004f88 <__ssputs_r>:
 8004f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f8c:	688e      	ldr	r6, [r1, #8]
 8004f8e:	429e      	cmp	r6, r3
 8004f90:	4682      	mov	sl, r0
 8004f92:	460c      	mov	r4, r1
 8004f94:	4690      	mov	r8, r2
 8004f96:	461f      	mov	r7, r3
 8004f98:	d838      	bhi.n	800500c <__ssputs_r+0x84>
 8004f9a:	898a      	ldrh	r2, [r1, #12]
 8004f9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fa0:	d032      	beq.n	8005008 <__ssputs_r+0x80>
 8004fa2:	6825      	ldr	r5, [r4, #0]
 8004fa4:	6909      	ldr	r1, [r1, #16]
 8004fa6:	eba5 0901 	sub.w	r9, r5, r1
 8004faa:	6965      	ldr	r5, [r4, #20]
 8004fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	444b      	add	r3, r9
 8004fb8:	106d      	asrs	r5, r5, #1
 8004fba:	429d      	cmp	r5, r3
 8004fbc:	bf38      	it	cc
 8004fbe:	461d      	movcc	r5, r3
 8004fc0:	0553      	lsls	r3, r2, #21
 8004fc2:	d531      	bpl.n	8005028 <__ssputs_r+0xa0>
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	f000 fb3b 	bl	8005640 <_malloc_r>
 8004fca:	4606      	mov	r6, r0
 8004fcc:	b950      	cbnz	r0, 8004fe4 <__ssputs_r+0x5c>
 8004fce:	230c      	movs	r3, #12
 8004fd0:	f8ca 3000 	str.w	r3, [sl]
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe4:	6921      	ldr	r1, [r4, #16]
 8004fe6:	464a      	mov	r2, r9
 8004fe8:	f7ff ff6a 	bl	8004ec0 <memcpy>
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff6:	81a3      	strh	r3, [r4, #12]
 8004ff8:	6126      	str	r6, [r4, #16]
 8004ffa:	6165      	str	r5, [r4, #20]
 8004ffc:	444e      	add	r6, r9
 8004ffe:	eba5 0509 	sub.w	r5, r5, r9
 8005002:	6026      	str	r6, [r4, #0]
 8005004:	60a5      	str	r5, [r4, #8]
 8005006:	463e      	mov	r6, r7
 8005008:	42be      	cmp	r6, r7
 800500a:	d900      	bls.n	800500e <__ssputs_r+0x86>
 800500c:	463e      	mov	r6, r7
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	4632      	mov	r2, r6
 8005012:	4641      	mov	r1, r8
 8005014:	f7ff ff62 	bl	8004edc <memmove>
 8005018:	68a3      	ldr	r3, [r4, #8]
 800501a:	1b9b      	subs	r3, r3, r6
 800501c:	60a3      	str	r3, [r4, #8]
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	4433      	add	r3, r6
 8005022:	6023      	str	r3, [r4, #0]
 8005024:	2000      	movs	r0, #0
 8005026:	e7db      	b.n	8004fe0 <__ssputs_r+0x58>
 8005028:	462a      	mov	r2, r5
 800502a:	f000 fb7d 	bl	8005728 <_realloc_r>
 800502e:	4606      	mov	r6, r0
 8005030:	2800      	cmp	r0, #0
 8005032:	d1e1      	bne.n	8004ff8 <__ssputs_r+0x70>
 8005034:	6921      	ldr	r1, [r4, #16]
 8005036:	4650      	mov	r0, sl
 8005038:	f000 fa96 	bl	8005568 <_free_r>
 800503c:	e7c7      	b.n	8004fce <__ssputs_r+0x46>
	...

08005040 <_svfiprintf_r>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	4698      	mov	r8, r3
 8005046:	898b      	ldrh	r3, [r1, #12]
 8005048:	061b      	lsls	r3, r3, #24
 800504a:	b09d      	sub	sp, #116	; 0x74
 800504c:	4607      	mov	r7, r0
 800504e:	460d      	mov	r5, r1
 8005050:	4614      	mov	r4, r2
 8005052:	d50e      	bpl.n	8005072 <_svfiprintf_r+0x32>
 8005054:	690b      	ldr	r3, [r1, #16]
 8005056:	b963      	cbnz	r3, 8005072 <_svfiprintf_r+0x32>
 8005058:	2140      	movs	r1, #64	; 0x40
 800505a:	f000 faf1 	bl	8005640 <_malloc_r>
 800505e:	6028      	str	r0, [r5, #0]
 8005060:	6128      	str	r0, [r5, #16]
 8005062:	b920      	cbnz	r0, 800506e <_svfiprintf_r+0x2e>
 8005064:	230c      	movs	r3, #12
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	f04f 30ff 	mov.w	r0, #4294967295
 800506c:	e0d1      	b.n	8005212 <_svfiprintf_r+0x1d2>
 800506e:	2340      	movs	r3, #64	; 0x40
 8005070:	616b      	str	r3, [r5, #20]
 8005072:	2300      	movs	r3, #0
 8005074:	9309      	str	r3, [sp, #36]	; 0x24
 8005076:	2320      	movs	r3, #32
 8005078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800507c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005080:	2330      	movs	r3, #48	; 0x30
 8005082:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800522c <_svfiprintf_r+0x1ec>
 8005086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800508a:	f04f 0901 	mov.w	r9, #1
 800508e:	4623      	mov	r3, r4
 8005090:	469a      	mov	sl, r3
 8005092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005096:	b10a      	cbz	r2, 800509c <_svfiprintf_r+0x5c>
 8005098:	2a25      	cmp	r2, #37	; 0x25
 800509a:	d1f9      	bne.n	8005090 <_svfiprintf_r+0x50>
 800509c:	ebba 0b04 	subs.w	fp, sl, r4
 80050a0:	d00b      	beq.n	80050ba <_svfiprintf_r+0x7a>
 80050a2:	465b      	mov	r3, fp
 80050a4:	4622      	mov	r2, r4
 80050a6:	4629      	mov	r1, r5
 80050a8:	4638      	mov	r0, r7
 80050aa:	f7ff ff6d 	bl	8004f88 <__ssputs_r>
 80050ae:	3001      	adds	r0, #1
 80050b0:	f000 80aa 	beq.w	8005208 <_svfiprintf_r+0x1c8>
 80050b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050b6:	445a      	add	r2, fp
 80050b8:	9209      	str	r2, [sp, #36]	; 0x24
 80050ba:	f89a 3000 	ldrb.w	r3, [sl]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 80a2 	beq.w	8005208 <_svfiprintf_r+0x1c8>
 80050c4:	2300      	movs	r3, #0
 80050c6:	f04f 32ff 	mov.w	r2, #4294967295
 80050ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ce:	f10a 0a01 	add.w	sl, sl, #1
 80050d2:	9304      	str	r3, [sp, #16]
 80050d4:	9307      	str	r3, [sp, #28]
 80050d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050da:	931a      	str	r3, [sp, #104]	; 0x68
 80050dc:	4654      	mov	r4, sl
 80050de:	2205      	movs	r2, #5
 80050e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050e4:	4851      	ldr	r0, [pc, #324]	; (800522c <_svfiprintf_r+0x1ec>)
 80050e6:	f7fb f873 	bl	80001d0 <memchr>
 80050ea:	9a04      	ldr	r2, [sp, #16]
 80050ec:	b9d8      	cbnz	r0, 8005126 <_svfiprintf_r+0xe6>
 80050ee:	06d0      	lsls	r0, r2, #27
 80050f0:	bf44      	itt	mi
 80050f2:	2320      	movmi	r3, #32
 80050f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050f8:	0711      	lsls	r1, r2, #28
 80050fa:	bf44      	itt	mi
 80050fc:	232b      	movmi	r3, #43	; 0x2b
 80050fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005102:	f89a 3000 	ldrb.w	r3, [sl]
 8005106:	2b2a      	cmp	r3, #42	; 0x2a
 8005108:	d015      	beq.n	8005136 <_svfiprintf_r+0xf6>
 800510a:	9a07      	ldr	r2, [sp, #28]
 800510c:	4654      	mov	r4, sl
 800510e:	2000      	movs	r0, #0
 8005110:	f04f 0c0a 	mov.w	ip, #10
 8005114:	4621      	mov	r1, r4
 8005116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800511a:	3b30      	subs	r3, #48	; 0x30
 800511c:	2b09      	cmp	r3, #9
 800511e:	d94e      	bls.n	80051be <_svfiprintf_r+0x17e>
 8005120:	b1b0      	cbz	r0, 8005150 <_svfiprintf_r+0x110>
 8005122:	9207      	str	r2, [sp, #28]
 8005124:	e014      	b.n	8005150 <_svfiprintf_r+0x110>
 8005126:	eba0 0308 	sub.w	r3, r0, r8
 800512a:	fa09 f303 	lsl.w	r3, r9, r3
 800512e:	4313      	orrs	r3, r2
 8005130:	9304      	str	r3, [sp, #16]
 8005132:	46a2      	mov	sl, r4
 8005134:	e7d2      	b.n	80050dc <_svfiprintf_r+0x9c>
 8005136:	9b03      	ldr	r3, [sp, #12]
 8005138:	1d19      	adds	r1, r3, #4
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	9103      	str	r1, [sp, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	bfbb      	ittet	lt
 8005142:	425b      	neglt	r3, r3
 8005144:	f042 0202 	orrlt.w	r2, r2, #2
 8005148:	9307      	strge	r3, [sp, #28]
 800514a:	9307      	strlt	r3, [sp, #28]
 800514c:	bfb8      	it	lt
 800514e:	9204      	strlt	r2, [sp, #16]
 8005150:	7823      	ldrb	r3, [r4, #0]
 8005152:	2b2e      	cmp	r3, #46	; 0x2e
 8005154:	d10c      	bne.n	8005170 <_svfiprintf_r+0x130>
 8005156:	7863      	ldrb	r3, [r4, #1]
 8005158:	2b2a      	cmp	r3, #42	; 0x2a
 800515a:	d135      	bne.n	80051c8 <_svfiprintf_r+0x188>
 800515c:	9b03      	ldr	r3, [sp, #12]
 800515e:	1d1a      	adds	r2, r3, #4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	9203      	str	r2, [sp, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	bfb8      	it	lt
 8005168:	f04f 33ff 	movlt.w	r3, #4294967295
 800516c:	3402      	adds	r4, #2
 800516e:	9305      	str	r3, [sp, #20]
 8005170:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800523c <_svfiprintf_r+0x1fc>
 8005174:	7821      	ldrb	r1, [r4, #0]
 8005176:	2203      	movs	r2, #3
 8005178:	4650      	mov	r0, sl
 800517a:	f7fb f829 	bl	80001d0 <memchr>
 800517e:	b140      	cbz	r0, 8005192 <_svfiprintf_r+0x152>
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	eba0 000a 	sub.w	r0, r0, sl
 8005186:	fa03 f000 	lsl.w	r0, r3, r0
 800518a:	9b04      	ldr	r3, [sp, #16]
 800518c:	4303      	orrs	r3, r0
 800518e:	3401      	adds	r4, #1
 8005190:	9304      	str	r3, [sp, #16]
 8005192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005196:	4826      	ldr	r0, [pc, #152]	; (8005230 <_svfiprintf_r+0x1f0>)
 8005198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800519c:	2206      	movs	r2, #6
 800519e:	f7fb f817 	bl	80001d0 <memchr>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d038      	beq.n	8005218 <_svfiprintf_r+0x1d8>
 80051a6:	4b23      	ldr	r3, [pc, #140]	; (8005234 <_svfiprintf_r+0x1f4>)
 80051a8:	bb1b      	cbnz	r3, 80051f2 <_svfiprintf_r+0x1b2>
 80051aa:	9b03      	ldr	r3, [sp, #12]
 80051ac:	3307      	adds	r3, #7
 80051ae:	f023 0307 	bic.w	r3, r3, #7
 80051b2:	3308      	adds	r3, #8
 80051b4:	9303      	str	r3, [sp, #12]
 80051b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b8:	4433      	add	r3, r6
 80051ba:	9309      	str	r3, [sp, #36]	; 0x24
 80051bc:	e767      	b.n	800508e <_svfiprintf_r+0x4e>
 80051be:	fb0c 3202 	mla	r2, ip, r2, r3
 80051c2:	460c      	mov	r4, r1
 80051c4:	2001      	movs	r0, #1
 80051c6:	e7a5      	b.n	8005114 <_svfiprintf_r+0xd4>
 80051c8:	2300      	movs	r3, #0
 80051ca:	3401      	adds	r4, #1
 80051cc:	9305      	str	r3, [sp, #20]
 80051ce:	4619      	mov	r1, r3
 80051d0:	f04f 0c0a 	mov.w	ip, #10
 80051d4:	4620      	mov	r0, r4
 80051d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051da:	3a30      	subs	r2, #48	; 0x30
 80051dc:	2a09      	cmp	r2, #9
 80051de:	d903      	bls.n	80051e8 <_svfiprintf_r+0x1a8>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0c5      	beq.n	8005170 <_svfiprintf_r+0x130>
 80051e4:	9105      	str	r1, [sp, #20]
 80051e6:	e7c3      	b.n	8005170 <_svfiprintf_r+0x130>
 80051e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80051ec:	4604      	mov	r4, r0
 80051ee:	2301      	movs	r3, #1
 80051f0:	e7f0      	b.n	80051d4 <_svfiprintf_r+0x194>
 80051f2:	ab03      	add	r3, sp, #12
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	462a      	mov	r2, r5
 80051f8:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <_svfiprintf_r+0x1f8>)
 80051fa:	a904      	add	r1, sp, #16
 80051fc:	4638      	mov	r0, r7
 80051fe:	f3af 8000 	nop.w
 8005202:	1c42      	adds	r2, r0, #1
 8005204:	4606      	mov	r6, r0
 8005206:	d1d6      	bne.n	80051b6 <_svfiprintf_r+0x176>
 8005208:	89ab      	ldrh	r3, [r5, #12]
 800520a:	065b      	lsls	r3, r3, #25
 800520c:	f53f af2c 	bmi.w	8005068 <_svfiprintf_r+0x28>
 8005210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005212:	b01d      	add	sp, #116	; 0x74
 8005214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005218:	ab03      	add	r3, sp, #12
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	462a      	mov	r2, r5
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <_svfiprintf_r+0x1f8>)
 8005220:	a904      	add	r1, sp, #16
 8005222:	4638      	mov	r0, r7
 8005224:	f000 f87a 	bl	800531c <_printf_i>
 8005228:	e7eb      	b.n	8005202 <_svfiprintf_r+0x1c2>
 800522a:	bf00      	nop
 800522c:	080097d8 	.word	0x080097d8
 8005230:	080097e2 	.word	0x080097e2
 8005234:	00000000 	.word	0x00000000
 8005238:	08004f89 	.word	0x08004f89
 800523c:	080097de 	.word	0x080097de

08005240 <_printf_common>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	4616      	mov	r6, r2
 8005246:	4699      	mov	r9, r3
 8005248:	688a      	ldr	r2, [r1, #8]
 800524a:	690b      	ldr	r3, [r1, #16]
 800524c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005250:	4293      	cmp	r3, r2
 8005252:	bfb8      	it	lt
 8005254:	4613      	movlt	r3, r2
 8005256:	6033      	str	r3, [r6, #0]
 8005258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800525c:	4607      	mov	r7, r0
 800525e:	460c      	mov	r4, r1
 8005260:	b10a      	cbz	r2, 8005266 <_printf_common+0x26>
 8005262:	3301      	adds	r3, #1
 8005264:	6033      	str	r3, [r6, #0]
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	0699      	lsls	r1, r3, #26
 800526a:	bf42      	ittt	mi
 800526c:	6833      	ldrmi	r3, [r6, #0]
 800526e:	3302      	addmi	r3, #2
 8005270:	6033      	strmi	r3, [r6, #0]
 8005272:	6825      	ldr	r5, [r4, #0]
 8005274:	f015 0506 	ands.w	r5, r5, #6
 8005278:	d106      	bne.n	8005288 <_printf_common+0x48>
 800527a:	f104 0a19 	add.w	sl, r4, #25
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	6832      	ldr	r2, [r6, #0]
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	42ab      	cmp	r3, r5
 8005286:	dc26      	bgt.n	80052d6 <_printf_common+0x96>
 8005288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800528c:	1e13      	subs	r3, r2, #0
 800528e:	6822      	ldr	r2, [r4, #0]
 8005290:	bf18      	it	ne
 8005292:	2301      	movne	r3, #1
 8005294:	0692      	lsls	r2, r2, #26
 8005296:	d42b      	bmi.n	80052f0 <_printf_common+0xb0>
 8005298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800529c:	4649      	mov	r1, r9
 800529e:	4638      	mov	r0, r7
 80052a0:	47c0      	blx	r8
 80052a2:	3001      	adds	r0, #1
 80052a4:	d01e      	beq.n	80052e4 <_printf_common+0xa4>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	68e5      	ldr	r5, [r4, #12]
 80052aa:	6832      	ldr	r2, [r6, #0]
 80052ac:	f003 0306 	and.w	r3, r3, #6
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	bf08      	it	eq
 80052b4:	1aad      	subeq	r5, r5, r2
 80052b6:	68a3      	ldr	r3, [r4, #8]
 80052b8:	6922      	ldr	r2, [r4, #16]
 80052ba:	bf0c      	ite	eq
 80052bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c0:	2500      	movne	r5, #0
 80052c2:	4293      	cmp	r3, r2
 80052c4:	bfc4      	itt	gt
 80052c6:	1a9b      	subgt	r3, r3, r2
 80052c8:	18ed      	addgt	r5, r5, r3
 80052ca:	2600      	movs	r6, #0
 80052cc:	341a      	adds	r4, #26
 80052ce:	42b5      	cmp	r5, r6
 80052d0:	d11a      	bne.n	8005308 <_printf_common+0xc8>
 80052d2:	2000      	movs	r0, #0
 80052d4:	e008      	b.n	80052e8 <_printf_common+0xa8>
 80052d6:	2301      	movs	r3, #1
 80052d8:	4652      	mov	r2, sl
 80052da:	4649      	mov	r1, r9
 80052dc:	4638      	mov	r0, r7
 80052de:	47c0      	blx	r8
 80052e0:	3001      	adds	r0, #1
 80052e2:	d103      	bne.n	80052ec <_printf_common+0xac>
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295
 80052e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ec:	3501      	adds	r5, #1
 80052ee:	e7c6      	b.n	800527e <_printf_common+0x3e>
 80052f0:	18e1      	adds	r1, r4, r3
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	2030      	movs	r0, #48	; 0x30
 80052f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052fa:	4422      	add	r2, r4
 80052fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005304:	3302      	adds	r3, #2
 8005306:	e7c7      	b.n	8005298 <_printf_common+0x58>
 8005308:	2301      	movs	r3, #1
 800530a:	4622      	mov	r2, r4
 800530c:	4649      	mov	r1, r9
 800530e:	4638      	mov	r0, r7
 8005310:	47c0      	blx	r8
 8005312:	3001      	adds	r0, #1
 8005314:	d0e6      	beq.n	80052e4 <_printf_common+0xa4>
 8005316:	3601      	adds	r6, #1
 8005318:	e7d9      	b.n	80052ce <_printf_common+0x8e>
	...

0800531c <_printf_i>:
 800531c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	7e0f      	ldrb	r7, [r1, #24]
 8005322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005324:	2f78      	cmp	r7, #120	; 0x78
 8005326:	4691      	mov	r9, r2
 8005328:	4680      	mov	r8, r0
 800532a:	460c      	mov	r4, r1
 800532c:	469a      	mov	sl, r3
 800532e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005332:	d807      	bhi.n	8005344 <_printf_i+0x28>
 8005334:	2f62      	cmp	r7, #98	; 0x62
 8005336:	d80a      	bhi.n	800534e <_printf_i+0x32>
 8005338:	2f00      	cmp	r7, #0
 800533a:	f000 80d8 	beq.w	80054ee <_printf_i+0x1d2>
 800533e:	2f58      	cmp	r7, #88	; 0x58
 8005340:	f000 80a3 	beq.w	800548a <_printf_i+0x16e>
 8005344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800534c:	e03a      	b.n	80053c4 <_printf_i+0xa8>
 800534e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005352:	2b15      	cmp	r3, #21
 8005354:	d8f6      	bhi.n	8005344 <_printf_i+0x28>
 8005356:	a101      	add	r1, pc, #4	; (adr r1, 800535c <_printf_i+0x40>)
 8005358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800535c:	080053b5 	.word	0x080053b5
 8005360:	080053c9 	.word	0x080053c9
 8005364:	08005345 	.word	0x08005345
 8005368:	08005345 	.word	0x08005345
 800536c:	08005345 	.word	0x08005345
 8005370:	08005345 	.word	0x08005345
 8005374:	080053c9 	.word	0x080053c9
 8005378:	08005345 	.word	0x08005345
 800537c:	08005345 	.word	0x08005345
 8005380:	08005345 	.word	0x08005345
 8005384:	08005345 	.word	0x08005345
 8005388:	080054d5 	.word	0x080054d5
 800538c:	080053f9 	.word	0x080053f9
 8005390:	080054b7 	.word	0x080054b7
 8005394:	08005345 	.word	0x08005345
 8005398:	08005345 	.word	0x08005345
 800539c:	080054f7 	.word	0x080054f7
 80053a0:	08005345 	.word	0x08005345
 80053a4:	080053f9 	.word	0x080053f9
 80053a8:	08005345 	.word	0x08005345
 80053ac:	08005345 	.word	0x08005345
 80053b0:	080054bf 	.word	0x080054bf
 80053b4:	682b      	ldr	r3, [r5, #0]
 80053b6:	1d1a      	adds	r2, r3, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	602a      	str	r2, [r5, #0]
 80053bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0a3      	b.n	8005510 <_printf_i+0x1f4>
 80053c8:	6820      	ldr	r0, [r4, #0]
 80053ca:	6829      	ldr	r1, [r5, #0]
 80053cc:	0606      	lsls	r6, r0, #24
 80053ce:	f101 0304 	add.w	r3, r1, #4
 80053d2:	d50a      	bpl.n	80053ea <_printf_i+0xce>
 80053d4:	680e      	ldr	r6, [r1, #0]
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	2e00      	cmp	r6, #0
 80053da:	da03      	bge.n	80053e4 <_printf_i+0xc8>
 80053dc:	232d      	movs	r3, #45	; 0x2d
 80053de:	4276      	negs	r6, r6
 80053e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e4:	485e      	ldr	r0, [pc, #376]	; (8005560 <_printf_i+0x244>)
 80053e6:	230a      	movs	r3, #10
 80053e8:	e019      	b.n	800541e <_printf_i+0x102>
 80053ea:	680e      	ldr	r6, [r1, #0]
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053f2:	bf18      	it	ne
 80053f4:	b236      	sxthne	r6, r6
 80053f6:	e7ef      	b.n	80053d8 <_printf_i+0xbc>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	6820      	ldr	r0, [r4, #0]
 80053fc:	1d19      	adds	r1, r3, #4
 80053fe:	6029      	str	r1, [r5, #0]
 8005400:	0601      	lsls	r1, r0, #24
 8005402:	d501      	bpl.n	8005408 <_printf_i+0xec>
 8005404:	681e      	ldr	r6, [r3, #0]
 8005406:	e002      	b.n	800540e <_printf_i+0xf2>
 8005408:	0646      	lsls	r6, r0, #25
 800540a:	d5fb      	bpl.n	8005404 <_printf_i+0xe8>
 800540c:	881e      	ldrh	r6, [r3, #0]
 800540e:	4854      	ldr	r0, [pc, #336]	; (8005560 <_printf_i+0x244>)
 8005410:	2f6f      	cmp	r7, #111	; 0x6f
 8005412:	bf0c      	ite	eq
 8005414:	2308      	moveq	r3, #8
 8005416:	230a      	movne	r3, #10
 8005418:	2100      	movs	r1, #0
 800541a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800541e:	6865      	ldr	r5, [r4, #4]
 8005420:	60a5      	str	r5, [r4, #8]
 8005422:	2d00      	cmp	r5, #0
 8005424:	bfa2      	ittt	ge
 8005426:	6821      	ldrge	r1, [r4, #0]
 8005428:	f021 0104 	bicge.w	r1, r1, #4
 800542c:	6021      	strge	r1, [r4, #0]
 800542e:	b90e      	cbnz	r6, 8005434 <_printf_i+0x118>
 8005430:	2d00      	cmp	r5, #0
 8005432:	d04d      	beq.n	80054d0 <_printf_i+0x1b4>
 8005434:	4615      	mov	r5, r2
 8005436:	fbb6 f1f3 	udiv	r1, r6, r3
 800543a:	fb03 6711 	mls	r7, r3, r1, r6
 800543e:	5dc7      	ldrb	r7, [r0, r7]
 8005440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005444:	4637      	mov	r7, r6
 8005446:	42bb      	cmp	r3, r7
 8005448:	460e      	mov	r6, r1
 800544a:	d9f4      	bls.n	8005436 <_printf_i+0x11a>
 800544c:	2b08      	cmp	r3, #8
 800544e:	d10b      	bne.n	8005468 <_printf_i+0x14c>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	07de      	lsls	r6, r3, #31
 8005454:	d508      	bpl.n	8005468 <_printf_i+0x14c>
 8005456:	6923      	ldr	r3, [r4, #16]
 8005458:	6861      	ldr	r1, [r4, #4]
 800545a:	4299      	cmp	r1, r3
 800545c:	bfde      	ittt	le
 800545e:	2330      	movle	r3, #48	; 0x30
 8005460:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005464:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005468:	1b52      	subs	r2, r2, r5
 800546a:	6122      	str	r2, [r4, #16]
 800546c:	f8cd a000 	str.w	sl, [sp]
 8005470:	464b      	mov	r3, r9
 8005472:	aa03      	add	r2, sp, #12
 8005474:	4621      	mov	r1, r4
 8005476:	4640      	mov	r0, r8
 8005478:	f7ff fee2 	bl	8005240 <_printf_common>
 800547c:	3001      	adds	r0, #1
 800547e:	d14c      	bne.n	800551a <_printf_i+0x1fe>
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	b004      	add	sp, #16
 8005486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548a:	4835      	ldr	r0, [pc, #212]	; (8005560 <_printf_i+0x244>)
 800548c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005490:	6829      	ldr	r1, [r5, #0]
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	f851 6b04 	ldr.w	r6, [r1], #4
 8005498:	6029      	str	r1, [r5, #0]
 800549a:	061d      	lsls	r5, r3, #24
 800549c:	d514      	bpl.n	80054c8 <_printf_i+0x1ac>
 800549e:	07df      	lsls	r7, r3, #31
 80054a0:	bf44      	itt	mi
 80054a2:	f043 0320 	orrmi.w	r3, r3, #32
 80054a6:	6023      	strmi	r3, [r4, #0]
 80054a8:	b91e      	cbnz	r6, 80054b2 <_printf_i+0x196>
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	f023 0320 	bic.w	r3, r3, #32
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	2310      	movs	r3, #16
 80054b4:	e7b0      	b.n	8005418 <_printf_i+0xfc>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	f043 0320 	orr.w	r3, r3, #32
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	2378      	movs	r3, #120	; 0x78
 80054c0:	4828      	ldr	r0, [pc, #160]	; (8005564 <_printf_i+0x248>)
 80054c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054c6:	e7e3      	b.n	8005490 <_printf_i+0x174>
 80054c8:	0659      	lsls	r1, r3, #25
 80054ca:	bf48      	it	mi
 80054cc:	b2b6      	uxthmi	r6, r6
 80054ce:	e7e6      	b.n	800549e <_printf_i+0x182>
 80054d0:	4615      	mov	r5, r2
 80054d2:	e7bb      	b.n	800544c <_printf_i+0x130>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	6826      	ldr	r6, [r4, #0]
 80054d8:	6961      	ldr	r1, [r4, #20]
 80054da:	1d18      	adds	r0, r3, #4
 80054dc:	6028      	str	r0, [r5, #0]
 80054de:	0635      	lsls	r5, r6, #24
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	d501      	bpl.n	80054e8 <_printf_i+0x1cc>
 80054e4:	6019      	str	r1, [r3, #0]
 80054e6:	e002      	b.n	80054ee <_printf_i+0x1d2>
 80054e8:	0670      	lsls	r0, r6, #25
 80054ea:	d5fb      	bpl.n	80054e4 <_printf_i+0x1c8>
 80054ec:	8019      	strh	r1, [r3, #0]
 80054ee:	2300      	movs	r3, #0
 80054f0:	6123      	str	r3, [r4, #16]
 80054f2:	4615      	mov	r5, r2
 80054f4:	e7ba      	b.n	800546c <_printf_i+0x150>
 80054f6:	682b      	ldr	r3, [r5, #0]
 80054f8:	1d1a      	adds	r2, r3, #4
 80054fa:	602a      	str	r2, [r5, #0]
 80054fc:	681d      	ldr	r5, [r3, #0]
 80054fe:	6862      	ldr	r2, [r4, #4]
 8005500:	2100      	movs	r1, #0
 8005502:	4628      	mov	r0, r5
 8005504:	f7fa fe64 	bl	80001d0 <memchr>
 8005508:	b108      	cbz	r0, 800550e <_printf_i+0x1f2>
 800550a:	1b40      	subs	r0, r0, r5
 800550c:	6060      	str	r0, [r4, #4]
 800550e:	6863      	ldr	r3, [r4, #4]
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	2300      	movs	r3, #0
 8005514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005518:	e7a8      	b.n	800546c <_printf_i+0x150>
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	462a      	mov	r2, r5
 800551e:	4649      	mov	r1, r9
 8005520:	4640      	mov	r0, r8
 8005522:	47d0      	blx	sl
 8005524:	3001      	adds	r0, #1
 8005526:	d0ab      	beq.n	8005480 <_printf_i+0x164>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	079b      	lsls	r3, r3, #30
 800552c:	d413      	bmi.n	8005556 <_printf_i+0x23a>
 800552e:	68e0      	ldr	r0, [r4, #12]
 8005530:	9b03      	ldr	r3, [sp, #12]
 8005532:	4298      	cmp	r0, r3
 8005534:	bfb8      	it	lt
 8005536:	4618      	movlt	r0, r3
 8005538:	e7a4      	b.n	8005484 <_printf_i+0x168>
 800553a:	2301      	movs	r3, #1
 800553c:	4632      	mov	r2, r6
 800553e:	4649      	mov	r1, r9
 8005540:	4640      	mov	r0, r8
 8005542:	47d0      	blx	sl
 8005544:	3001      	adds	r0, #1
 8005546:	d09b      	beq.n	8005480 <_printf_i+0x164>
 8005548:	3501      	adds	r5, #1
 800554a:	68e3      	ldr	r3, [r4, #12]
 800554c:	9903      	ldr	r1, [sp, #12]
 800554e:	1a5b      	subs	r3, r3, r1
 8005550:	42ab      	cmp	r3, r5
 8005552:	dcf2      	bgt.n	800553a <_printf_i+0x21e>
 8005554:	e7eb      	b.n	800552e <_printf_i+0x212>
 8005556:	2500      	movs	r5, #0
 8005558:	f104 0619 	add.w	r6, r4, #25
 800555c:	e7f5      	b.n	800554a <_printf_i+0x22e>
 800555e:	bf00      	nop
 8005560:	080097e9 	.word	0x080097e9
 8005564:	080097fa 	.word	0x080097fa

08005568 <_free_r>:
 8005568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800556a:	2900      	cmp	r1, #0
 800556c:	d044      	beq.n	80055f8 <_free_r+0x90>
 800556e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005572:	9001      	str	r0, [sp, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f1a1 0404 	sub.w	r4, r1, #4
 800557a:	bfb8      	it	lt
 800557c:	18e4      	addlt	r4, r4, r3
 800557e:	f000 f913 	bl	80057a8 <__malloc_lock>
 8005582:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <_free_r+0x94>)
 8005584:	9801      	ldr	r0, [sp, #4]
 8005586:	6813      	ldr	r3, [r2, #0]
 8005588:	b933      	cbnz	r3, 8005598 <_free_r+0x30>
 800558a:	6063      	str	r3, [r4, #4]
 800558c:	6014      	str	r4, [r2, #0]
 800558e:	b003      	add	sp, #12
 8005590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005594:	f000 b90e 	b.w	80057b4 <__malloc_unlock>
 8005598:	42a3      	cmp	r3, r4
 800559a:	d908      	bls.n	80055ae <_free_r+0x46>
 800559c:	6825      	ldr	r5, [r4, #0]
 800559e:	1961      	adds	r1, r4, r5
 80055a0:	428b      	cmp	r3, r1
 80055a2:	bf01      	itttt	eq
 80055a4:	6819      	ldreq	r1, [r3, #0]
 80055a6:	685b      	ldreq	r3, [r3, #4]
 80055a8:	1949      	addeq	r1, r1, r5
 80055aa:	6021      	streq	r1, [r4, #0]
 80055ac:	e7ed      	b.n	800558a <_free_r+0x22>
 80055ae:	461a      	mov	r2, r3
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	b10b      	cbz	r3, 80055b8 <_free_r+0x50>
 80055b4:	42a3      	cmp	r3, r4
 80055b6:	d9fa      	bls.n	80055ae <_free_r+0x46>
 80055b8:	6811      	ldr	r1, [r2, #0]
 80055ba:	1855      	adds	r5, r2, r1
 80055bc:	42a5      	cmp	r5, r4
 80055be:	d10b      	bne.n	80055d8 <_free_r+0x70>
 80055c0:	6824      	ldr	r4, [r4, #0]
 80055c2:	4421      	add	r1, r4
 80055c4:	1854      	adds	r4, r2, r1
 80055c6:	42a3      	cmp	r3, r4
 80055c8:	6011      	str	r1, [r2, #0]
 80055ca:	d1e0      	bne.n	800558e <_free_r+0x26>
 80055cc:	681c      	ldr	r4, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	6053      	str	r3, [r2, #4]
 80055d2:	4421      	add	r1, r4
 80055d4:	6011      	str	r1, [r2, #0]
 80055d6:	e7da      	b.n	800558e <_free_r+0x26>
 80055d8:	d902      	bls.n	80055e0 <_free_r+0x78>
 80055da:	230c      	movs	r3, #12
 80055dc:	6003      	str	r3, [r0, #0]
 80055de:	e7d6      	b.n	800558e <_free_r+0x26>
 80055e0:	6825      	ldr	r5, [r4, #0]
 80055e2:	1961      	adds	r1, r4, r5
 80055e4:	428b      	cmp	r3, r1
 80055e6:	bf04      	itt	eq
 80055e8:	6819      	ldreq	r1, [r3, #0]
 80055ea:	685b      	ldreq	r3, [r3, #4]
 80055ec:	6063      	str	r3, [r4, #4]
 80055ee:	bf04      	itt	eq
 80055f0:	1949      	addeq	r1, r1, r5
 80055f2:	6021      	streq	r1, [r4, #0]
 80055f4:	6054      	str	r4, [r2, #4]
 80055f6:	e7ca      	b.n	800558e <_free_r+0x26>
 80055f8:	b003      	add	sp, #12
 80055fa:	bd30      	pop	{r4, r5, pc}
 80055fc:	200005f0 	.word	0x200005f0

08005600 <sbrk_aligned>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	4e0e      	ldr	r6, [pc, #56]	; (800563c <sbrk_aligned+0x3c>)
 8005604:	460c      	mov	r4, r1
 8005606:	6831      	ldr	r1, [r6, #0]
 8005608:	4605      	mov	r5, r0
 800560a:	b911      	cbnz	r1, 8005612 <sbrk_aligned+0x12>
 800560c:	f000 f8bc 	bl	8005788 <_sbrk_r>
 8005610:	6030      	str	r0, [r6, #0]
 8005612:	4621      	mov	r1, r4
 8005614:	4628      	mov	r0, r5
 8005616:	f000 f8b7 	bl	8005788 <_sbrk_r>
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	d00a      	beq.n	8005634 <sbrk_aligned+0x34>
 800561e:	1cc4      	adds	r4, r0, #3
 8005620:	f024 0403 	bic.w	r4, r4, #3
 8005624:	42a0      	cmp	r0, r4
 8005626:	d007      	beq.n	8005638 <sbrk_aligned+0x38>
 8005628:	1a21      	subs	r1, r4, r0
 800562a:	4628      	mov	r0, r5
 800562c:	f000 f8ac 	bl	8005788 <_sbrk_r>
 8005630:	3001      	adds	r0, #1
 8005632:	d101      	bne.n	8005638 <sbrk_aligned+0x38>
 8005634:	f04f 34ff 	mov.w	r4, #4294967295
 8005638:	4620      	mov	r0, r4
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	200005f4 	.word	0x200005f4

08005640 <_malloc_r>:
 8005640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005644:	1ccd      	adds	r5, r1, #3
 8005646:	f025 0503 	bic.w	r5, r5, #3
 800564a:	3508      	adds	r5, #8
 800564c:	2d0c      	cmp	r5, #12
 800564e:	bf38      	it	cc
 8005650:	250c      	movcc	r5, #12
 8005652:	2d00      	cmp	r5, #0
 8005654:	4607      	mov	r7, r0
 8005656:	db01      	blt.n	800565c <_malloc_r+0x1c>
 8005658:	42a9      	cmp	r1, r5
 800565a:	d905      	bls.n	8005668 <_malloc_r+0x28>
 800565c:	230c      	movs	r3, #12
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	2600      	movs	r6, #0
 8005662:	4630      	mov	r0, r6
 8005664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005668:	4e2e      	ldr	r6, [pc, #184]	; (8005724 <_malloc_r+0xe4>)
 800566a:	f000 f89d 	bl	80057a8 <__malloc_lock>
 800566e:	6833      	ldr	r3, [r6, #0]
 8005670:	461c      	mov	r4, r3
 8005672:	bb34      	cbnz	r4, 80056c2 <_malloc_r+0x82>
 8005674:	4629      	mov	r1, r5
 8005676:	4638      	mov	r0, r7
 8005678:	f7ff ffc2 	bl	8005600 <sbrk_aligned>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	4604      	mov	r4, r0
 8005680:	d14d      	bne.n	800571e <_malloc_r+0xde>
 8005682:	6834      	ldr	r4, [r6, #0]
 8005684:	4626      	mov	r6, r4
 8005686:	2e00      	cmp	r6, #0
 8005688:	d140      	bne.n	800570c <_malloc_r+0xcc>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	4631      	mov	r1, r6
 800568e:	4638      	mov	r0, r7
 8005690:	eb04 0803 	add.w	r8, r4, r3
 8005694:	f000 f878 	bl	8005788 <_sbrk_r>
 8005698:	4580      	cmp	r8, r0
 800569a:	d13a      	bne.n	8005712 <_malloc_r+0xd2>
 800569c:	6821      	ldr	r1, [r4, #0]
 800569e:	3503      	adds	r5, #3
 80056a0:	1a6d      	subs	r5, r5, r1
 80056a2:	f025 0503 	bic.w	r5, r5, #3
 80056a6:	3508      	adds	r5, #8
 80056a8:	2d0c      	cmp	r5, #12
 80056aa:	bf38      	it	cc
 80056ac:	250c      	movcc	r5, #12
 80056ae:	4629      	mov	r1, r5
 80056b0:	4638      	mov	r0, r7
 80056b2:	f7ff ffa5 	bl	8005600 <sbrk_aligned>
 80056b6:	3001      	adds	r0, #1
 80056b8:	d02b      	beq.n	8005712 <_malloc_r+0xd2>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	442b      	add	r3, r5
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	e00e      	b.n	80056e0 <_malloc_r+0xa0>
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	1b52      	subs	r2, r2, r5
 80056c6:	d41e      	bmi.n	8005706 <_malloc_r+0xc6>
 80056c8:	2a0b      	cmp	r2, #11
 80056ca:	d916      	bls.n	80056fa <_malloc_r+0xba>
 80056cc:	1961      	adds	r1, r4, r5
 80056ce:	42a3      	cmp	r3, r4
 80056d0:	6025      	str	r5, [r4, #0]
 80056d2:	bf18      	it	ne
 80056d4:	6059      	strne	r1, [r3, #4]
 80056d6:	6863      	ldr	r3, [r4, #4]
 80056d8:	bf08      	it	eq
 80056da:	6031      	streq	r1, [r6, #0]
 80056dc:	5162      	str	r2, [r4, r5]
 80056de:	604b      	str	r3, [r1, #4]
 80056e0:	4638      	mov	r0, r7
 80056e2:	f104 060b 	add.w	r6, r4, #11
 80056e6:	f000 f865 	bl	80057b4 <__malloc_unlock>
 80056ea:	f026 0607 	bic.w	r6, r6, #7
 80056ee:	1d23      	adds	r3, r4, #4
 80056f0:	1af2      	subs	r2, r6, r3
 80056f2:	d0b6      	beq.n	8005662 <_malloc_r+0x22>
 80056f4:	1b9b      	subs	r3, r3, r6
 80056f6:	50a3      	str	r3, [r4, r2]
 80056f8:	e7b3      	b.n	8005662 <_malloc_r+0x22>
 80056fa:	6862      	ldr	r2, [r4, #4]
 80056fc:	42a3      	cmp	r3, r4
 80056fe:	bf0c      	ite	eq
 8005700:	6032      	streq	r2, [r6, #0]
 8005702:	605a      	strne	r2, [r3, #4]
 8005704:	e7ec      	b.n	80056e0 <_malloc_r+0xa0>
 8005706:	4623      	mov	r3, r4
 8005708:	6864      	ldr	r4, [r4, #4]
 800570a:	e7b2      	b.n	8005672 <_malloc_r+0x32>
 800570c:	4634      	mov	r4, r6
 800570e:	6876      	ldr	r6, [r6, #4]
 8005710:	e7b9      	b.n	8005686 <_malloc_r+0x46>
 8005712:	230c      	movs	r3, #12
 8005714:	603b      	str	r3, [r7, #0]
 8005716:	4638      	mov	r0, r7
 8005718:	f000 f84c 	bl	80057b4 <__malloc_unlock>
 800571c:	e7a1      	b.n	8005662 <_malloc_r+0x22>
 800571e:	6025      	str	r5, [r4, #0]
 8005720:	e7de      	b.n	80056e0 <_malloc_r+0xa0>
 8005722:	bf00      	nop
 8005724:	200005f0 	.word	0x200005f0

08005728 <_realloc_r>:
 8005728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572c:	4680      	mov	r8, r0
 800572e:	4614      	mov	r4, r2
 8005730:	460e      	mov	r6, r1
 8005732:	b921      	cbnz	r1, 800573e <_realloc_r+0x16>
 8005734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005738:	4611      	mov	r1, r2
 800573a:	f7ff bf81 	b.w	8005640 <_malloc_r>
 800573e:	b92a      	cbnz	r2, 800574c <_realloc_r+0x24>
 8005740:	f7ff ff12 	bl	8005568 <_free_r>
 8005744:	4625      	mov	r5, r4
 8005746:	4628      	mov	r0, r5
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	f000 f838 	bl	80057c0 <_malloc_usable_size_r>
 8005750:	4284      	cmp	r4, r0
 8005752:	4607      	mov	r7, r0
 8005754:	d802      	bhi.n	800575c <_realloc_r+0x34>
 8005756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800575a:	d812      	bhi.n	8005782 <_realloc_r+0x5a>
 800575c:	4621      	mov	r1, r4
 800575e:	4640      	mov	r0, r8
 8005760:	f7ff ff6e 	bl	8005640 <_malloc_r>
 8005764:	4605      	mov	r5, r0
 8005766:	2800      	cmp	r0, #0
 8005768:	d0ed      	beq.n	8005746 <_realloc_r+0x1e>
 800576a:	42bc      	cmp	r4, r7
 800576c:	4622      	mov	r2, r4
 800576e:	4631      	mov	r1, r6
 8005770:	bf28      	it	cs
 8005772:	463a      	movcs	r2, r7
 8005774:	f7ff fba4 	bl	8004ec0 <memcpy>
 8005778:	4631      	mov	r1, r6
 800577a:	4640      	mov	r0, r8
 800577c:	f7ff fef4 	bl	8005568 <_free_r>
 8005780:	e7e1      	b.n	8005746 <_realloc_r+0x1e>
 8005782:	4635      	mov	r5, r6
 8005784:	e7df      	b.n	8005746 <_realloc_r+0x1e>
	...

08005788 <_sbrk_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4d06      	ldr	r5, [pc, #24]	; (80057a4 <_sbrk_r+0x1c>)
 800578c:	2300      	movs	r3, #0
 800578e:	4604      	mov	r4, r0
 8005790:	4608      	mov	r0, r1
 8005792:	602b      	str	r3, [r5, #0]
 8005794:	f7fb fd3e 	bl	8001214 <_sbrk>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_sbrk_r+0x1a>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_sbrk_r+0x1a>
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	200005f8 	.word	0x200005f8

080057a8 <__malloc_lock>:
 80057a8:	4801      	ldr	r0, [pc, #4]	; (80057b0 <__malloc_lock+0x8>)
 80057aa:	f000 b811 	b.w	80057d0 <__retarget_lock_acquire_recursive>
 80057ae:	bf00      	nop
 80057b0:	200005fc 	.word	0x200005fc

080057b4 <__malloc_unlock>:
 80057b4:	4801      	ldr	r0, [pc, #4]	; (80057bc <__malloc_unlock+0x8>)
 80057b6:	f000 b80c 	b.w	80057d2 <__retarget_lock_release_recursive>
 80057ba:	bf00      	nop
 80057bc:	200005fc 	.word	0x200005fc

080057c0 <_malloc_usable_size_r>:
 80057c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c4:	1f18      	subs	r0, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bfbc      	itt	lt
 80057ca:	580b      	ldrlt	r3, [r1, r0]
 80057cc:	18c0      	addlt	r0, r0, r3
 80057ce:	4770      	bx	lr

080057d0 <__retarget_lock_acquire_recursive>:
 80057d0:	4770      	bx	lr

080057d2 <__retarget_lock_release_recursive>:
 80057d2:	4770      	bx	lr
 80057d4:	0000      	movs	r0, r0
	...

080057d8 <cos>:
 80057d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057da:	ec53 2b10 	vmov	r2, r3, d0
 80057de:	4826      	ldr	r0, [pc, #152]	; (8005878 <cos+0xa0>)
 80057e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80057e4:	4281      	cmp	r1, r0
 80057e6:	dc06      	bgt.n	80057f6 <cos+0x1e>
 80057e8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005870 <cos+0x98>
 80057ec:	b005      	add	sp, #20
 80057ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f2:	f000 baa9 	b.w	8005d48 <__kernel_cos>
 80057f6:	4821      	ldr	r0, [pc, #132]	; (800587c <cos+0xa4>)
 80057f8:	4281      	cmp	r1, r0
 80057fa:	dd09      	ble.n	8005810 <cos+0x38>
 80057fc:	ee10 0a10 	vmov	r0, s0
 8005800:	4619      	mov	r1, r3
 8005802:	f7fa fd39 	bl	8000278 <__aeabi_dsub>
 8005806:	ec41 0b10 	vmov	d0, r0, r1
 800580a:	b005      	add	sp, #20
 800580c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005810:	4668      	mov	r0, sp
 8005812:	f000 f88d 	bl	8005930 <__ieee754_rem_pio2>
 8005816:	f000 0003 	and.w	r0, r0, #3
 800581a:	2801      	cmp	r0, #1
 800581c:	d00b      	beq.n	8005836 <cos+0x5e>
 800581e:	2802      	cmp	r0, #2
 8005820:	d016      	beq.n	8005850 <cos+0x78>
 8005822:	b9e0      	cbnz	r0, 800585e <cos+0x86>
 8005824:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005828:	ed9d 0b00 	vldr	d0, [sp]
 800582c:	f000 fa8c 	bl	8005d48 <__kernel_cos>
 8005830:	ec51 0b10 	vmov	r0, r1, d0
 8005834:	e7e7      	b.n	8005806 <cos+0x2e>
 8005836:	ed9d 1b02 	vldr	d1, [sp, #8]
 800583a:	ed9d 0b00 	vldr	d0, [sp]
 800583e:	f000 fe9b 	bl	8006578 <__kernel_sin>
 8005842:	ec53 2b10 	vmov	r2, r3, d0
 8005846:	ee10 0a10 	vmov	r0, s0
 800584a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800584e:	e7da      	b.n	8005806 <cos+0x2e>
 8005850:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005854:	ed9d 0b00 	vldr	d0, [sp]
 8005858:	f000 fa76 	bl	8005d48 <__kernel_cos>
 800585c:	e7f1      	b.n	8005842 <cos+0x6a>
 800585e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005862:	ed9d 0b00 	vldr	d0, [sp]
 8005866:	2001      	movs	r0, #1
 8005868:	f000 fe86 	bl	8006578 <__kernel_sin>
 800586c:	e7e0      	b.n	8005830 <cos+0x58>
 800586e:	bf00      	nop
	...
 8005878:	3fe921fb 	.word	0x3fe921fb
 800587c:	7fefffff 	.word	0x7fefffff

08005880 <sin>:
 8005880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005882:	ec53 2b10 	vmov	r2, r3, d0
 8005886:	4828      	ldr	r0, [pc, #160]	; (8005928 <sin+0xa8>)
 8005888:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800588c:	4281      	cmp	r1, r0
 800588e:	dc07      	bgt.n	80058a0 <sin+0x20>
 8005890:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005920 <sin+0xa0>
 8005894:	2000      	movs	r0, #0
 8005896:	b005      	add	sp, #20
 8005898:	f85d eb04 	ldr.w	lr, [sp], #4
 800589c:	f000 be6c 	b.w	8006578 <__kernel_sin>
 80058a0:	4822      	ldr	r0, [pc, #136]	; (800592c <sin+0xac>)
 80058a2:	4281      	cmp	r1, r0
 80058a4:	dd09      	ble.n	80058ba <sin+0x3a>
 80058a6:	ee10 0a10 	vmov	r0, s0
 80058aa:	4619      	mov	r1, r3
 80058ac:	f7fa fce4 	bl	8000278 <__aeabi_dsub>
 80058b0:	ec41 0b10 	vmov	d0, r0, r1
 80058b4:	b005      	add	sp, #20
 80058b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80058ba:	4668      	mov	r0, sp
 80058bc:	f000 f838 	bl	8005930 <__ieee754_rem_pio2>
 80058c0:	f000 0003 	and.w	r0, r0, #3
 80058c4:	2801      	cmp	r0, #1
 80058c6:	d00c      	beq.n	80058e2 <sin+0x62>
 80058c8:	2802      	cmp	r0, #2
 80058ca:	d011      	beq.n	80058f0 <sin+0x70>
 80058cc:	b9f0      	cbnz	r0, 800590c <sin+0x8c>
 80058ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058d2:	ed9d 0b00 	vldr	d0, [sp]
 80058d6:	2001      	movs	r0, #1
 80058d8:	f000 fe4e 	bl	8006578 <__kernel_sin>
 80058dc:	ec51 0b10 	vmov	r0, r1, d0
 80058e0:	e7e6      	b.n	80058b0 <sin+0x30>
 80058e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058e6:	ed9d 0b00 	vldr	d0, [sp]
 80058ea:	f000 fa2d 	bl	8005d48 <__kernel_cos>
 80058ee:	e7f5      	b.n	80058dc <sin+0x5c>
 80058f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058f4:	ed9d 0b00 	vldr	d0, [sp]
 80058f8:	2001      	movs	r0, #1
 80058fa:	f000 fe3d 	bl	8006578 <__kernel_sin>
 80058fe:	ec53 2b10 	vmov	r2, r3, d0
 8005902:	ee10 0a10 	vmov	r0, s0
 8005906:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800590a:	e7d1      	b.n	80058b0 <sin+0x30>
 800590c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005910:	ed9d 0b00 	vldr	d0, [sp]
 8005914:	f000 fa18 	bl	8005d48 <__kernel_cos>
 8005918:	e7f1      	b.n	80058fe <sin+0x7e>
 800591a:	bf00      	nop
 800591c:	f3af 8000 	nop.w
	...
 8005928:	3fe921fb 	.word	0x3fe921fb
 800592c:	7fefffff 	.word	0x7fefffff

08005930 <__ieee754_rem_pio2>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	ed2d 8b02 	vpush	{d8}
 8005938:	ec55 4b10 	vmov	r4, r5, d0
 800593c:	4bca      	ldr	r3, [pc, #808]	; (8005c68 <__ieee754_rem_pio2+0x338>)
 800593e:	b08b      	sub	sp, #44	; 0x2c
 8005940:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005944:	4598      	cmp	r8, r3
 8005946:	4682      	mov	sl, r0
 8005948:	9502      	str	r5, [sp, #8]
 800594a:	dc08      	bgt.n	800595e <__ieee754_rem_pio2+0x2e>
 800594c:	2200      	movs	r2, #0
 800594e:	2300      	movs	r3, #0
 8005950:	ed80 0b00 	vstr	d0, [r0]
 8005954:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005958:	f04f 0b00 	mov.w	fp, #0
 800595c:	e028      	b.n	80059b0 <__ieee754_rem_pio2+0x80>
 800595e:	4bc3      	ldr	r3, [pc, #780]	; (8005c6c <__ieee754_rem_pio2+0x33c>)
 8005960:	4598      	cmp	r8, r3
 8005962:	dc78      	bgt.n	8005a56 <__ieee754_rem_pio2+0x126>
 8005964:	9b02      	ldr	r3, [sp, #8]
 8005966:	4ec2      	ldr	r6, [pc, #776]	; (8005c70 <__ieee754_rem_pio2+0x340>)
 8005968:	2b00      	cmp	r3, #0
 800596a:	ee10 0a10 	vmov	r0, s0
 800596e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005c30 <__ieee754_rem_pio2+0x300>)
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	4629      	mov	r1, r5
 8005976:	dd39      	ble.n	80059ec <__ieee754_rem_pio2+0xbc>
 8005978:	f7fa fc7e 	bl	8000278 <__aeabi_dsub>
 800597c:	45b0      	cmp	r8, r6
 800597e:	4604      	mov	r4, r0
 8005980:	460d      	mov	r5, r1
 8005982:	d01b      	beq.n	80059bc <__ieee754_rem_pio2+0x8c>
 8005984:	a3ac      	add	r3, pc, #688	; (adr r3, 8005c38 <__ieee754_rem_pio2+0x308>)
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f7fa fc75 	bl	8000278 <__aeabi_dsub>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	e9ca 2300 	strd	r2, r3, [sl]
 8005996:	4620      	mov	r0, r4
 8005998:	4629      	mov	r1, r5
 800599a:	f7fa fc6d 	bl	8000278 <__aeabi_dsub>
 800599e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005c38 <__ieee754_rem_pio2+0x308>)
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f7fa fc68 	bl	8000278 <__aeabi_dsub>
 80059a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80059ac:	f04f 0b01 	mov.w	fp, #1
 80059b0:	4658      	mov	r0, fp
 80059b2:	b00b      	add	sp, #44	; 0x2c
 80059b4:	ecbd 8b02 	vpop	{d8}
 80059b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8005c40 <__ieee754_rem_pio2+0x310>)
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f7fa fc59 	bl	8000278 <__aeabi_dsub>
 80059c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x318>)
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	4604      	mov	r4, r0
 80059ce:	460d      	mov	r5, r1
 80059d0:	f7fa fc52 	bl	8000278 <__aeabi_dsub>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	e9ca 2300 	strd	r2, r3, [sl]
 80059dc:	4620      	mov	r0, r4
 80059de:	4629      	mov	r1, r5
 80059e0:	f7fa fc4a 	bl	8000278 <__aeabi_dsub>
 80059e4:	a398      	add	r3, pc, #608	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x318>)
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	e7db      	b.n	80059a4 <__ieee754_rem_pio2+0x74>
 80059ec:	f7fa fc46 	bl	800027c <__adddf3>
 80059f0:	45b0      	cmp	r8, r6
 80059f2:	4604      	mov	r4, r0
 80059f4:	460d      	mov	r5, r1
 80059f6:	d016      	beq.n	8005a26 <__ieee754_rem_pio2+0xf6>
 80059f8:	a38f      	add	r3, pc, #572	; (adr r3, 8005c38 <__ieee754_rem_pio2+0x308>)
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	f7fa fc3d 	bl	800027c <__adddf3>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	e9ca 2300 	strd	r2, r3, [sl]
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	f7fa fc33 	bl	8000278 <__aeabi_dsub>
 8005a12:	a389      	add	r3, pc, #548	; (adr r3, 8005c38 <__ieee754_rem_pio2+0x308>)
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f7fa fc30 	bl	800027c <__adddf3>
 8005a1c:	f04f 3bff 	mov.w	fp, #4294967295
 8005a20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a24:	e7c4      	b.n	80059b0 <__ieee754_rem_pio2+0x80>
 8005a26:	a386      	add	r3, pc, #536	; (adr r3, 8005c40 <__ieee754_rem_pio2+0x310>)
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	f7fa fc26 	bl	800027c <__adddf3>
 8005a30:	a385      	add	r3, pc, #532	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x318>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	4604      	mov	r4, r0
 8005a38:	460d      	mov	r5, r1
 8005a3a:	f7fa fc1f 	bl	800027c <__adddf3>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	e9ca 2300 	strd	r2, r3, [sl]
 8005a46:	4620      	mov	r0, r4
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f7fa fc15 	bl	8000278 <__aeabi_dsub>
 8005a4e:	a37e      	add	r3, pc, #504	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x318>)
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	e7e0      	b.n	8005a18 <__ieee754_rem_pio2+0xe8>
 8005a56:	4b87      	ldr	r3, [pc, #540]	; (8005c74 <__ieee754_rem_pio2+0x344>)
 8005a58:	4598      	cmp	r8, r3
 8005a5a:	f300 80d9 	bgt.w	8005c10 <__ieee754_rem_pio2+0x2e0>
 8005a5e:	f000 fe49 	bl	80066f4 <fabs>
 8005a62:	ec55 4b10 	vmov	r4, r5, d0
 8005a66:	ee10 0a10 	vmov	r0, s0
 8005a6a:	a379      	add	r3, pc, #484	; (adr r3, 8005c50 <__ieee754_rem_pio2+0x320>)
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	4629      	mov	r1, r5
 8005a72:	f7fa fdb9 	bl	80005e8 <__aeabi_dmul>
 8005a76:	4b80      	ldr	r3, [pc, #512]	; (8005c78 <__ieee754_rem_pio2+0x348>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f7fa fbff 	bl	800027c <__adddf3>
 8005a7e:	f7fb f84d 	bl	8000b1c <__aeabi_d2iz>
 8005a82:	4683      	mov	fp, r0
 8005a84:	f7fa fd46 	bl	8000514 <__aeabi_i2d>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	ec43 2b18 	vmov	d8, r2, r3
 8005a90:	a367      	add	r3, pc, #412	; (adr r3, 8005c30 <__ieee754_rem_pio2+0x300>)
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	f7fa fda7 	bl	80005e8 <__aeabi_dmul>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	f7fa fbe9 	bl	8000278 <__aeabi_dsub>
 8005aa6:	a364      	add	r3, pc, #400	; (adr r3, 8005c38 <__ieee754_rem_pio2+0x308>)
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	4606      	mov	r6, r0
 8005aae:	460f      	mov	r7, r1
 8005ab0:	ec51 0b18 	vmov	r0, r1, d8
 8005ab4:	f7fa fd98 	bl	80005e8 <__aeabi_dmul>
 8005ab8:	f1bb 0f1f 	cmp.w	fp, #31
 8005abc:	4604      	mov	r4, r0
 8005abe:	460d      	mov	r5, r1
 8005ac0:	dc0d      	bgt.n	8005ade <__ieee754_rem_pio2+0x1ae>
 8005ac2:	4b6e      	ldr	r3, [pc, #440]	; (8005c7c <__ieee754_rem_pio2+0x34c>)
 8005ac4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005acc:	4543      	cmp	r3, r8
 8005ace:	d006      	beq.n	8005ade <__ieee754_rem_pio2+0x1ae>
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	462b      	mov	r3, r5
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	4639      	mov	r1, r7
 8005ad8:	f7fa fbce 	bl	8000278 <__aeabi_dsub>
 8005adc:	e00f      	b.n	8005afe <__ieee754_rem_pio2+0x1ce>
 8005ade:	462b      	mov	r3, r5
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	f7fa fbc7 	bl	8000278 <__aeabi_dsub>
 8005aea:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005aee:	9303      	str	r3, [sp, #12]
 8005af0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005af4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005af8:	f1b8 0f10 	cmp.w	r8, #16
 8005afc:	dc02      	bgt.n	8005b04 <__ieee754_rem_pio2+0x1d4>
 8005afe:	e9ca 0100 	strd	r0, r1, [sl]
 8005b02:	e039      	b.n	8005b78 <__ieee754_rem_pio2+0x248>
 8005b04:	a34e      	add	r3, pc, #312	; (adr r3, 8005c40 <__ieee754_rem_pio2+0x310>)
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	ec51 0b18 	vmov	r0, r1, d8
 8005b0e:	f7fa fd6b 	bl	80005e8 <__aeabi_dmul>
 8005b12:	4604      	mov	r4, r0
 8005b14:	460d      	mov	r5, r1
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	f7fa fbab 	bl	8000278 <__aeabi_dsub>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4680      	mov	r8, r0
 8005b28:	4689      	mov	r9, r1
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa fba3 	bl	8000278 <__aeabi_dsub>
 8005b32:	4622      	mov	r2, r4
 8005b34:	462b      	mov	r3, r5
 8005b36:	f7fa fb9f 	bl	8000278 <__aeabi_dsub>
 8005b3a:	a343      	add	r3, pc, #268	; (adr r3, 8005c48 <__ieee754_rem_pio2+0x318>)
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	4604      	mov	r4, r0
 8005b42:	460d      	mov	r5, r1
 8005b44:	ec51 0b18 	vmov	r0, r1, d8
 8005b48:	f7fa fd4e 	bl	80005e8 <__aeabi_dmul>
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	462b      	mov	r3, r5
 8005b50:	f7fa fb92 	bl	8000278 <__aeabi_dsub>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4604      	mov	r4, r0
 8005b5a:	460d      	mov	r5, r1
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	f7fa fb8a 	bl	8000278 <__aeabi_dsub>
 8005b64:	9a03      	ldr	r2, [sp, #12]
 8005b66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b31      	cmp	r3, #49	; 0x31
 8005b6e:	dc24      	bgt.n	8005bba <__ieee754_rem_pio2+0x28a>
 8005b70:	e9ca 0100 	strd	r0, r1, [sl]
 8005b74:	4646      	mov	r6, r8
 8005b76:	464f      	mov	r7, r9
 8005b78:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	4642      	mov	r2, r8
 8005b80:	464b      	mov	r3, r9
 8005b82:	4639      	mov	r1, r7
 8005b84:	f7fa fb78 	bl	8000278 <__aeabi_dsub>
 8005b88:	462b      	mov	r3, r5
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	f7fa fb74 	bl	8000278 <__aeabi_dsub>
 8005b90:	9b02      	ldr	r3, [sp, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b98:	f6bf af0a 	bge.w	80059b0 <__ieee754_rem_pio2+0x80>
 8005b9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005ba0:	f8ca 3004 	str.w	r3, [sl, #4]
 8005ba4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ba8:	f8ca 8000 	str.w	r8, [sl]
 8005bac:	f8ca 0008 	str.w	r0, [sl, #8]
 8005bb0:	f8ca 300c 	str.w	r3, [sl, #12]
 8005bb4:	f1cb 0b00 	rsb	fp, fp, #0
 8005bb8:	e6fa      	b.n	80059b0 <__ieee754_rem_pio2+0x80>
 8005bba:	a327      	add	r3, pc, #156	; (adr r3, 8005c58 <__ieee754_rem_pio2+0x328>)
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	ec51 0b18 	vmov	r0, r1, d8
 8005bc4:	f7fa fd10 	bl	80005e8 <__aeabi_dmul>
 8005bc8:	4604      	mov	r4, r0
 8005bca:	460d      	mov	r5, r1
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	f7fa fb50 	bl	8000278 <__aeabi_dsub>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4606      	mov	r6, r0
 8005bde:	460f      	mov	r7, r1
 8005be0:	4640      	mov	r0, r8
 8005be2:	4649      	mov	r1, r9
 8005be4:	f7fa fb48 	bl	8000278 <__aeabi_dsub>
 8005be8:	4622      	mov	r2, r4
 8005bea:	462b      	mov	r3, r5
 8005bec:	f7fa fb44 	bl	8000278 <__aeabi_dsub>
 8005bf0:	a31b      	add	r3, pc, #108	; (adr r3, 8005c60 <__ieee754_rem_pio2+0x330>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	460d      	mov	r5, r1
 8005bfa:	ec51 0b18 	vmov	r0, r1, d8
 8005bfe:	f7fa fcf3 	bl	80005e8 <__aeabi_dmul>
 8005c02:	4622      	mov	r2, r4
 8005c04:	462b      	mov	r3, r5
 8005c06:	f7fa fb37 	bl	8000278 <__aeabi_dsub>
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	460d      	mov	r5, r1
 8005c0e:	e75f      	b.n	8005ad0 <__ieee754_rem_pio2+0x1a0>
 8005c10:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <__ieee754_rem_pio2+0x350>)
 8005c12:	4598      	cmp	r8, r3
 8005c14:	dd36      	ble.n	8005c84 <__ieee754_rem_pio2+0x354>
 8005c16:	ee10 2a10 	vmov	r2, s0
 8005c1a:	462b      	mov	r3, r5
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	4629      	mov	r1, r5
 8005c20:	f7fa fb2a 	bl	8000278 <__aeabi_dsub>
 8005c24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c28:	e9ca 0100 	strd	r0, r1, [sl]
 8005c2c:	e694      	b.n	8005958 <__ieee754_rem_pio2+0x28>
 8005c2e:	bf00      	nop
 8005c30:	54400000 	.word	0x54400000
 8005c34:	3ff921fb 	.word	0x3ff921fb
 8005c38:	1a626331 	.word	0x1a626331
 8005c3c:	3dd0b461 	.word	0x3dd0b461
 8005c40:	1a600000 	.word	0x1a600000
 8005c44:	3dd0b461 	.word	0x3dd0b461
 8005c48:	2e037073 	.word	0x2e037073
 8005c4c:	3ba3198a 	.word	0x3ba3198a
 8005c50:	6dc9c883 	.word	0x6dc9c883
 8005c54:	3fe45f30 	.word	0x3fe45f30
 8005c58:	2e000000 	.word	0x2e000000
 8005c5c:	3ba3198a 	.word	0x3ba3198a
 8005c60:	252049c1 	.word	0x252049c1
 8005c64:	397b839a 	.word	0x397b839a
 8005c68:	3fe921fb 	.word	0x3fe921fb
 8005c6c:	4002d97b 	.word	0x4002d97b
 8005c70:	3ff921fb 	.word	0x3ff921fb
 8005c74:	413921fb 	.word	0x413921fb
 8005c78:	3fe00000 	.word	0x3fe00000
 8005c7c:	0800980c 	.word	0x0800980c
 8005c80:	7fefffff 	.word	0x7fefffff
 8005c84:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005c88:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005c8c:	ee10 0a10 	vmov	r0, s0
 8005c90:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005c94:	ee10 6a10 	vmov	r6, s0
 8005c98:	460f      	mov	r7, r1
 8005c9a:	f7fa ff3f 	bl	8000b1c <__aeabi_d2iz>
 8005c9e:	f7fa fc39 	bl	8000514 <__aeabi_i2d>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	4639      	mov	r1, r7
 8005caa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cae:	f7fa fae3 	bl	8000278 <__aeabi_dsub>
 8005cb2:	4b23      	ldr	r3, [pc, #140]	; (8005d40 <__ieee754_rem_pio2+0x410>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f7fa fc97 	bl	80005e8 <__aeabi_dmul>
 8005cba:	460f      	mov	r7, r1
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	f7fa ff2d 	bl	8000b1c <__aeabi_d2iz>
 8005cc2:	f7fa fc27 	bl	8000514 <__aeabi_i2d>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4630      	mov	r0, r6
 8005ccc:	4639      	mov	r1, r7
 8005cce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cd2:	f7fa fad1 	bl	8000278 <__aeabi_dsub>
 8005cd6:	4b1a      	ldr	r3, [pc, #104]	; (8005d40 <__ieee754_rem_pio2+0x410>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f7fa fc85 	bl	80005e8 <__aeabi_dmul>
 8005cde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ce2:	ad04      	add	r5, sp, #16
 8005ce4:	f04f 0803 	mov.w	r8, #3
 8005ce8:	46a9      	mov	r9, r5
 8005cea:	2600      	movs	r6, #0
 8005cec:	2700      	movs	r7, #0
 8005cee:	4632      	mov	r2, r6
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005cf6:	46c3      	mov	fp, r8
 8005cf8:	3d08      	subs	r5, #8
 8005cfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cfe:	f7fa fedb 	bl	8000ab8 <__aeabi_dcmpeq>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	d1f3      	bne.n	8005cee <__ieee754_rem_pio2+0x3be>
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <__ieee754_rem_pio2+0x414>)
 8005d08:	9301      	str	r3, [sp, #4]
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	4622      	mov	r2, r4
 8005d10:	465b      	mov	r3, fp
 8005d12:	4651      	mov	r1, sl
 8005d14:	4648      	mov	r0, r9
 8005d16:	f000 f8df 	bl	8005ed8 <__kernel_rem_pio2>
 8005d1a:	9b02      	ldr	r3, [sp, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	4683      	mov	fp, r0
 8005d20:	f6bf ae46 	bge.w	80059b0 <__ieee754_rem_pio2+0x80>
 8005d24:	e9da 2100 	ldrd	r2, r1, [sl]
 8005d28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d2c:	e9ca 2300 	strd	r2, r3, [sl]
 8005d30:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005d34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d38:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005d3c:	e73a      	b.n	8005bb4 <__ieee754_rem_pio2+0x284>
 8005d3e:	bf00      	nop
 8005d40:	41700000 	.word	0x41700000
 8005d44:	0800988c 	.word	0x0800988c

08005d48 <__kernel_cos>:
 8005d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	ec57 6b10 	vmov	r6, r7, d0
 8005d50:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005d54:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005d58:	ed8d 1b00 	vstr	d1, [sp]
 8005d5c:	da07      	bge.n	8005d6e <__kernel_cos+0x26>
 8005d5e:	ee10 0a10 	vmov	r0, s0
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa feda 	bl	8000b1c <__aeabi_d2iz>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	f000 8088 	beq.w	8005e7e <__kernel_cos+0x136>
 8005d6e:	4632      	mov	r2, r6
 8005d70:	463b      	mov	r3, r7
 8005d72:	4630      	mov	r0, r6
 8005d74:	4639      	mov	r1, r7
 8005d76:	f7fa fc37 	bl	80005e8 <__aeabi_dmul>
 8005d7a:	4b51      	ldr	r3, [pc, #324]	; (8005ec0 <__kernel_cos+0x178>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460d      	mov	r5, r1
 8005d82:	f7fa fc31 	bl	80005e8 <__aeabi_dmul>
 8005d86:	a340      	add	r3, pc, #256	; (adr r3, 8005e88 <__kernel_cos+0x140>)
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	4682      	mov	sl, r0
 8005d8e:	468b      	mov	fp, r1
 8005d90:	4620      	mov	r0, r4
 8005d92:	4629      	mov	r1, r5
 8005d94:	f7fa fc28 	bl	80005e8 <__aeabi_dmul>
 8005d98:	a33d      	add	r3, pc, #244	; (adr r3, 8005e90 <__kernel_cos+0x148>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fa6d 	bl	800027c <__adddf3>
 8005da2:	4622      	mov	r2, r4
 8005da4:	462b      	mov	r3, r5
 8005da6:	f7fa fc1f 	bl	80005e8 <__aeabi_dmul>
 8005daa:	a33b      	add	r3, pc, #236	; (adr r3, 8005e98 <__kernel_cos+0x150>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fa62 	bl	8000278 <__aeabi_dsub>
 8005db4:	4622      	mov	r2, r4
 8005db6:	462b      	mov	r3, r5
 8005db8:	f7fa fc16 	bl	80005e8 <__aeabi_dmul>
 8005dbc:	a338      	add	r3, pc, #224	; (adr r3, 8005ea0 <__kernel_cos+0x158>)
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	f7fa fa5b 	bl	800027c <__adddf3>
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	462b      	mov	r3, r5
 8005dca:	f7fa fc0d 	bl	80005e8 <__aeabi_dmul>
 8005dce:	a336      	add	r3, pc, #216	; (adr r3, 8005ea8 <__kernel_cos+0x160>)
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	f7fa fa50 	bl	8000278 <__aeabi_dsub>
 8005dd8:	4622      	mov	r2, r4
 8005dda:	462b      	mov	r3, r5
 8005ddc:	f7fa fc04 	bl	80005e8 <__aeabi_dmul>
 8005de0:	a333      	add	r3, pc, #204	; (adr r3, 8005eb0 <__kernel_cos+0x168>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa fa49 	bl	800027c <__adddf3>
 8005dea:	4622      	mov	r2, r4
 8005dec:	462b      	mov	r3, r5
 8005dee:	f7fa fbfb 	bl	80005e8 <__aeabi_dmul>
 8005df2:	4622      	mov	r2, r4
 8005df4:	462b      	mov	r3, r5
 8005df6:	f7fa fbf7 	bl	80005e8 <__aeabi_dmul>
 8005dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dfe:	4604      	mov	r4, r0
 8005e00:	460d      	mov	r5, r1
 8005e02:	4630      	mov	r0, r6
 8005e04:	4639      	mov	r1, r7
 8005e06:	f7fa fbef 	bl	80005e8 <__aeabi_dmul>
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4629      	mov	r1, r5
 8005e10:	4620      	mov	r0, r4
 8005e12:	f7fa fa31 	bl	8000278 <__aeabi_dsub>
 8005e16:	4b2b      	ldr	r3, [pc, #172]	; (8005ec4 <__kernel_cos+0x17c>)
 8005e18:	4598      	cmp	r8, r3
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	460f      	mov	r7, r1
 8005e1e:	dc10      	bgt.n	8005e42 <__kernel_cos+0xfa>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4650      	mov	r0, sl
 8005e26:	4659      	mov	r1, fp
 8005e28:	f7fa fa26 	bl	8000278 <__aeabi_dsub>
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4926      	ldr	r1, [pc, #152]	; (8005ec8 <__kernel_cos+0x180>)
 8005e30:	4602      	mov	r2, r0
 8005e32:	2000      	movs	r0, #0
 8005e34:	f7fa fa20 	bl	8000278 <__aeabi_dsub>
 8005e38:	ec41 0b10 	vmov	d0, r0, r1
 8005e3c:	b003      	add	sp, #12
 8005e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e42:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <__kernel_cos+0x184>)
 8005e44:	4920      	ldr	r1, [pc, #128]	; (8005ec8 <__kernel_cos+0x180>)
 8005e46:	4598      	cmp	r8, r3
 8005e48:	bfcc      	ite	gt
 8005e4a:	4d21      	ldrgt	r5, [pc, #132]	; (8005ed0 <__kernel_cos+0x188>)
 8005e4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005e50:	2400      	movs	r4, #0
 8005e52:	4622      	mov	r2, r4
 8005e54:	462b      	mov	r3, r5
 8005e56:	2000      	movs	r0, #0
 8005e58:	f7fa fa0e 	bl	8000278 <__aeabi_dsub>
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	4680      	mov	r8, r0
 8005e60:	4689      	mov	r9, r1
 8005e62:	462b      	mov	r3, r5
 8005e64:	4650      	mov	r0, sl
 8005e66:	4659      	mov	r1, fp
 8005e68:	f7fa fa06 	bl	8000278 <__aeabi_dsub>
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	463b      	mov	r3, r7
 8005e70:	f7fa fa02 	bl	8000278 <__aeabi_dsub>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4640      	mov	r0, r8
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	e7da      	b.n	8005e34 <__kernel_cos+0xec>
 8005e7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005eb8 <__kernel_cos+0x170>
 8005e82:	e7db      	b.n	8005e3c <__kernel_cos+0xf4>
 8005e84:	f3af 8000 	nop.w
 8005e88:	be8838d4 	.word	0xbe8838d4
 8005e8c:	bda8fae9 	.word	0xbda8fae9
 8005e90:	bdb4b1c4 	.word	0xbdb4b1c4
 8005e94:	3e21ee9e 	.word	0x3e21ee9e
 8005e98:	809c52ad 	.word	0x809c52ad
 8005e9c:	3e927e4f 	.word	0x3e927e4f
 8005ea0:	19cb1590 	.word	0x19cb1590
 8005ea4:	3efa01a0 	.word	0x3efa01a0
 8005ea8:	16c15177 	.word	0x16c15177
 8005eac:	3f56c16c 	.word	0x3f56c16c
 8005eb0:	5555554c 	.word	0x5555554c
 8005eb4:	3fa55555 	.word	0x3fa55555
 8005eb8:	00000000 	.word	0x00000000
 8005ebc:	3ff00000 	.word	0x3ff00000
 8005ec0:	3fe00000 	.word	0x3fe00000
 8005ec4:	3fd33332 	.word	0x3fd33332
 8005ec8:	3ff00000 	.word	0x3ff00000
 8005ecc:	3fe90000 	.word	0x3fe90000
 8005ed0:	3fd20000 	.word	0x3fd20000
 8005ed4:	00000000 	.word	0x00000000

08005ed8 <__kernel_rem_pio2>:
 8005ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	ed2d 8b02 	vpush	{d8}
 8005ee0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005ee4:	f112 0f14 	cmn.w	r2, #20
 8005ee8:	9308      	str	r3, [sp, #32]
 8005eea:	9101      	str	r1, [sp, #4]
 8005eec:	4bc4      	ldr	r3, [pc, #784]	; (8006200 <__kernel_rem_pio2+0x328>)
 8005eee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005ef0:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ef2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ef6:	9302      	str	r3, [sp, #8]
 8005ef8:	9b08      	ldr	r3, [sp, #32]
 8005efa:	f103 33ff 	add.w	r3, r3, #4294967295
 8005efe:	bfa8      	it	ge
 8005f00:	1ed4      	subge	r4, r2, #3
 8005f02:	9306      	str	r3, [sp, #24]
 8005f04:	bfb2      	itee	lt
 8005f06:	2400      	movlt	r4, #0
 8005f08:	2318      	movge	r3, #24
 8005f0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005f0e:	f06f 0317 	mvn.w	r3, #23
 8005f12:	fb04 3303 	mla	r3, r4, r3, r3
 8005f16:	eb03 0a02 	add.w	sl, r3, r2
 8005f1a:	9b02      	ldr	r3, [sp, #8]
 8005f1c:	9a06      	ldr	r2, [sp, #24]
 8005f1e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80061f0 <__kernel_rem_pio2+0x318>
 8005f22:	eb03 0802 	add.w	r8, r3, r2
 8005f26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005f28:	1aa7      	subs	r7, r4, r2
 8005f2a:	ae22      	add	r6, sp, #136	; 0x88
 8005f2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005f30:	2500      	movs	r5, #0
 8005f32:	4545      	cmp	r5, r8
 8005f34:	dd13      	ble.n	8005f5e <__kernel_rem_pio2+0x86>
 8005f36:	9b08      	ldr	r3, [sp, #32]
 8005f38:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80061f0 <__kernel_rem_pio2+0x318>
 8005f3c:	aa22      	add	r2, sp, #136	; 0x88
 8005f3e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005f42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005f46:	f04f 0800 	mov.w	r8, #0
 8005f4a:	9b02      	ldr	r3, [sp, #8]
 8005f4c:	4598      	cmp	r8, r3
 8005f4e:	dc2f      	bgt.n	8005fb0 <__kernel_rem_pio2+0xd8>
 8005f50:	ed8d 8b04 	vstr	d8, [sp, #16]
 8005f54:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005f58:	462f      	mov	r7, r5
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	e01b      	b.n	8005f96 <__kernel_rem_pio2+0xbe>
 8005f5e:	42ef      	cmn	r7, r5
 8005f60:	d407      	bmi.n	8005f72 <__kernel_rem_pio2+0x9a>
 8005f62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005f66:	f7fa fad5 	bl	8000514 <__aeabi_i2d>
 8005f6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005f6e:	3501      	adds	r5, #1
 8005f70:	e7df      	b.n	8005f32 <__kernel_rem_pio2+0x5a>
 8005f72:	ec51 0b18 	vmov	r0, r1, d8
 8005f76:	e7f8      	b.n	8005f6a <__kernel_rem_pio2+0x92>
 8005f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005f80:	f7fa fb32 	bl	80005e8 <__aeabi_dmul>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f8c:	f7fa f976 	bl	800027c <__adddf3>
 8005f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f94:	3601      	adds	r6, #1
 8005f96:	9b06      	ldr	r3, [sp, #24]
 8005f98:	429e      	cmp	r6, r3
 8005f9a:	f1a7 0708 	sub.w	r7, r7, #8
 8005f9e:	ddeb      	ble.n	8005f78 <__kernel_rem_pio2+0xa0>
 8005fa0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005fa4:	f108 0801 	add.w	r8, r8, #1
 8005fa8:	ecab 7b02 	vstmia	fp!, {d7}
 8005fac:	3508      	adds	r5, #8
 8005fae:	e7cc      	b.n	8005f4a <__kernel_rem_pio2+0x72>
 8005fb0:	9b02      	ldr	r3, [sp, #8]
 8005fb2:	aa0e      	add	r2, sp, #56	; 0x38
 8005fb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005fb8:	930d      	str	r3, [sp, #52]	; 0x34
 8005fba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005fbc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005fc0:	9c02      	ldr	r4, [sp, #8]
 8005fc2:	930c      	str	r3, [sp, #48]	; 0x30
 8005fc4:	00e3      	lsls	r3, r4, #3
 8005fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8005fc8:	ab9a      	add	r3, sp, #616	; 0x268
 8005fca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005fd2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005fd6:	ab72      	add	r3, sp, #456	; 0x1c8
 8005fd8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005fdc:	46c3      	mov	fp, r8
 8005fde:	46a1      	mov	r9, r4
 8005fe0:	f1b9 0f00 	cmp.w	r9, #0
 8005fe4:	f1a5 0508 	sub.w	r5, r5, #8
 8005fe8:	dc77      	bgt.n	80060da <__kernel_rem_pio2+0x202>
 8005fea:	ec47 6b10 	vmov	d0, r6, r7
 8005fee:	4650      	mov	r0, sl
 8005ff0:	f000 fc0a 	bl	8006808 <scalbn>
 8005ff4:	ec57 6b10 	vmov	r6, r7, d0
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005ffe:	ee10 0a10 	vmov	r0, s0
 8006002:	4639      	mov	r1, r7
 8006004:	f7fa faf0 	bl	80005e8 <__aeabi_dmul>
 8006008:	ec41 0b10 	vmov	d0, r0, r1
 800600c:	f000 fb7c 	bl	8006708 <floor>
 8006010:	4b7c      	ldr	r3, [pc, #496]	; (8006204 <__kernel_rem_pio2+0x32c>)
 8006012:	ec51 0b10 	vmov	r0, r1, d0
 8006016:	2200      	movs	r2, #0
 8006018:	f7fa fae6 	bl	80005e8 <__aeabi_dmul>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4630      	mov	r0, r6
 8006022:	4639      	mov	r1, r7
 8006024:	f7fa f928 	bl	8000278 <__aeabi_dsub>
 8006028:	460f      	mov	r7, r1
 800602a:	4606      	mov	r6, r0
 800602c:	f7fa fd76 	bl	8000b1c <__aeabi_d2iz>
 8006030:	9004      	str	r0, [sp, #16]
 8006032:	f7fa fa6f 	bl	8000514 <__aeabi_i2d>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4630      	mov	r0, r6
 800603c:	4639      	mov	r1, r7
 800603e:	f7fa f91b 	bl	8000278 <__aeabi_dsub>
 8006042:	f1ba 0f00 	cmp.w	sl, #0
 8006046:	4606      	mov	r6, r0
 8006048:	460f      	mov	r7, r1
 800604a:	dd6d      	ble.n	8006128 <__kernel_rem_pio2+0x250>
 800604c:	1e62      	subs	r2, r4, #1
 800604e:	ab0e      	add	r3, sp, #56	; 0x38
 8006050:	9d04      	ldr	r5, [sp, #16]
 8006052:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006056:	f1ca 0118 	rsb	r1, sl, #24
 800605a:	fa40 f301 	asr.w	r3, r0, r1
 800605e:	441d      	add	r5, r3
 8006060:	408b      	lsls	r3, r1
 8006062:	1ac0      	subs	r0, r0, r3
 8006064:	ab0e      	add	r3, sp, #56	; 0x38
 8006066:	9504      	str	r5, [sp, #16]
 8006068:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800606c:	f1ca 0317 	rsb	r3, sl, #23
 8006070:	fa40 fb03 	asr.w	fp, r0, r3
 8006074:	f1bb 0f00 	cmp.w	fp, #0
 8006078:	dd65      	ble.n	8006146 <__kernel_rem_pio2+0x26e>
 800607a:	9b04      	ldr	r3, [sp, #16]
 800607c:	2200      	movs	r2, #0
 800607e:	3301      	adds	r3, #1
 8006080:	9304      	str	r3, [sp, #16]
 8006082:	4615      	mov	r5, r2
 8006084:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006088:	4294      	cmp	r4, r2
 800608a:	f300 809c 	bgt.w	80061c6 <__kernel_rem_pio2+0x2ee>
 800608e:	f1ba 0f00 	cmp.w	sl, #0
 8006092:	dd07      	ble.n	80060a4 <__kernel_rem_pio2+0x1cc>
 8006094:	f1ba 0f01 	cmp.w	sl, #1
 8006098:	f000 80c0 	beq.w	800621c <__kernel_rem_pio2+0x344>
 800609c:	f1ba 0f02 	cmp.w	sl, #2
 80060a0:	f000 80c6 	beq.w	8006230 <__kernel_rem_pio2+0x358>
 80060a4:	f1bb 0f02 	cmp.w	fp, #2
 80060a8:	d14d      	bne.n	8006146 <__kernel_rem_pio2+0x26e>
 80060aa:	4632      	mov	r2, r6
 80060ac:	463b      	mov	r3, r7
 80060ae:	4956      	ldr	r1, [pc, #344]	; (8006208 <__kernel_rem_pio2+0x330>)
 80060b0:	2000      	movs	r0, #0
 80060b2:	f7fa f8e1 	bl	8000278 <__aeabi_dsub>
 80060b6:	4606      	mov	r6, r0
 80060b8:	460f      	mov	r7, r1
 80060ba:	2d00      	cmp	r5, #0
 80060bc:	d043      	beq.n	8006146 <__kernel_rem_pio2+0x26e>
 80060be:	4650      	mov	r0, sl
 80060c0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80061f8 <__kernel_rem_pio2+0x320>
 80060c4:	f000 fba0 	bl	8006808 <scalbn>
 80060c8:	4630      	mov	r0, r6
 80060ca:	4639      	mov	r1, r7
 80060cc:	ec53 2b10 	vmov	r2, r3, d0
 80060d0:	f7fa f8d2 	bl	8000278 <__aeabi_dsub>
 80060d4:	4606      	mov	r6, r0
 80060d6:	460f      	mov	r7, r1
 80060d8:	e035      	b.n	8006146 <__kernel_rem_pio2+0x26e>
 80060da:	4b4c      	ldr	r3, [pc, #304]	; (800620c <__kernel_rem_pio2+0x334>)
 80060dc:	2200      	movs	r2, #0
 80060de:	4630      	mov	r0, r6
 80060e0:	4639      	mov	r1, r7
 80060e2:	f7fa fa81 	bl	80005e8 <__aeabi_dmul>
 80060e6:	f7fa fd19 	bl	8000b1c <__aeabi_d2iz>
 80060ea:	f7fa fa13 	bl	8000514 <__aeabi_i2d>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	ec43 2b18 	vmov	d8, r2, r3
 80060f6:	4b46      	ldr	r3, [pc, #280]	; (8006210 <__kernel_rem_pio2+0x338>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	f7fa fa75 	bl	80005e8 <__aeabi_dmul>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4630      	mov	r0, r6
 8006104:	4639      	mov	r1, r7
 8006106:	f7fa f8b7 	bl	8000278 <__aeabi_dsub>
 800610a:	f7fa fd07 	bl	8000b1c <__aeabi_d2iz>
 800610e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006112:	f84b 0b04 	str.w	r0, [fp], #4
 8006116:	ec51 0b18 	vmov	r0, r1, d8
 800611a:	f7fa f8af 	bl	800027c <__adddf3>
 800611e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006122:	4606      	mov	r6, r0
 8006124:	460f      	mov	r7, r1
 8006126:	e75b      	b.n	8005fe0 <__kernel_rem_pio2+0x108>
 8006128:	d106      	bne.n	8006138 <__kernel_rem_pio2+0x260>
 800612a:	1e63      	subs	r3, r4, #1
 800612c:	aa0e      	add	r2, sp, #56	; 0x38
 800612e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006132:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006136:	e79d      	b.n	8006074 <__kernel_rem_pio2+0x19c>
 8006138:	4b36      	ldr	r3, [pc, #216]	; (8006214 <__kernel_rem_pio2+0x33c>)
 800613a:	2200      	movs	r2, #0
 800613c:	f7fa fcda 	bl	8000af4 <__aeabi_dcmpge>
 8006140:	2800      	cmp	r0, #0
 8006142:	d13d      	bne.n	80061c0 <__kernel_rem_pio2+0x2e8>
 8006144:	4683      	mov	fp, r0
 8006146:	2200      	movs	r2, #0
 8006148:	2300      	movs	r3, #0
 800614a:	4630      	mov	r0, r6
 800614c:	4639      	mov	r1, r7
 800614e:	f7fa fcb3 	bl	8000ab8 <__aeabi_dcmpeq>
 8006152:	2800      	cmp	r0, #0
 8006154:	f000 80c0 	beq.w	80062d8 <__kernel_rem_pio2+0x400>
 8006158:	1e65      	subs	r5, r4, #1
 800615a:	462b      	mov	r3, r5
 800615c:	2200      	movs	r2, #0
 800615e:	9902      	ldr	r1, [sp, #8]
 8006160:	428b      	cmp	r3, r1
 8006162:	da6c      	bge.n	800623e <__kernel_rem_pio2+0x366>
 8006164:	2a00      	cmp	r2, #0
 8006166:	f000 8089 	beq.w	800627c <__kernel_rem_pio2+0x3a4>
 800616a:	ab0e      	add	r3, sp, #56	; 0x38
 800616c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006170:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80ad 	beq.w	80062d4 <__kernel_rem_pio2+0x3fc>
 800617a:	4650      	mov	r0, sl
 800617c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80061f8 <__kernel_rem_pio2+0x320>
 8006180:	f000 fb42 	bl	8006808 <scalbn>
 8006184:	ab9a      	add	r3, sp, #616	; 0x268
 8006186:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800618a:	ec57 6b10 	vmov	r6, r7, d0
 800618e:	00ec      	lsls	r4, r5, #3
 8006190:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006194:	46aa      	mov	sl, r5
 8006196:	f1ba 0f00 	cmp.w	sl, #0
 800619a:	f280 80d6 	bge.w	800634a <__kernel_rem_pio2+0x472>
 800619e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80061f0 <__kernel_rem_pio2+0x318>
 80061a2:	462e      	mov	r6, r5
 80061a4:	2e00      	cmp	r6, #0
 80061a6:	f2c0 8104 	blt.w	80063b2 <__kernel_rem_pio2+0x4da>
 80061aa:	ab72      	add	r3, sp, #456	; 0x1c8
 80061ac:	ed8d 8b06 	vstr	d8, [sp, #24]
 80061b0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006218 <__kernel_rem_pio2+0x340>
 80061b4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80061b8:	f04f 0800 	mov.w	r8, #0
 80061bc:	1baf      	subs	r7, r5, r6
 80061be:	e0ea      	b.n	8006396 <__kernel_rem_pio2+0x4be>
 80061c0:	f04f 0b02 	mov.w	fp, #2
 80061c4:	e759      	b.n	800607a <__kernel_rem_pio2+0x1a2>
 80061c6:	f8d8 3000 	ldr.w	r3, [r8]
 80061ca:	b955      	cbnz	r5, 80061e2 <__kernel_rem_pio2+0x30a>
 80061cc:	b123      	cbz	r3, 80061d8 <__kernel_rem_pio2+0x300>
 80061ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80061d2:	f8c8 3000 	str.w	r3, [r8]
 80061d6:	2301      	movs	r3, #1
 80061d8:	3201      	adds	r2, #1
 80061da:	f108 0804 	add.w	r8, r8, #4
 80061de:	461d      	mov	r5, r3
 80061e0:	e752      	b.n	8006088 <__kernel_rem_pio2+0x1b0>
 80061e2:	1acb      	subs	r3, r1, r3
 80061e4:	f8c8 3000 	str.w	r3, [r8]
 80061e8:	462b      	mov	r3, r5
 80061ea:	e7f5      	b.n	80061d8 <__kernel_rem_pio2+0x300>
 80061ec:	f3af 8000 	nop.w
	...
 80061fc:	3ff00000 	.word	0x3ff00000
 8006200:	080099d8 	.word	0x080099d8
 8006204:	40200000 	.word	0x40200000
 8006208:	3ff00000 	.word	0x3ff00000
 800620c:	3e700000 	.word	0x3e700000
 8006210:	41700000 	.word	0x41700000
 8006214:	3fe00000 	.word	0x3fe00000
 8006218:	08009998 	.word	0x08009998
 800621c:	1e62      	subs	r2, r4, #1
 800621e:	ab0e      	add	r3, sp, #56	; 0x38
 8006220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006224:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006228:	a90e      	add	r1, sp, #56	; 0x38
 800622a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800622e:	e739      	b.n	80060a4 <__kernel_rem_pio2+0x1cc>
 8006230:	1e62      	subs	r2, r4, #1
 8006232:	ab0e      	add	r3, sp, #56	; 0x38
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800623c:	e7f4      	b.n	8006228 <__kernel_rem_pio2+0x350>
 800623e:	a90e      	add	r1, sp, #56	; 0x38
 8006240:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006244:	3b01      	subs	r3, #1
 8006246:	430a      	orrs	r2, r1
 8006248:	e789      	b.n	800615e <__kernel_rem_pio2+0x286>
 800624a:	3301      	adds	r3, #1
 800624c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006250:	2900      	cmp	r1, #0
 8006252:	d0fa      	beq.n	800624a <__kernel_rem_pio2+0x372>
 8006254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006256:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800625a:	446a      	add	r2, sp
 800625c:	3a98      	subs	r2, #152	; 0x98
 800625e:	920a      	str	r2, [sp, #40]	; 0x28
 8006260:	9a08      	ldr	r2, [sp, #32]
 8006262:	18e3      	adds	r3, r4, r3
 8006264:	18a5      	adds	r5, r4, r2
 8006266:	aa22      	add	r2, sp, #136	; 0x88
 8006268:	f104 0801 	add.w	r8, r4, #1
 800626c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006270:	9304      	str	r3, [sp, #16]
 8006272:	9b04      	ldr	r3, [sp, #16]
 8006274:	4543      	cmp	r3, r8
 8006276:	da04      	bge.n	8006282 <__kernel_rem_pio2+0x3aa>
 8006278:	461c      	mov	r4, r3
 800627a:	e6a3      	b.n	8005fc4 <__kernel_rem_pio2+0xec>
 800627c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800627e:	2301      	movs	r3, #1
 8006280:	e7e4      	b.n	800624c <__kernel_rem_pio2+0x374>
 8006282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006284:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006288:	f7fa f944 	bl	8000514 <__aeabi_i2d>
 800628c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006292:	46ab      	mov	fp, r5
 8006294:	461c      	mov	r4, r3
 8006296:	f04f 0900 	mov.w	r9, #0
 800629a:	2600      	movs	r6, #0
 800629c:	2700      	movs	r7, #0
 800629e:	9b06      	ldr	r3, [sp, #24]
 80062a0:	4599      	cmp	r9, r3
 80062a2:	dd06      	ble.n	80062b2 <__kernel_rem_pio2+0x3da>
 80062a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80062aa:	f108 0801 	add.w	r8, r8, #1
 80062ae:	930a      	str	r3, [sp, #40]	; 0x28
 80062b0:	e7df      	b.n	8006272 <__kernel_rem_pio2+0x39a>
 80062b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80062b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80062ba:	f7fa f995 	bl	80005e8 <__aeabi_dmul>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4630      	mov	r0, r6
 80062c4:	4639      	mov	r1, r7
 80062c6:	f7f9 ffd9 	bl	800027c <__adddf3>
 80062ca:	f109 0901 	add.w	r9, r9, #1
 80062ce:	4606      	mov	r6, r0
 80062d0:	460f      	mov	r7, r1
 80062d2:	e7e4      	b.n	800629e <__kernel_rem_pio2+0x3c6>
 80062d4:	3d01      	subs	r5, #1
 80062d6:	e748      	b.n	800616a <__kernel_rem_pio2+0x292>
 80062d8:	ec47 6b10 	vmov	d0, r6, r7
 80062dc:	f1ca 0000 	rsb	r0, sl, #0
 80062e0:	f000 fa92 	bl	8006808 <scalbn>
 80062e4:	ec57 6b10 	vmov	r6, r7, d0
 80062e8:	4ba0      	ldr	r3, [pc, #640]	; (800656c <__kernel_rem_pio2+0x694>)
 80062ea:	ee10 0a10 	vmov	r0, s0
 80062ee:	2200      	movs	r2, #0
 80062f0:	4639      	mov	r1, r7
 80062f2:	f7fa fbff 	bl	8000af4 <__aeabi_dcmpge>
 80062f6:	b1f8      	cbz	r0, 8006338 <__kernel_rem_pio2+0x460>
 80062f8:	4b9d      	ldr	r3, [pc, #628]	; (8006570 <__kernel_rem_pio2+0x698>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	4630      	mov	r0, r6
 80062fe:	4639      	mov	r1, r7
 8006300:	f7fa f972 	bl	80005e8 <__aeabi_dmul>
 8006304:	f7fa fc0a 	bl	8000b1c <__aeabi_d2iz>
 8006308:	4680      	mov	r8, r0
 800630a:	f7fa f903 	bl	8000514 <__aeabi_i2d>
 800630e:	4b97      	ldr	r3, [pc, #604]	; (800656c <__kernel_rem_pio2+0x694>)
 8006310:	2200      	movs	r2, #0
 8006312:	f7fa f969 	bl	80005e8 <__aeabi_dmul>
 8006316:	460b      	mov	r3, r1
 8006318:	4602      	mov	r2, r0
 800631a:	4639      	mov	r1, r7
 800631c:	4630      	mov	r0, r6
 800631e:	f7f9 ffab 	bl	8000278 <__aeabi_dsub>
 8006322:	f7fa fbfb 	bl	8000b1c <__aeabi_d2iz>
 8006326:	1c65      	adds	r5, r4, #1
 8006328:	ab0e      	add	r3, sp, #56	; 0x38
 800632a:	f10a 0a18 	add.w	sl, sl, #24
 800632e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006332:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006336:	e720      	b.n	800617a <__kernel_rem_pio2+0x2a2>
 8006338:	4630      	mov	r0, r6
 800633a:	4639      	mov	r1, r7
 800633c:	f7fa fbee 	bl	8000b1c <__aeabi_d2iz>
 8006340:	ab0e      	add	r3, sp, #56	; 0x38
 8006342:	4625      	mov	r5, r4
 8006344:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006348:	e717      	b.n	800617a <__kernel_rem_pio2+0x2a2>
 800634a:	ab0e      	add	r3, sp, #56	; 0x38
 800634c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006350:	f7fa f8e0 	bl	8000514 <__aeabi_i2d>
 8006354:	4632      	mov	r2, r6
 8006356:	463b      	mov	r3, r7
 8006358:	f7fa f946 	bl	80005e8 <__aeabi_dmul>
 800635c:	4b84      	ldr	r3, [pc, #528]	; (8006570 <__kernel_rem_pio2+0x698>)
 800635e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006362:	2200      	movs	r2, #0
 8006364:	4630      	mov	r0, r6
 8006366:	4639      	mov	r1, r7
 8006368:	f7fa f93e 	bl	80005e8 <__aeabi_dmul>
 800636c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006370:	4606      	mov	r6, r0
 8006372:	460f      	mov	r7, r1
 8006374:	e70f      	b.n	8006196 <__kernel_rem_pio2+0x2be>
 8006376:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800637a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800637e:	f7fa f933 	bl	80005e8 <__aeabi_dmul>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800638a:	f7f9 ff77 	bl	800027c <__adddf3>
 800638e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	9b02      	ldr	r3, [sp, #8]
 8006398:	4598      	cmp	r8, r3
 800639a:	dc01      	bgt.n	80063a0 <__kernel_rem_pio2+0x4c8>
 800639c:	45b8      	cmp	r8, r7
 800639e:	ddea      	ble.n	8006376 <__kernel_rem_pio2+0x49e>
 80063a0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80063a4:	ab4a      	add	r3, sp, #296	; 0x128
 80063a6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80063aa:	ed87 7b00 	vstr	d7, [r7]
 80063ae:	3e01      	subs	r6, #1
 80063b0:	e6f8      	b.n	80061a4 <__kernel_rem_pio2+0x2cc>
 80063b2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	dc0b      	bgt.n	80063d0 <__kernel_rem_pio2+0x4f8>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	dc35      	bgt.n	8006428 <__kernel_rem_pio2+0x550>
 80063bc:	d059      	beq.n	8006472 <__kernel_rem_pio2+0x59a>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	f003 0007 	and.w	r0, r3, #7
 80063c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80063c8:	ecbd 8b02 	vpop	{d8}
 80063cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d1f3      	bne.n	80063be <__kernel_rem_pio2+0x4e6>
 80063d6:	ab4a      	add	r3, sp, #296	; 0x128
 80063d8:	4423      	add	r3, r4
 80063da:	9306      	str	r3, [sp, #24]
 80063dc:	461c      	mov	r4, r3
 80063de:	469a      	mov	sl, r3
 80063e0:	9502      	str	r5, [sp, #8]
 80063e2:	9b02      	ldr	r3, [sp, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f1aa 0a08 	sub.w	sl, sl, #8
 80063ea:	dc6b      	bgt.n	80064c4 <__kernel_rem_pio2+0x5ec>
 80063ec:	46aa      	mov	sl, r5
 80063ee:	f1ba 0f01 	cmp.w	sl, #1
 80063f2:	f1a4 0408 	sub.w	r4, r4, #8
 80063f6:	f300 8085 	bgt.w	8006504 <__kernel_rem_pio2+0x62c>
 80063fa:	9c06      	ldr	r4, [sp, #24]
 80063fc:	2000      	movs	r0, #0
 80063fe:	3408      	adds	r4, #8
 8006400:	2100      	movs	r1, #0
 8006402:	2d01      	cmp	r5, #1
 8006404:	f300 809d 	bgt.w	8006542 <__kernel_rem_pio2+0x66a>
 8006408:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800640c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006410:	f1bb 0f00 	cmp.w	fp, #0
 8006414:	f040 809b 	bne.w	800654e <__kernel_rem_pio2+0x676>
 8006418:	9b01      	ldr	r3, [sp, #4]
 800641a:	e9c3 5600 	strd	r5, r6, [r3]
 800641e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006422:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006426:	e7ca      	b.n	80063be <__kernel_rem_pio2+0x4e6>
 8006428:	3408      	adds	r4, #8
 800642a:	ab4a      	add	r3, sp, #296	; 0x128
 800642c:	441c      	add	r4, r3
 800642e:	462e      	mov	r6, r5
 8006430:	2000      	movs	r0, #0
 8006432:	2100      	movs	r1, #0
 8006434:	2e00      	cmp	r6, #0
 8006436:	da36      	bge.n	80064a6 <__kernel_rem_pio2+0x5ce>
 8006438:	f1bb 0f00 	cmp.w	fp, #0
 800643c:	d039      	beq.n	80064b2 <__kernel_rem_pio2+0x5da>
 800643e:	4602      	mov	r2, r0
 8006440:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006444:	9c01      	ldr	r4, [sp, #4]
 8006446:	e9c4 2300 	strd	r2, r3, [r4]
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006452:	f7f9 ff11 	bl	8000278 <__aeabi_dsub>
 8006456:	ae4c      	add	r6, sp, #304	; 0x130
 8006458:	2401      	movs	r4, #1
 800645a:	42a5      	cmp	r5, r4
 800645c:	da2c      	bge.n	80064b8 <__kernel_rem_pio2+0x5e0>
 800645e:	f1bb 0f00 	cmp.w	fp, #0
 8006462:	d002      	beq.n	800646a <__kernel_rem_pio2+0x592>
 8006464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006468:	4619      	mov	r1, r3
 800646a:	9b01      	ldr	r3, [sp, #4]
 800646c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006470:	e7a5      	b.n	80063be <__kernel_rem_pio2+0x4e6>
 8006472:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006476:	eb0d 0403 	add.w	r4, sp, r3
 800647a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800647e:	2000      	movs	r0, #0
 8006480:	2100      	movs	r1, #0
 8006482:	2d00      	cmp	r5, #0
 8006484:	da09      	bge.n	800649a <__kernel_rem_pio2+0x5c2>
 8006486:	f1bb 0f00 	cmp.w	fp, #0
 800648a:	d002      	beq.n	8006492 <__kernel_rem_pio2+0x5ba>
 800648c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006490:	4619      	mov	r1, r3
 8006492:	9b01      	ldr	r3, [sp, #4]
 8006494:	e9c3 0100 	strd	r0, r1, [r3]
 8006498:	e791      	b.n	80063be <__kernel_rem_pio2+0x4e6>
 800649a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800649e:	f7f9 feed 	bl	800027c <__adddf3>
 80064a2:	3d01      	subs	r5, #1
 80064a4:	e7ed      	b.n	8006482 <__kernel_rem_pio2+0x5aa>
 80064a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80064aa:	f7f9 fee7 	bl	800027c <__adddf3>
 80064ae:	3e01      	subs	r6, #1
 80064b0:	e7c0      	b.n	8006434 <__kernel_rem_pio2+0x55c>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	e7c5      	b.n	8006444 <__kernel_rem_pio2+0x56c>
 80064b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80064bc:	f7f9 fede 	bl	800027c <__adddf3>
 80064c0:	3401      	adds	r4, #1
 80064c2:	e7ca      	b.n	800645a <__kernel_rem_pio2+0x582>
 80064c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80064c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80064cc:	9b02      	ldr	r3, [sp, #8]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	9302      	str	r3, [sp, #8]
 80064d2:	4632      	mov	r2, r6
 80064d4:	463b      	mov	r3, r7
 80064d6:	4640      	mov	r0, r8
 80064d8:	4649      	mov	r1, r9
 80064da:	f7f9 fecf 	bl	800027c <__adddf3>
 80064de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4640      	mov	r0, r8
 80064e8:	4649      	mov	r1, r9
 80064ea:	f7f9 fec5 	bl	8000278 <__aeabi_dsub>
 80064ee:	4632      	mov	r2, r6
 80064f0:	463b      	mov	r3, r7
 80064f2:	f7f9 fec3 	bl	800027c <__adddf3>
 80064f6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80064fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80064fe:	ed8a 7b00 	vstr	d7, [sl]
 8006502:	e76e      	b.n	80063e2 <__kernel_rem_pio2+0x50a>
 8006504:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006508:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800650c:	4640      	mov	r0, r8
 800650e:	4632      	mov	r2, r6
 8006510:	463b      	mov	r3, r7
 8006512:	4649      	mov	r1, r9
 8006514:	f7f9 feb2 	bl	800027c <__adddf3>
 8006518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4640      	mov	r0, r8
 8006522:	4649      	mov	r1, r9
 8006524:	f7f9 fea8 	bl	8000278 <__aeabi_dsub>
 8006528:	4632      	mov	r2, r6
 800652a:	463b      	mov	r3, r7
 800652c:	f7f9 fea6 	bl	800027c <__adddf3>
 8006530:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006534:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006538:	ed84 7b00 	vstr	d7, [r4]
 800653c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006540:	e755      	b.n	80063ee <__kernel_rem_pio2+0x516>
 8006542:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006546:	f7f9 fe99 	bl	800027c <__adddf3>
 800654a:	3d01      	subs	r5, #1
 800654c:	e759      	b.n	8006402 <__kernel_rem_pio2+0x52a>
 800654e:	9b01      	ldr	r3, [sp, #4]
 8006550:	9a01      	ldr	r2, [sp, #4]
 8006552:	601d      	str	r5, [r3, #0]
 8006554:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006558:	605c      	str	r4, [r3, #4]
 800655a:	609f      	str	r7, [r3, #8]
 800655c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006560:	60d3      	str	r3, [r2, #12]
 8006562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006566:	6110      	str	r0, [r2, #16]
 8006568:	6153      	str	r3, [r2, #20]
 800656a:	e728      	b.n	80063be <__kernel_rem_pio2+0x4e6>
 800656c:	41700000 	.word	0x41700000
 8006570:	3e700000 	.word	0x3e700000
 8006574:	00000000 	.word	0x00000000

08006578 <__kernel_sin>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	ed2d 8b04 	vpush	{d8-d9}
 8006580:	eeb0 8a41 	vmov.f32	s16, s2
 8006584:	eef0 8a61 	vmov.f32	s17, s3
 8006588:	ec55 4b10 	vmov	r4, r5, d0
 800658c:	b083      	sub	sp, #12
 800658e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006592:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006596:	9001      	str	r0, [sp, #4]
 8006598:	da06      	bge.n	80065a8 <__kernel_sin+0x30>
 800659a:	ee10 0a10 	vmov	r0, s0
 800659e:	4629      	mov	r1, r5
 80065a0:	f7fa fabc 	bl	8000b1c <__aeabi_d2iz>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d051      	beq.n	800664c <__kernel_sin+0xd4>
 80065a8:	4622      	mov	r2, r4
 80065aa:	462b      	mov	r3, r5
 80065ac:	4620      	mov	r0, r4
 80065ae:	4629      	mov	r1, r5
 80065b0:	f7fa f81a 	bl	80005e8 <__aeabi_dmul>
 80065b4:	4682      	mov	sl, r0
 80065b6:	468b      	mov	fp, r1
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4620      	mov	r0, r4
 80065be:	4629      	mov	r1, r5
 80065c0:	f7fa f812 	bl	80005e8 <__aeabi_dmul>
 80065c4:	a341      	add	r3, pc, #260	; (adr r3, 80066cc <__kernel_sin+0x154>)
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	4680      	mov	r8, r0
 80065cc:	4689      	mov	r9, r1
 80065ce:	4650      	mov	r0, sl
 80065d0:	4659      	mov	r1, fp
 80065d2:	f7fa f809 	bl	80005e8 <__aeabi_dmul>
 80065d6:	a33f      	add	r3, pc, #252	; (adr r3, 80066d4 <__kernel_sin+0x15c>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f7f9 fe4c 	bl	8000278 <__aeabi_dsub>
 80065e0:	4652      	mov	r2, sl
 80065e2:	465b      	mov	r3, fp
 80065e4:	f7fa f800 	bl	80005e8 <__aeabi_dmul>
 80065e8:	a33c      	add	r3, pc, #240	; (adr r3, 80066dc <__kernel_sin+0x164>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7f9 fe45 	bl	800027c <__adddf3>
 80065f2:	4652      	mov	r2, sl
 80065f4:	465b      	mov	r3, fp
 80065f6:	f7f9 fff7 	bl	80005e8 <__aeabi_dmul>
 80065fa:	a33a      	add	r3, pc, #232	; (adr r3, 80066e4 <__kernel_sin+0x16c>)
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f7f9 fe3a 	bl	8000278 <__aeabi_dsub>
 8006604:	4652      	mov	r2, sl
 8006606:	465b      	mov	r3, fp
 8006608:	f7f9 ffee 	bl	80005e8 <__aeabi_dmul>
 800660c:	a337      	add	r3, pc, #220	; (adr r3, 80066ec <__kernel_sin+0x174>)
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7f9 fe33 	bl	800027c <__adddf3>
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	4606      	mov	r6, r0
 800661a:	460f      	mov	r7, r1
 800661c:	b9eb      	cbnz	r3, 800665a <__kernel_sin+0xe2>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4650      	mov	r0, sl
 8006624:	4659      	mov	r1, fp
 8006626:	f7f9 ffdf 	bl	80005e8 <__aeabi_dmul>
 800662a:	a325      	add	r3, pc, #148	; (adr r3, 80066c0 <__kernel_sin+0x148>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7f9 fe22 	bl	8000278 <__aeabi_dsub>
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	f7f9 ffd6 	bl	80005e8 <__aeabi_dmul>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4620      	mov	r0, r4
 8006642:	4629      	mov	r1, r5
 8006644:	f7f9 fe1a 	bl	800027c <__adddf3>
 8006648:	4604      	mov	r4, r0
 800664a:	460d      	mov	r5, r1
 800664c:	ec45 4b10 	vmov	d0, r4, r5
 8006650:	b003      	add	sp, #12
 8006652:	ecbd 8b04 	vpop	{d8-d9}
 8006656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665a:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <__kernel_sin+0x150>)
 800665c:	ec51 0b18 	vmov	r0, r1, d8
 8006660:	2200      	movs	r2, #0
 8006662:	f7f9 ffc1 	bl	80005e8 <__aeabi_dmul>
 8006666:	4632      	mov	r2, r6
 8006668:	ec41 0b19 	vmov	d9, r0, r1
 800666c:	463b      	mov	r3, r7
 800666e:	4640      	mov	r0, r8
 8006670:	4649      	mov	r1, r9
 8006672:	f7f9 ffb9 	bl	80005e8 <__aeabi_dmul>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	ec51 0b19 	vmov	r0, r1, d9
 800667e:	f7f9 fdfb 	bl	8000278 <__aeabi_dsub>
 8006682:	4652      	mov	r2, sl
 8006684:	465b      	mov	r3, fp
 8006686:	f7f9 ffaf 	bl	80005e8 <__aeabi_dmul>
 800668a:	ec53 2b18 	vmov	r2, r3, d8
 800668e:	f7f9 fdf3 	bl	8000278 <__aeabi_dsub>
 8006692:	a30b      	add	r3, pc, #44	; (adr r3, 80066c0 <__kernel_sin+0x148>)
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	4606      	mov	r6, r0
 800669a:	460f      	mov	r7, r1
 800669c:	4640      	mov	r0, r8
 800669e:	4649      	mov	r1, r9
 80066a0:	f7f9 ffa2 	bl	80005e8 <__aeabi_dmul>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4630      	mov	r0, r6
 80066aa:	4639      	mov	r1, r7
 80066ac:	f7f9 fde6 	bl	800027c <__adddf3>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4620      	mov	r0, r4
 80066b6:	4629      	mov	r1, r5
 80066b8:	f7f9 fdde 	bl	8000278 <__aeabi_dsub>
 80066bc:	e7c4      	b.n	8006648 <__kernel_sin+0xd0>
 80066be:	bf00      	nop
 80066c0:	55555549 	.word	0x55555549
 80066c4:	3fc55555 	.word	0x3fc55555
 80066c8:	3fe00000 	.word	0x3fe00000
 80066cc:	5acfd57c 	.word	0x5acfd57c
 80066d0:	3de5d93a 	.word	0x3de5d93a
 80066d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80066d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80066dc:	57b1fe7d 	.word	0x57b1fe7d
 80066e0:	3ec71de3 	.word	0x3ec71de3
 80066e4:	19c161d5 	.word	0x19c161d5
 80066e8:	3f2a01a0 	.word	0x3f2a01a0
 80066ec:	1110f8a6 	.word	0x1110f8a6
 80066f0:	3f811111 	.word	0x3f811111

080066f4 <fabs>:
 80066f4:	ec51 0b10 	vmov	r0, r1, d0
 80066f8:	ee10 2a10 	vmov	r2, s0
 80066fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006700:	ec43 2b10 	vmov	d0, r2, r3
 8006704:	4770      	bx	lr
	...

08006708 <floor>:
 8006708:	ec51 0b10 	vmov	r0, r1, d0
 800670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006710:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006714:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006718:	2e13      	cmp	r6, #19
 800671a:	ee10 5a10 	vmov	r5, s0
 800671e:	ee10 8a10 	vmov	r8, s0
 8006722:	460c      	mov	r4, r1
 8006724:	dc32      	bgt.n	800678c <floor+0x84>
 8006726:	2e00      	cmp	r6, #0
 8006728:	da14      	bge.n	8006754 <floor+0x4c>
 800672a:	a333      	add	r3, pc, #204	; (adr r3, 80067f8 <floor+0xf0>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f7f9 fda4 	bl	800027c <__adddf3>
 8006734:	2200      	movs	r2, #0
 8006736:	2300      	movs	r3, #0
 8006738:	f7fa f9e6 	bl	8000b08 <__aeabi_dcmpgt>
 800673c:	b138      	cbz	r0, 800674e <floor+0x46>
 800673e:	2c00      	cmp	r4, #0
 8006740:	da57      	bge.n	80067f2 <floor+0xea>
 8006742:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006746:	431d      	orrs	r5, r3
 8006748:	d001      	beq.n	800674e <floor+0x46>
 800674a:	4c2d      	ldr	r4, [pc, #180]	; (8006800 <floor+0xf8>)
 800674c:	2500      	movs	r5, #0
 800674e:	4621      	mov	r1, r4
 8006750:	4628      	mov	r0, r5
 8006752:	e025      	b.n	80067a0 <floor+0x98>
 8006754:	4f2b      	ldr	r7, [pc, #172]	; (8006804 <floor+0xfc>)
 8006756:	4137      	asrs	r7, r6
 8006758:	ea01 0307 	and.w	r3, r1, r7
 800675c:	4303      	orrs	r3, r0
 800675e:	d01f      	beq.n	80067a0 <floor+0x98>
 8006760:	a325      	add	r3, pc, #148	; (adr r3, 80067f8 <floor+0xf0>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 fd89 	bl	800027c <__adddf3>
 800676a:	2200      	movs	r2, #0
 800676c:	2300      	movs	r3, #0
 800676e:	f7fa f9cb 	bl	8000b08 <__aeabi_dcmpgt>
 8006772:	2800      	cmp	r0, #0
 8006774:	d0eb      	beq.n	800674e <floor+0x46>
 8006776:	2c00      	cmp	r4, #0
 8006778:	bfbe      	ittt	lt
 800677a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800677e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006782:	19a4      	addlt	r4, r4, r6
 8006784:	ea24 0407 	bic.w	r4, r4, r7
 8006788:	2500      	movs	r5, #0
 800678a:	e7e0      	b.n	800674e <floor+0x46>
 800678c:	2e33      	cmp	r6, #51	; 0x33
 800678e:	dd0b      	ble.n	80067a8 <floor+0xa0>
 8006790:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006794:	d104      	bne.n	80067a0 <floor+0x98>
 8006796:	ee10 2a10 	vmov	r2, s0
 800679a:	460b      	mov	r3, r1
 800679c:	f7f9 fd6e 	bl	800027c <__adddf3>
 80067a0:	ec41 0b10 	vmov	d0, r0, r1
 80067a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295
 80067b0:	fa23 f707 	lsr.w	r7, r3, r7
 80067b4:	4207      	tst	r7, r0
 80067b6:	d0f3      	beq.n	80067a0 <floor+0x98>
 80067b8:	a30f      	add	r3, pc, #60	; (adr r3, 80067f8 <floor+0xf0>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f7f9 fd5d 	bl	800027c <__adddf3>
 80067c2:	2200      	movs	r2, #0
 80067c4:	2300      	movs	r3, #0
 80067c6:	f7fa f99f 	bl	8000b08 <__aeabi_dcmpgt>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d0bf      	beq.n	800674e <floor+0x46>
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	da02      	bge.n	80067d8 <floor+0xd0>
 80067d2:	2e14      	cmp	r6, #20
 80067d4:	d103      	bne.n	80067de <floor+0xd6>
 80067d6:	3401      	adds	r4, #1
 80067d8:	ea25 0507 	bic.w	r5, r5, r7
 80067dc:	e7b7      	b.n	800674e <floor+0x46>
 80067de:	2301      	movs	r3, #1
 80067e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80067e4:	fa03 f606 	lsl.w	r6, r3, r6
 80067e8:	4435      	add	r5, r6
 80067ea:	4545      	cmp	r5, r8
 80067ec:	bf38      	it	cc
 80067ee:	18e4      	addcc	r4, r4, r3
 80067f0:	e7f2      	b.n	80067d8 <floor+0xd0>
 80067f2:	2500      	movs	r5, #0
 80067f4:	462c      	mov	r4, r5
 80067f6:	e7aa      	b.n	800674e <floor+0x46>
 80067f8:	8800759c 	.word	0x8800759c
 80067fc:	7e37e43c 	.word	0x7e37e43c
 8006800:	bff00000 	.word	0xbff00000
 8006804:	000fffff 	.word	0x000fffff

08006808 <scalbn>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	ec55 4b10 	vmov	r4, r5, d0
 800680e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006812:	4606      	mov	r6, r0
 8006814:	462b      	mov	r3, r5
 8006816:	b99a      	cbnz	r2, 8006840 <scalbn+0x38>
 8006818:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800681c:	4323      	orrs	r3, r4
 800681e:	d036      	beq.n	800688e <scalbn+0x86>
 8006820:	4b39      	ldr	r3, [pc, #228]	; (8006908 <scalbn+0x100>)
 8006822:	4629      	mov	r1, r5
 8006824:	ee10 0a10 	vmov	r0, s0
 8006828:	2200      	movs	r2, #0
 800682a:	f7f9 fedd 	bl	80005e8 <__aeabi_dmul>
 800682e:	4b37      	ldr	r3, [pc, #220]	; (800690c <scalbn+0x104>)
 8006830:	429e      	cmp	r6, r3
 8006832:	4604      	mov	r4, r0
 8006834:	460d      	mov	r5, r1
 8006836:	da10      	bge.n	800685a <scalbn+0x52>
 8006838:	a32b      	add	r3, pc, #172	; (adr r3, 80068e8 <scalbn+0xe0>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	e03a      	b.n	80068b6 <scalbn+0xae>
 8006840:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006844:	428a      	cmp	r2, r1
 8006846:	d10c      	bne.n	8006862 <scalbn+0x5a>
 8006848:	ee10 2a10 	vmov	r2, s0
 800684c:	4620      	mov	r0, r4
 800684e:	4629      	mov	r1, r5
 8006850:	f7f9 fd14 	bl	800027c <__adddf3>
 8006854:	4604      	mov	r4, r0
 8006856:	460d      	mov	r5, r1
 8006858:	e019      	b.n	800688e <scalbn+0x86>
 800685a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800685e:	460b      	mov	r3, r1
 8006860:	3a36      	subs	r2, #54	; 0x36
 8006862:	4432      	add	r2, r6
 8006864:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006868:	428a      	cmp	r2, r1
 800686a:	dd08      	ble.n	800687e <scalbn+0x76>
 800686c:	2d00      	cmp	r5, #0
 800686e:	a120      	add	r1, pc, #128	; (adr r1, 80068f0 <scalbn+0xe8>)
 8006870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006874:	da1c      	bge.n	80068b0 <scalbn+0xa8>
 8006876:	a120      	add	r1, pc, #128	; (adr r1, 80068f8 <scalbn+0xf0>)
 8006878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800687c:	e018      	b.n	80068b0 <scalbn+0xa8>
 800687e:	2a00      	cmp	r2, #0
 8006880:	dd08      	ble.n	8006894 <scalbn+0x8c>
 8006882:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006886:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800688a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800688e:	ec45 4b10 	vmov	d0, r4, r5
 8006892:	bd70      	pop	{r4, r5, r6, pc}
 8006894:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006898:	da19      	bge.n	80068ce <scalbn+0xc6>
 800689a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800689e:	429e      	cmp	r6, r3
 80068a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80068a4:	dd0a      	ble.n	80068bc <scalbn+0xb4>
 80068a6:	a112      	add	r1, pc, #72	; (adr r1, 80068f0 <scalbn+0xe8>)
 80068a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e2      	bne.n	8006876 <scalbn+0x6e>
 80068b0:	a30f      	add	r3, pc, #60	; (adr r3, 80068f0 <scalbn+0xe8>)
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f7f9 fe97 	bl	80005e8 <__aeabi_dmul>
 80068ba:	e7cb      	b.n	8006854 <scalbn+0x4c>
 80068bc:	a10a      	add	r1, pc, #40	; (adr r1, 80068e8 <scalbn+0xe0>)
 80068be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0b8      	beq.n	8006838 <scalbn+0x30>
 80068c6:	a10e      	add	r1, pc, #56	; (adr r1, 8006900 <scalbn+0xf8>)
 80068c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068cc:	e7b4      	b.n	8006838 <scalbn+0x30>
 80068ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80068d2:	3236      	adds	r2, #54	; 0x36
 80068d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80068dc:	4620      	mov	r0, r4
 80068de:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <scalbn+0x108>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	e7e8      	b.n	80068b6 <scalbn+0xae>
 80068e4:	f3af 8000 	nop.w
 80068e8:	c2f8f359 	.word	0xc2f8f359
 80068ec:	01a56e1f 	.word	0x01a56e1f
 80068f0:	8800759c 	.word	0x8800759c
 80068f4:	7e37e43c 	.word	0x7e37e43c
 80068f8:	8800759c 	.word	0x8800759c
 80068fc:	fe37e43c 	.word	0xfe37e43c
 8006900:	c2f8f359 	.word	0xc2f8f359
 8006904:	81a56e1f 	.word	0x81a56e1f
 8006908:	43500000 	.word	0x43500000
 800690c:	ffff3cb0 	.word	0xffff3cb0
 8006910:	3c900000 	.word	0x3c900000

08006914 <_init>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	bf00      	nop
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr

08006920 <_fini>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr
